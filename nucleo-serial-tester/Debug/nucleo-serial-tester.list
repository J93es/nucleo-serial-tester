
nucleo-serial-tester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cb4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007a4  08006e58  08006e58  00016e58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075fc  080075fc  000201d0  2**0
                  CONTENTS
  4 .ARM          00000008  080075fc  080075fc  000175fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007604  08007604  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007604  08007604  00017604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007608  08007608  00017608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  0800760c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012f4  200001d0  080077dc  000201d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014c4  080077dc  000214c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000897c  00000000  00000000  00020243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022c9  00000000  00000000  00028bbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b30  00000000  00000000  0002ae88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000082e  00000000  00000000  0002b9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014422  00000000  00000000  0002c1e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a1d0  00000000  00000000  00040608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006bef3  00000000  00000000  0004a7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003e00  00000000  00000000  000b66cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  000ba4cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d0 	.word	0x200001d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006e3c 	.word	0x08006e3c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d4 	.word	0x200001d4
 80001dc:	08006e3c 	.word	0x08006e3c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eca:	68ba      	ldr	r2, [r7, #8]
 8000ecc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000edc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ee6:	4a04      	ldr	r2, [pc, #16]	; (8000ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	60d3      	str	r3, [r2, #12]
}
 8000eec:	bf00      	nop
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f00:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <__NVIC_GetPriorityGrouping+0x18>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	0a1b      	lsrs	r3, r3, #8
 8000f06:	f003 0307 	and.w	r3, r3, #7
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	db0b      	blt.n	8000f42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	f003 021f 	and.w	r2, r3, #31
 8000f30:	4907      	ldr	r1, [pc, #28]	; (8000f50 <__NVIC_EnableIRQ+0x38>)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	095b      	lsrs	r3, r3, #5
 8000f38:	2001      	movs	r0, #1
 8000f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000e100 	.word	0xe000e100

08000f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	6039      	str	r1, [r7, #0]
 8000f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	db0a      	blt.n	8000f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	490c      	ldr	r1, [pc, #48]	; (8000fa0 <__NVIC_SetPriority+0x4c>)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	0112      	lsls	r2, r2, #4
 8000f74:	b2d2      	uxtb	r2, r2
 8000f76:	440b      	add	r3, r1
 8000f78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f7c:	e00a      	b.n	8000f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4908      	ldr	r1, [pc, #32]	; (8000fa4 <__NVIC_SetPriority+0x50>)
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	f003 030f 	and.w	r3, r3, #15
 8000f8a:	3b04      	subs	r3, #4
 8000f8c:	0112      	lsls	r2, r2, #4
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	440b      	add	r3, r1
 8000f92:	761a      	strb	r2, [r3, #24]
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000e100 	.word	0xe000e100
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b089      	sub	sp, #36	; 0x24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f1c3 0307 	rsb	r3, r3, #7
 8000fc2:	2b04      	cmp	r3, #4
 8000fc4:	bf28      	it	cs
 8000fc6:	2304      	movcs	r3, #4
 8000fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3304      	adds	r3, #4
 8000fce:	2b06      	cmp	r3, #6
 8000fd0:	d902      	bls.n	8000fd8 <NVIC_EncodePriority+0x30>
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3b03      	subs	r3, #3
 8000fd6:	e000      	b.n	8000fda <NVIC_EncodePriority+0x32>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43da      	mvns	r2, r3
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	401a      	ands	r2, r3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffa:	43d9      	mvns	r1, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	4313      	orrs	r3, r2
         );
}
 8001002:	4618      	mov	r0, r3
 8001004:	3724      	adds	r7, #36	; 0x24
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 800100e:	b480      	push	{r7}
 8001010:	b083      	sub	sp, #12
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	601a      	str	r2, [r3, #0]
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	601a      	str	r2, [r3, #0]
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 800104e:	b480      	push	{r7}
 8001050:	b083      	sub	sp, #12
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
 8001056:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	431a      	orrs	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	60da      	str	r2, [r3, #12]
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	f023 0201 	bic.w	r2, r3, #1
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	60da      	str	r2, [r3, #12]
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001098:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <LL_RCC_HSI_Enable+0x1c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <LL_RCC_HSI_Enable+0x1c>)
 800109e:	f043 0301 	orr.w	r3, r3, #1
 80010a2:	6013      	str	r3, [r2, #0]
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	40023800 	.word	0x40023800

080010b4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <LL_RCC_HSI_IsReady+0x20>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f003 0302 	and.w	r3, r3, #2
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	bf0c      	ite	eq
 80010c4:	2301      	moveq	r3, #1
 80010c6:	2300      	movne	r3, #0
 80010c8:	b2db      	uxtb	r3, r3
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	40023800 	.word	0x40023800

080010d8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80010e0:	4b07      	ldr	r3, [pc, #28]	; (8001100 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	4904      	ldr	r1, [pc, #16]	; (8001100 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80010ee:	4313      	orrs	r3, r2
 80010f0:	600b      	str	r3, [r1, #0]
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	40023800 	.word	0x40023800

08001104 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <LL_RCC_SetSysClkSource+0x24>)
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	f023 0203 	bic.w	r2, r3, #3
 8001114:	4904      	ldr	r1, [pc, #16]	; (8001128 <LL_RCC_SetSysClkSource+0x24>)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4313      	orrs	r3, r2
 800111a:	608b      	str	r3, [r1, #8]
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	40023800 	.word	0x40023800

0800112c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001130:	4b04      	ldr	r3, [pc, #16]	; (8001144 <LL_RCC_GetSysClkSource+0x18>)
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	f003 030c 	and.w	r3, r3, #12
}
 8001138:	4618      	mov	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	40023800 	.word	0x40023800

08001148 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <LL_RCC_SetAHBPrescaler+0x24>)
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001158:	4904      	ldr	r1, [pc, #16]	; (800116c <LL_RCC_SetAHBPrescaler+0x24>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4313      	orrs	r3, r2
 800115e:	608b      	str	r3, [r1, #8]
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	40023800 	.word	0x40023800

08001170 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <LL_RCC_SetAPB1Prescaler+0x24>)
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001180:	4904      	ldr	r1, [pc, #16]	; (8001194 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4313      	orrs	r3, r2
 8001186:	608b      	str	r3, [r1, #8]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	40023800 	.word	0x40023800

08001198 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <LL_RCC_SetAPB2Prescaler+0x24>)
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80011a8:	4904      	ldr	r1, [pc, #16]	; (80011bc <LL_RCC_SetAPB2Prescaler+0x24>)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	608b      	str	r3, [r1, #8]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	40023800 	.word	0x40023800

080011c0 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 80011c8:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <LL_RCC_SetTIMPrescaler+0x28>)
 80011ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80011ce:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80011d2:	4905      	ldr	r1, [pc, #20]	; (80011e8 <LL_RCC_SetTIMPrescaler+0x28>)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	40023800 	.word	0x40023800

080011ec <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80011f0:	4b05      	ldr	r3, [pc, #20]	; (8001208 <LL_RCC_PLL_Enable+0x1c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a04      	ldr	r2, [pc, #16]	; (8001208 <LL_RCC_PLL_Enable+0x1c>)
 80011f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011fa:	6013      	str	r3, [r2, #0]
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40023800 	.word	0x40023800

0800120c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001210:	4b07      	ldr	r3, [pc, #28]	; (8001230 <LL_RCC_PLL_IsReady+0x24>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001218:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800121c:	bf0c      	ite	eq
 800121e:	2301      	moveq	r3, #1
 8001220:	2300      	movne	r3, #0
 8001222:	b2db      	uxtb	r3, r3
}
 8001224:	4618      	mov	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	40023800 	.word	0x40023800

08001234 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
 8001240:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8001242:	4b0d      	ldr	r3, [pc, #52]	; (8001278 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001244:	685a      	ldr	r2, [r3, #4]
 8001246:	4b0d      	ldr	r3, [pc, #52]	; (800127c <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8001248:	4013      	ands	r3, r2
 800124a:	68f9      	ldr	r1, [r7, #12]
 800124c:	68ba      	ldr	r2, [r7, #8]
 800124e:	4311      	orrs	r1, r2
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	0192      	lsls	r2, r2, #6
 8001254:	430a      	orrs	r2, r1
 8001256:	4908      	ldr	r1, [pc, #32]	; (8001278 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001258:	4313      	orrs	r3, r2
 800125a:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 800125c:	4b06      	ldr	r3, [pc, #24]	; (8001278 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001264:	4904      	ldr	r1, [pc, #16]	; (8001278 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	4313      	orrs	r3, r2
 800126a:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 800126c:	bf00      	nop
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	40023800 	.word	0x40023800
 800127c:	ffbf8000 	.word	0xffbf8000

08001280 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001288:	4b08      	ldr	r3, [pc, #32]	; (80012ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 800128a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800128c:	4907      	ldr	r1, [pc, #28]	; (80012ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4313      	orrs	r3, r2
 8001292:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001294:	4b05      	ldr	r3, [pc, #20]	; (80012ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001296:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4013      	ands	r3, r2
 800129c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800129e:	68fb      	ldr	r3, [r7, #12]
}
 80012a0:	bf00      	nop
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	40023800 	.word	0x40023800

080012b0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80012b8:	4b08      	ldr	r3, [pc, #32]	; (80012dc <LL_APB1_GRP1_EnableClock+0x2c>)
 80012ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012bc:	4907      	ldr	r1, [pc, #28]	; (80012dc <LL_APB1_GRP1_EnableClock+0x2c>)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <LL_APB1_GRP1_EnableClock+0x2c>)
 80012c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4013      	ands	r3, r2
 80012cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012ce:	68fb      	ldr	r3, [r7, #12]
}
 80012d0:	bf00      	nop
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	40023800 	.word	0x40023800

080012e0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80012e8:	4b08      	ldr	r3, [pc, #32]	; (800130c <LL_APB2_GRP1_EnableClock+0x2c>)
 80012ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012ec:	4907      	ldr	r1, [pc, #28]	; (800130c <LL_APB2_GRP1_EnableClock+0x2c>)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80012f4:	4b05      	ldr	r3, [pc, #20]	; (800130c <LL_APB2_GRP1_EnableClock+0x2c>)
 80012f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4013      	ands	r3, r2
 80012fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012fe:	68fb      	ldr	r3, [r7, #12]
}
 8001300:	bf00      	nop
 8001302:	3714      	adds	r7, #20
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	40023800 	.word	0x40023800

08001310 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800131a:	4a13      	ldr	r2, [pc, #76]	; (8001368 <LL_SYSCFG_SetEXTISource+0x58>)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	b2db      	uxtb	r3, r3
 8001320:	3302      	adds	r3, #2
 8001322:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	0c1b      	lsrs	r3, r3, #16
 800132a:	43db      	mvns	r3, r3
 800132c:	ea02 0103 	and.w	r1, r2, r3
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	0c1b      	lsrs	r3, r3, #16
 8001334:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	fa93 f3a3 	rbit	r3, r3
 800133c:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	fab3 f383 	clz	r3, r3
 8001344:	b2db      	uxtb	r3, r3
 8001346:	461a      	mov	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	fa03 f202 	lsl.w	r2, r3, r2
 800134e:	4806      	ldr	r0, [pc, #24]	; (8001368 <LL_SYSCFG_SetEXTISource+0x58>)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	b2db      	uxtb	r3, r3
 8001354:	430a      	orrs	r2, r1
 8001356:	3302      	adds	r3, #2
 8001358:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800135c:	bf00      	nop
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	40013800 	.word	0x40013800

0800136c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <LL_FLASH_SetLatency+0x24>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f023 0207 	bic.w	r2, r3, #7
 800137c:	4904      	ldr	r1, [pc, #16]	; (8001390 <LL_FLASH_SetLatency+0x24>)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4313      	orrs	r3, r2
 8001382:	600b      	str	r3, [r1, #0]
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	40023c00 	.word	0x40023c00

08001394 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001398:	4b04      	ldr	r3, [pc, #16]	; (80013ac <LL_FLASH_GetLatency+0x18>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0307 	and.w	r3, r3, #7
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	40023c00 	.word	0x40023c00

080013b0 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80013c0:	4904      	ldr	r1, [pc, #16]	; (80013d4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	600b      	str	r3, [r1, #0]
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	40007000 	.word	0x40007000

080013d8 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 80013dc:	4b07      	ldr	r3, [pc, #28]	; (80013fc <LL_PWR_IsActiveFlag_VOS+0x24>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80013e8:	bf0c      	ite	eq
 80013ea:	2301      	moveq	r3, #1
 80013ec:	2300      	movne	r3, #0
 80013ee:	b2db      	uxtb	r3, r3
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	40007000 	.word	0x40007000

08001400 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f023 0210 	bic.w	r2, r3, #16
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	431a      	orrs	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	605a      	str	r2, [r3, #4]
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <LL_TIM_SetOnePulseMode>:
  *         @arg @ref LL_TIM_ONEPULSEMODE_SINGLE
  *         @arg @ref LL_TIM_ONEPULSEMODE_REPETITIVE
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetOnePulseMode(TIM_TypeDef *TIMx, uint32_t OnePulseMode)
{
 8001426:	b480      	push	{r7}
 8001428:	b083      	sub	sp, #12
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
 800142e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f023 0208 	bic.w	r2, r3, #8
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	431a      	orrs	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	601a      	str	r2, [r3, #0]
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	601a      	str	r2, [r3, #0]
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	601a      	str	r2, [r3, #0]
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800149e:	f023 0307 	bic.w	r3, r3, #7
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	431a      	orrs	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	609a      	str	r2, [r3, #8]
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80014b6:	b480      	push	{r7}
 80014b8:	b083      	sub	sp, #12
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
 80014be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	431a      	orrs	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	605a      	str	r2, [r3, #4]
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	609a      	str	r2, [r3, #8]
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	60da      	str	r2, [r3, #12]
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	691b      	ldr	r3, [r3, #16]
 8001528:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	695b      	ldr	r3, [r3, #20]
 8001534:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	615a      	str	r2, [r3, #20]
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001548:	b480      	push	{r7}
 800154a:	b089      	sub	sp, #36	; 0x24
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	fa93 f3a3 	rbit	r3, r3
 8001562:	613b      	str	r3, [r7, #16]
  return result;
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	fab3 f383 	clz	r3, r3
 800156a:	b2db      	uxtb	r3, r3
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	2103      	movs	r1, #3
 8001570:	fa01 f303 	lsl.w	r3, r1, r3
 8001574:	43db      	mvns	r3, r3
 8001576:	401a      	ands	r2, r3
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	fa93 f3a3 	rbit	r3, r3
 8001582:	61bb      	str	r3, [r7, #24]
  return result;
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	fab3 f383 	clz	r3, r3
 800158a:	b2db      	uxtb	r3, r3
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	fa01 f303 	lsl.w	r3, r1, r3
 8001594:	431a      	orrs	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	601a      	str	r2, [r3, #0]
}
 800159a:	bf00      	nop
 800159c:	3724      	adds	r7, #36	; 0x24
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b089      	sub	sp, #36	; 0x24
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	60f8      	str	r0, [r7, #12]
 80015ae:	60b9      	str	r1, [r7, #8]
 80015b0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	68da      	ldr	r2, [r3, #12]
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	fa93 f3a3 	rbit	r3, r3
 80015c0:	613b      	str	r3, [r7, #16]
  return result;
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	fab3 f383 	clz	r3, r3
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	2103      	movs	r1, #3
 80015ce:	fa01 f303 	lsl.w	r3, r1, r3
 80015d2:	43db      	mvns	r3, r3
 80015d4:	401a      	ands	r2, r3
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	fa93 f3a3 	rbit	r3, r3
 80015e0:	61bb      	str	r3, [r7, #24]
  return result;
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	fab3 f383 	clz	r3, r3
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	6879      	ldr	r1, [r7, #4]
 80015ee:	fa01 f303 	lsl.w	r3, r1, r3
 80015f2:	431a      	orrs	r2, r3
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	60da      	str	r2, [r3, #12]
}
 80015f8:	bf00      	nop
 80015fa:	3724      	adds	r7, #36	; 0x24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	041a      	lsls	r2, r3, #16
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	619a      	str	r2, [r3, #24]
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001626:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800162a:	f7ff fe59 	bl	80012e0 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800162e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001632:	f7ff fe3d 	bl	80012b0 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001636:	2007      	movs	r0, #7
 8001638:	f7ff fc3c 	bl	8000eb4 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800163c:	f000 f814 	bl	8001668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001640:	f000 fa64 	bl	8001b0c <MX_GPIO_Init>
  MX_I2C3_Init();
 8001644:	f000 f85e 	bl	8001704 <MX_I2C3_Init>
  MX_TIM2_Init();
 8001648:	f000 f91e 	bl	8001888 <MX_TIM2_Init>
  MX_TIM3_Init();
 800164c:	f000 f954 	bl	80018f8 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001650:	f000 fa0c 	bl	8001a6c <MX_USART2_UART_Init>
  MX_TIM9_Init();
 8001654:	f000 f9d0 	bl	80019f8 <MX_TIM9_Init>
  MX_SPI2_Init();
 8001658:	f000 f8c2 	bl	80017e0 <MX_SPI2_Init>
  MX_TIM4_Init();
 800165c:	f000 f98c 	bl	8001978 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  Init();
 8001660:	f002 fd4a 	bl	80040f8 <Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8001664:	e7fe      	b.n	8001664 <main+0x42>
	...

08001668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 800166c:	2003      	movs	r0, #3
 800166e:	f7ff fe7d 	bl	800136c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 8001672:	bf00      	nop
 8001674:	f7ff fe8e 	bl	8001394 <LL_FLASH_GetLatency>
 8001678:	4603      	mov	r3, r0
 800167a:	2b03      	cmp	r3, #3
 800167c:	d1fa      	bne.n	8001674 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800167e:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 8001682:	f7ff fe95 	bl	80013b0 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 8001686:	2010      	movs	r0, #16
 8001688:	f7ff fd26 	bl	80010d8 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 800168c:	f7ff fd02 	bl	8001094 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001690:	bf00      	nop
 8001692:	f7ff fd0f 	bl	80010b4 <LL_RCC_HSI_IsReady>
 8001696:	4603      	mov	r3, r0
 8001698:	2b01      	cmp	r3, #1
 800169a:	d1fa      	bne.n	8001692 <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_8, 100, LL_RCC_PLLP_DIV_2);
 800169c:	2300      	movs	r3, #0
 800169e:	2264      	movs	r2, #100	; 0x64
 80016a0:	2108      	movs	r1, #8
 80016a2:	2000      	movs	r0, #0
 80016a4:	f7ff fdc6 	bl	8001234 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80016a8:	f7ff fda0 	bl	80011ec <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80016ac:	bf00      	nop
 80016ae:	f7ff fdad 	bl	800120c <LL_RCC_PLL_IsReady>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d1fa      	bne.n	80016ae <SystemClock_Config+0x46>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 80016b8:	bf00      	nop
 80016ba:	f7ff fe8d 	bl	80013d8 <LL_PWR_IsActiveFlag_VOS>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0fa      	beq.n	80016ba <SystemClock_Config+0x52>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80016c4:	2000      	movs	r0, #0
 80016c6:	f7ff fd3f 	bl	8001148 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 80016ca:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80016ce:	f7ff fd4f 	bl	8001170 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80016d2:	2000      	movs	r0, #0
 80016d4:	f7ff fd60 	bl	8001198 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80016d8:	2002      	movs	r0, #2
 80016da:	f7ff fd13 	bl	8001104 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80016de:	bf00      	nop
 80016e0:	f7ff fd24 	bl	800112c <LL_RCC_GetSysClkSource>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b08      	cmp	r3, #8
 80016e8:	d1fa      	bne.n	80016e0 <SystemClock_Config+0x78>
  {

  }
  LL_Init1msTick(100000000);
 80016ea:	4805      	ldr	r0, [pc, #20]	; (8001700 <SystemClock_Config+0x98>)
 80016ec:	f001 fcfc 	bl	80030e8 <LL_Init1msTick>
  LL_SetSystemCoreClock(100000000);
 80016f0:	4803      	ldr	r0, [pc, #12]	; (8001700 <SystemClock_Config+0x98>)
 80016f2:	f001 fd07 	bl	8003104 <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 80016f6:	2000      	movs	r0, #0
 80016f8:	f7ff fd62 	bl	80011c0 <LL_RCC_SetTIMPrescaler>
}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	05f5e100 	.word	0x05f5e100

08001704 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08e      	sub	sp, #56	; 0x38
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C3_Init 0 */

  /* USER CODE END I2C3_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800170a:	f107 0318 	add.w	r3, r7, #24
 800170e:	2220      	movs	r2, #32
 8001710:	2100      	movs	r1, #0
 8001712:	4618      	mov	r0, r3
 8001714:	f003 fa54 	bl	8004bc0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	463b      	mov	r3, r7
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	60da      	str	r2, [r3, #12]
 8001724:	611a      	str	r2, [r3, #16]
 8001726:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001728:	2004      	movs	r0, #4
 800172a:	f7ff fda9 	bl	8001280 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800172e:	2001      	movs	r0, #1
 8001730:	f7ff fda6 	bl	8001280 <LL_AHB1_GRP1_EnableClock>
  /**I2C3 GPIO Configuration
  PC9   ------> I2C3_SDA
  PA8   ------> I2C3_SCL
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8001734:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001738:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800173a:	2302      	movs	r3, #2
 800173c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800173e:	2303      	movs	r3, #3
 8001740:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001742:	2301      	movs	r3, #1
 8001744:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001746:	2301      	movs	r3, #1
 8001748:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800174a:	2304      	movs	r3, #4
 800174c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800174e:	463b      	mov	r3, r7
 8001750:	4619      	mov	r1, r3
 8001752:	481f      	ldr	r0, [pc, #124]	; (80017d0 <MX_I2C3_Init+0xcc>)
 8001754:	f000 fdc4 	bl	80022e0 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8001758:	f44f 7380 	mov.w	r3, #256	; 0x100
 800175c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800175e:	2302      	movs	r3, #2
 8001760:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001762:	2303      	movs	r3, #3
 8001764:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001766:	2301      	movs	r3, #1
 8001768:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800176a:	2301      	movs	r3, #1
 800176c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800176e:	2304      	movs	r3, #4
 8001770:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001772:	463b      	mov	r3, r7
 8001774:	4619      	mov	r1, r3
 8001776:	4817      	ldr	r0, [pc, #92]	; (80017d4 <MX_I2C3_Init+0xd0>)
 8001778:	f000 fdb2 	bl	80022e0 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C3);
 800177c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001780:	f7ff fd96 	bl	80012b0 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C3_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C3);
 8001784:	4814      	ldr	r0, [pc, #80]	; (80017d8 <MX_I2C3_Init+0xd4>)
 8001786:	f7ff fc75 	bl	8001074 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C3);
 800178a:	4813      	ldr	r0, [pc, #76]	; (80017d8 <MX_I2C3_Init+0xd4>)
 800178c:	f7ff fc4f 	bl	800102e <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C3);
 8001790:	4811      	ldr	r0, [pc, #68]	; (80017d8 <MX_I2C3_Init+0xd4>)
 8001792:	f7ff fc3c 	bl	800100e <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001796:	2300      	movs	r3, #0
 8001798:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 800179a:	4b10      	ldr	r3, [pc, #64]	; (80017dc <MX_I2C3_Init+0xd8>)
 800179c:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 800179e:	2300      	movs	r3, #0
 80017a0:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80017a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017aa:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80017ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017b0:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C3, &I2C_InitStruct);
 80017b2:	f107 0318 	add.w	r3, r7, #24
 80017b6:	4619      	mov	r1, r3
 80017b8:	4807      	ldr	r0, [pc, #28]	; (80017d8 <MX_I2C3_Init+0xd4>)
 80017ba:	f000 ff11 	bl	80025e0 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C3, 0);
 80017be:	2100      	movs	r1, #0
 80017c0:	4805      	ldr	r0, [pc, #20]	; (80017d8 <MX_I2C3_Init+0xd4>)
 80017c2:	f7ff fc44 	bl	800104e <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80017c6:	bf00      	nop
 80017c8:	3738      	adds	r7, #56	; 0x38
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40020800 	.word	0x40020800
 80017d4:	40020000 	.word	0x40020000
 80017d8:	40005c00 	.word	0x40005c00
 80017dc:	000186a0 	.word	0x000186a0

080017e0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b090      	sub	sp, #64	; 0x40
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80017e6:	f107 0318 	add.w	r3, r7, #24
 80017ea:	2228      	movs	r2, #40	; 0x28
 80017ec:	2100      	movs	r1, #0
 80017ee:	4618      	mov	r0, r3
 80017f0:	f003 f9e6 	bl	8004bc0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	463b      	mov	r3, r7
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	605a      	str	r2, [r3, #4]
 80017fc:	609a      	str	r2, [r3, #8]
 80017fe:	60da      	str	r2, [r3, #12]
 8001800:	611a      	str	r2, [r3, #16]
 8001802:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001804:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001808:	f7ff fd52 	bl	80012b0 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800180c:	2002      	movs	r0, #2
 800180e:	f7ff fd37 	bl	8001280 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB10   ------> SPI2_SCK
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_15;
 8001812:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8001816:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001818:	2302      	movs	r3, #2
 800181a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800181c:	2303      	movs	r3, #3
 800181e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001824:	2300      	movs	r3, #0
 8001826:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001828:	2305      	movs	r3, #5
 800182a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182c:	463b      	mov	r3, r7
 800182e:	4619      	mov	r1, r3
 8001830:	4813      	ldr	r0, [pc, #76]	; (8001880 <MX_SPI2_Init+0xa0>)
 8001832:	f000 fd55 	bl	80022e0 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001836:	2300      	movs	r3, #0
 8001838:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800183a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800183e:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001840:	2300      	movs	r3, #0
 8001842:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8001844:	2300      	movs	r3, #0
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8001848:	2300      	movs	r3, #0
 800184a:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800184c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001850:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 8001852:	2300      	movs	r3, #0
 8001854:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001856:	2300      	movs	r3, #0
 8001858:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800185a:	2300      	movs	r3, #0
 800185c:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 800185e:	230a      	movs	r3, #10
 8001860:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8001862:	f107 0318 	add.w	r3, r7, #24
 8001866:	4619      	mov	r1, r3
 8001868:	4806      	ldr	r0, [pc, #24]	; (8001884 <MX_SPI2_Init+0xa4>)
 800186a:	f001 f850 	bl	800290e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 800186e:	2100      	movs	r1, #0
 8001870:	4804      	ldr	r0, [pc, #16]	; (8001884 <MX_SPI2_Init+0xa4>)
 8001872:	f7ff fdc5 	bl	8001400 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001876:	bf00      	nop
 8001878:	3740      	adds	r7, #64	; 0x40
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40020400 	.word	0x40020400
 8001884:	40003800 	.word	0x40003800

08001888 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800188e:	1d3b      	adds	r3, r7, #4
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 800189c:	2001      	movs	r0, #1
 800189e:	f7ff fd07 	bl	80012b0 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 99;
 80018a2:	2363      	movs	r3, #99	; 0x63
 80018a4:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80018a6:	2300      	movs	r3, #0
 80018a8:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 4294967295;
 80018aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018ae:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80018b0:	2300      	movs	r3, #0
 80018b2:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80018b4:	1d3b      	adds	r3, r7, #4
 80018b6:	4619      	mov	r1, r3
 80018b8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80018bc:	f001 f8b4 	bl	8002a28 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 80018c0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80018c4:	f7ff fdd2 	bl	800146c <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 80018c8:	2100      	movs	r1, #0
 80018ca:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80018ce:	f7ff fddd 	bl	800148c <LL_TIM_SetClockSource>
  LL_TIM_SetOnePulseMode(TIM2, LL_TIM_ONEPULSEMODE_SINGLE);
 80018d2:	2108      	movs	r1, #8
 80018d4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80018d8:	f7ff fda5 	bl	8001426 <LL_TIM_SetOnePulseMode>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 80018dc:	2100      	movs	r1, #0
 80018de:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80018e2:	f7ff fde8 	bl	80014b6 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 80018e6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80018ea:	f7ff fdf7 	bl	80014dc <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018ee:	bf00      	nop
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
	...

080018f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80018fe:	1d3b      	adds	r3, r7, #4
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 800190c:	2002      	movs	r0, #2
 800190e:	f7ff fccf 	bl	80012b0 <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001912:	f7ff faf3 	bl	8000efc <__NVIC_GetPriorityGrouping>
 8001916:	4603      	mov	r3, r0
 8001918:	2200      	movs	r2, #0
 800191a:	2100      	movs	r1, #0
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff fb43 	bl	8000fa8 <NVIC_EncodePriority>
 8001922:	4603      	mov	r3, r0
 8001924:	4619      	mov	r1, r3
 8001926:	201d      	movs	r0, #29
 8001928:	f7ff fb14 	bl	8000f54 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 800192c:	201d      	movs	r0, #29
 800192e:	f7ff faf3 	bl	8000f18 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 99;
 8001932:	2363      	movs	r3, #99	; 0x63
 8001934:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001936:	2300      	movs	r3, #0
 8001938:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 800193a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800193e:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001940:	2300      	movs	r3, #0
 8001942:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001944:	1d3b      	adds	r3, r7, #4
 8001946:	4619      	mov	r1, r3
 8001948:	480a      	ldr	r0, [pc, #40]	; (8001974 <MX_TIM3_Init+0x7c>)
 800194a:	f001 f86d 	bl	8002a28 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 800194e:	4809      	ldr	r0, [pc, #36]	; (8001974 <MX_TIM3_Init+0x7c>)
 8001950:	f7ff fd7c 	bl	800144c <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001954:	2100      	movs	r1, #0
 8001956:	4807      	ldr	r0, [pc, #28]	; (8001974 <MX_TIM3_Init+0x7c>)
 8001958:	f7ff fd98 	bl	800148c <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 800195c:	2100      	movs	r1, #0
 800195e:	4805      	ldr	r0, [pc, #20]	; (8001974 <MX_TIM3_Init+0x7c>)
 8001960:	f7ff fda9 	bl	80014b6 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8001964:	4803      	ldr	r0, [pc, #12]	; (8001974 <MX_TIM3_Init+0x7c>)
 8001966:	f7ff fdb9 	bl	80014dc <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */
  /* USER CODE END TIM3_Init 2 */

}
 800196a:	bf00      	nop
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40000400 	.word	0x40000400

08001978 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800197e:	1d3b      	adds	r3, r7, #4
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 800198c:	2004      	movs	r0, #4
 800198e:	f7ff fc8f 	bl	80012b0 <LL_APB1_GRP1_EnableClock>

  /* TIM4 interrupt Init */
  NVIC_SetPriority(TIM4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001992:	f7ff fab3 	bl	8000efc <__NVIC_GetPriorityGrouping>
 8001996:	4603      	mov	r3, r0
 8001998:	2200      	movs	r2, #0
 800199a:	2100      	movs	r1, #0
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff fb03 	bl	8000fa8 <NVIC_EncodePriority>
 80019a2:	4603      	mov	r3, r0
 80019a4:	4619      	mov	r1, r3
 80019a6:	201e      	movs	r0, #30
 80019a8:	f7ff fad4 	bl	8000f54 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM4_IRQn);
 80019ac:	201e      	movs	r0, #30
 80019ae:	f7ff fab3 	bl	8000f18 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 99;
 80019b2:	2363      	movs	r3, #99	; 0x63
 80019b4:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80019b6:	2300      	movs	r3, #0
 80019b8:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 80019ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019be:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80019c0:	2300      	movs	r3, #0
 80019c2:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 80019c4:	1d3b      	adds	r3, r7, #4
 80019c6:	4619      	mov	r1, r3
 80019c8:	480a      	ldr	r0, [pc, #40]	; (80019f4 <MX_TIM4_Init+0x7c>)
 80019ca:	f001 f82d 	bl	8002a28 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM4);
 80019ce:	4809      	ldr	r0, [pc, #36]	; (80019f4 <MX_TIM4_Init+0x7c>)
 80019d0:	f7ff fd3c 	bl	800144c <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 80019d4:	2100      	movs	r1, #0
 80019d6:	4807      	ldr	r0, [pc, #28]	; (80019f4 <MX_TIM4_Init+0x7c>)
 80019d8:	f7ff fd58 	bl	800148c <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 80019dc:	2100      	movs	r1, #0
 80019de:	4805      	ldr	r0, [pc, #20]	; (80019f4 <MX_TIM4_Init+0x7c>)
 80019e0:	f7ff fd69 	bl	80014b6 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 80019e4:	4803      	ldr	r0, [pc, #12]	; (80019f4 <MX_TIM4_Init+0x7c>)
 80019e6:	f7ff fd79 	bl	80014dc <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80019ea:	bf00      	nop
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40000800 	.word	0x40000800

080019f8 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80019fe:	1d3b      	adds	r3, r7, #4
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM9);
 8001a0c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001a10:	f7ff fc66 	bl	80012e0 <LL_APB2_GRP1_EnableClock>

  /* TIM9 interrupt Init */
  NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 1));
 8001a14:	f7ff fa72 	bl	8000efc <__NVIC_GetPriorityGrouping>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff fac2 	bl	8000fa8 <NVIC_EncodePriority>
 8001a24:	4603      	mov	r3, r0
 8001a26:	4619      	mov	r1, r3
 8001a28:	2018      	movs	r0, #24
 8001a2a:	f7ff fa93 	bl	8000f54 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001a2e:	2018      	movs	r0, #24
 8001a30:	f7ff fa72 	bl	8000f18 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 50000;
 8001a3c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8001a40:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001a42:	2300      	movs	r3, #0
 8001a44:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM9, &TIM_InitStruct);
 8001a46:	1d3b      	adds	r3, r7, #4
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4807      	ldr	r0, [pc, #28]	; (8001a68 <MX_TIM9_Init+0x70>)
 8001a4c:	f000 ffec 	bl	8002a28 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM9);
 8001a50:	4805      	ldr	r0, [pc, #20]	; (8001a68 <MX_TIM9_Init+0x70>)
 8001a52:	f7ff fd0b 	bl	800146c <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM9, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001a56:	2100      	movs	r1, #0
 8001a58:	4803      	ldr	r0, [pc, #12]	; (8001a68 <MX_TIM9_Init+0x70>)
 8001a5a:	f7ff fd17 	bl	800148c <LL_TIM_SetClockSource>
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001a5e:	bf00      	nop
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40014000 	.word	0x40014000

08001a6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08e      	sub	sp, #56	; 0x38
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001a72:	f107 031c 	add.w	r3, r7, #28
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	609a      	str	r2, [r3, #8]
 8001a7e:	60da      	str	r2, [r3, #12]
 8001a80:	611a      	str	r2, [r3, #16]
 8001a82:	615a      	str	r2, [r3, #20]
 8001a84:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a86:	1d3b      	adds	r3, r7, #4
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
 8001a92:	611a      	str	r2, [r3, #16]
 8001a94:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001a96:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001a9a:	f7ff fc09 	bl	80012b0 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001a9e:	2001      	movs	r0, #1
 8001aa0:	f7ff fbee 	bl	8001280 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001aa4:	230c      	movs	r3, #12
 8001aa6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001aac:	2303      	movs	r3, #3
 8001aae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001ab8:	2307      	movs	r3, #7
 8001aba:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abc:	1d3b      	adds	r3, r7, #4
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4810      	ldr	r0, [pc, #64]	; (8001b04 <MX_USART2_UART_Init+0x98>)
 8001ac2:	f000 fc0d 	bl	80022e0 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001ac6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001aca:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001acc:	2300      	movs	r3, #0
 8001ace:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001ad8:	230c      	movs	r3, #12
 8001ada:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001adc:	2300      	movs	r3, #0
 8001ade:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8001ae4:	f107 031c 	add.w	r3, r7, #28
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4807      	ldr	r0, [pc, #28]	; (8001b08 <MX_USART2_UART_Init+0x9c>)
 8001aec:	f001 fa7e 	bl	8002fec <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001af0:	4805      	ldr	r0, [pc, #20]	; (8001b08 <MX_USART2_UART_Init+0x9c>)
 8001af2:	f7ff fd13 	bl	800151c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001af6:	4804      	ldr	r0, [pc, #16]	; (8001b08 <MX_USART2_UART_Init+0x9c>)
 8001af8:	f7ff fd00 	bl	80014fc <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001afc:	bf00      	nop
 8001afe:	3738      	adds	r7, #56	; 0x38
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40020000 	.word	0x40020000
 8001b08:	40004400 	.word	0x40004400

08001b0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b088      	sub	sp, #32
 8001b10:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001b12:	f107 0318 	add.w	r3, r7, #24
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1c:	463b      	mov	r3, r7
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	605a      	str	r2, [r3, #4]
 8001b24:	609a      	str	r2, [r3, #8]
 8001b26:	60da      	str	r2, [r3, #12]
 8001b28:	611a      	str	r2, [r3, #16]
 8001b2a:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001b2c:	2004      	movs	r0, #4
 8001b2e:	f7ff fba7 	bl	8001280 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8001b32:	2080      	movs	r0, #128	; 0x80
 8001b34:	f7ff fba4 	bl	8001280 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001b38:	2001      	movs	r0, #1
 8001b3a:	f7ff fba1 	bl	8001280 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001b3e:	2002      	movs	r0, #2
 8001b40:	f7ff fb9e 	bl	8001280 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, OLED_DC_Pin|LD2_Pin);
 8001b44:	2130      	movs	r1, #48	; 0x30
 8001b46:	4830      	ldr	r0, [pc, #192]	; (8001c08 <MX_GPIO_Init+0xfc>)
 8001b48:	f7ff fd5c 	bl	8001604 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(OLED_CS_GPIO_Port, OLED_CS_Pin);
 8001b4c:	2104      	movs	r1, #4
 8001b4e:	482f      	ldr	r0, [pc, #188]	; (8001c0c <MX_GPIO_Init+0x100>)
 8001b50:	f7ff fd58 	bl	8001604 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8001b54:	492e      	ldr	r1, [pc, #184]	; (8001c10 <MX_GPIO_Init+0x104>)
 8001b56:	2002      	movs	r0, #2
 8001b58:	f7ff fbda 	bl	8001310 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8001b5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b60:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001b62:	2301      	movs	r3, #1
 8001b64:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001b66:	2300      	movs	r3, #0
 8001b68:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001b6e:	f107 0318 	add.w	r3, r7, #24
 8001b72:	4618      	mov	r0, r3
 8001b74:	f000 fa30 	bl	8001fd8 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b7e:	4825      	ldr	r0, [pc, #148]	; (8001c14 <MX_GPIO_Init+0x108>)
 8001b80:	f7ff fd11 	bl	80015a6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8001b84:	2200      	movs	r2, #0
 8001b86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b8a:	4822      	ldr	r0, [pc, #136]	; (8001c14 <MX_GPIO_Init+0x108>)
 8001b8c:	f7ff fcdc 	bl	8001548 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 8001b90:	2310      	movs	r3, #16
 8001b92:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001b94:	2301      	movs	r3, #1
 8001b96:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 8001ba4:	463b      	mov	r3, r7
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4817      	ldr	r0, [pc, #92]	; (8001c08 <MX_GPIO_Init+0xfc>)
 8001baa:	f000 fb99 	bl	80022e0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 8001bae:	2320      	movs	r3, #32
 8001bb0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001bc2:	463b      	mov	r3, r7
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4810      	ldr	r0, [pc, #64]	; (8001c08 <MX_GPIO_Init+0xfc>)
 8001bc8:	f000 fb8a 	bl	80022e0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 8001bcc:	2304      	movs	r3, #4
 8001bce:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 8001be0:	463b      	mov	r3, r7
 8001be2:	4619      	mov	r1, r3
 8001be4:	4809      	ldr	r0, [pc, #36]	; (8001c0c <MX_GPIO_Init+0x100>)
 8001be6:	f000 fb7b 	bl	80022e0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SWL_Pin|SWR_Pin;
 8001bea:	2330      	movs	r3, #48	; 0x30
 8001bec:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf6:	463b      	mov	r3, r7
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4804      	ldr	r0, [pc, #16]	; (8001c0c <MX_GPIO_Init+0x100>)
 8001bfc:	f000 fb70 	bl	80022e0 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c00:	bf00      	nop
 8001c02:	3720      	adds	r7, #32
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40020000 	.word	0x40020000
 8001c0c:	40020400 	.word	0x40020400
 8001c10:	00f00003 	.word	0x00f00003
 8001c14:	40020800 	.word	0x40020800

08001c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001c1c:	e7fe      	b.n	8001c1c <NMI_Handler+0x4>

08001c1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c22:	e7fe      	b.n	8001c22 <HardFault_Handler+0x4>

08001c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c28:	e7fe      	b.n	8001c28 <MemManage_Handler+0x4>

08001c2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c2e:	e7fe      	b.n	8001c2e <BusFault_Handler+0x4>

08001c30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c34:	e7fe      	b.n	8001c34 <UsageFault_Handler+0x4>

08001c36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c52:	b480      	push	{r7}
 8001c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */
	uwTick++;
 8001c64:	4b04      	ldr	r3, [pc, #16]	; (8001c78 <SysTick_Handler+0x18>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	4a03      	ldr	r2, [pc, #12]	; (8001c78 <SysTick_Handler+0x18>)
 8001c6c:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	200001ec 	.word	0x200001ec

08001c7c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0

  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0

  /* USER CODE END TIM4_IRQn 0 */
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0
	return 1;
 8001caa:	2301      	movs	r3, #1
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <_kill>:

int _kill(int pid, int sig)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b082      	sub	sp, #8
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
 8001cbe:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001cc0:	f002 ff8a 	bl	8004bd8 <__errno>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2216      	movs	r2, #22
 8001cc8:	601a      	str	r2, [r3, #0]
	return -1;
 8001cca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <_exit>:

void _exit (int status)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b082      	sub	sp, #8
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001cde:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7ff ffe7 	bl	8001cb6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ce8:	e7fe      	b.n	8001ce8 <_exit+0x12>

08001cea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b086      	sub	sp, #24
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	60f8      	str	r0, [r7, #12]
 8001cf2:	60b9      	str	r1, [r7, #8]
 8001cf4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]
 8001cfa:	e00a      	b.n	8001d12 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001cfc:	f3af 8000 	nop.w
 8001d00:	4601      	mov	r1, r0
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	1c5a      	adds	r2, r3, #1
 8001d06:	60ba      	str	r2, [r7, #8]
 8001d08:	b2ca      	uxtb	r2, r1
 8001d0a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	617b      	str	r3, [r7, #20]
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	dbf0      	blt.n	8001cfc <_read+0x12>
	}

return len;
 8001d1a:	687b      	ldr	r3, [r7, #4]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]
 8001d34:	e009      	b.n	8001d4a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	1c5a      	adds	r2, r3, #1
 8001d3a:	60ba      	str	r2, [r7, #8]
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f002 f8c0 	bl	8003ec4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	3301      	adds	r3, #1
 8001d48:	617b      	str	r3, [r7, #20]
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	dbf1      	blt.n	8001d36 <_write+0x12>
	}
	return len;
 8001d52:	687b      	ldr	r3, [r7, #4]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <_close>:

int _close(int file)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
	return -1;
 8001d64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d84:	605a      	str	r2, [r3, #4]
	return 0;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <_isatty>:

int _isatty(int file)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
	return 1;
 8001d9c:	2301      	movs	r3, #1
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b085      	sub	sp, #20
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	60f8      	str	r0, [r7, #12]
 8001db2:	60b9      	str	r1, [r7, #8]
 8001db4:	607a      	str	r2, [r7, #4]
	return 0;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dcc:	4a14      	ldr	r2, [pc, #80]	; (8001e20 <_sbrk+0x5c>)
 8001dce:	4b15      	ldr	r3, [pc, #84]	; (8001e24 <_sbrk+0x60>)
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dd8:	4b13      	ldr	r3, [pc, #76]	; (8001e28 <_sbrk+0x64>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d102      	bne.n	8001de6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001de0:	4b11      	ldr	r3, [pc, #68]	; (8001e28 <_sbrk+0x64>)
 8001de2:	4a12      	ldr	r2, [pc, #72]	; (8001e2c <_sbrk+0x68>)
 8001de4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001de6:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <_sbrk+0x64>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d207      	bcs.n	8001e04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001df4:	f002 fef0 	bl	8004bd8 <__errno>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	220c      	movs	r2, #12
 8001dfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e02:	e009      	b.n	8001e18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e04:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <_sbrk+0x64>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e0a:	4b07      	ldr	r3, [pc, #28]	; (8001e28 <_sbrk+0x64>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4413      	add	r3, r2
 8001e12:	4a05      	ldr	r2, [pc, #20]	; (8001e28 <_sbrk+0x64>)
 8001e14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e16:	68fb      	ldr	r3, [r7, #12]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3718      	adds	r7, #24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	20020000 	.word	0x20020000
 8001e24:	00000400 	.word	0x00000400
 8001e28:	200001f0 	.word	0x200001f0
 8001e2c:	200014c8 	.word	0x200014c8

08001e30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e34:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <SystemInit+0x20>)
 8001e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e3a:	4a05      	ldr	r2, [pc, #20]	; (8001e50 <SystemInit+0x20>)
 8001e3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e44:	bf00      	nop
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	e000ed00 	.word	0xe000ed00

08001e54 <Reset_Handler>:
 8001e54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e8c <LoopFillZerobss+0x12>
 8001e58:	480d      	ldr	r0, [pc, #52]	; (8001e90 <LoopFillZerobss+0x16>)
 8001e5a:	490e      	ldr	r1, [pc, #56]	; (8001e94 <LoopFillZerobss+0x1a>)
 8001e5c:	4a0e      	ldr	r2, [pc, #56]	; (8001e98 <LoopFillZerobss+0x1e>)
 8001e5e:	2300      	movs	r3, #0
 8001e60:	e002      	b.n	8001e68 <LoopCopyDataInit>

08001e62 <CopyDataInit>:
 8001e62:	58d4      	ldr	r4, [r2, r3]
 8001e64:	50c4      	str	r4, [r0, r3]
 8001e66:	3304      	adds	r3, #4

08001e68 <LoopCopyDataInit>:
 8001e68:	18c4      	adds	r4, r0, r3
 8001e6a:	428c      	cmp	r4, r1
 8001e6c:	d3f9      	bcc.n	8001e62 <CopyDataInit>
 8001e6e:	4a0b      	ldr	r2, [pc, #44]	; (8001e9c <LoopFillZerobss+0x22>)
 8001e70:	4c0b      	ldr	r4, [pc, #44]	; (8001ea0 <LoopFillZerobss+0x26>)
 8001e72:	2300      	movs	r3, #0
 8001e74:	e001      	b.n	8001e7a <LoopFillZerobss>

08001e76 <FillZerobss>:
 8001e76:	6013      	str	r3, [r2, #0]
 8001e78:	3204      	adds	r2, #4

08001e7a <LoopFillZerobss>:
 8001e7a:	42a2      	cmp	r2, r4
 8001e7c:	d3fb      	bcc.n	8001e76 <FillZerobss>
 8001e7e:	f7ff ffd7 	bl	8001e30 <SystemInit>
 8001e82:	f002 feaf 	bl	8004be4 <__libc_init_array>
 8001e86:	f7ff fbcc 	bl	8001622 <main>
 8001e8a:	4770      	bx	lr
 8001e8c:	20020000 	.word	0x20020000
 8001e90:	20000000 	.word	0x20000000
 8001e94:	200001d0 	.word	0x200001d0
 8001e98:	0800760c 	.word	0x0800760c
 8001e9c:	200001d0 	.word	0x200001d0
 8001ea0:	200014c4 	.word	0x200014c4

08001ea4 <ADC_IRQHandler>:
 8001ea4:	e7fe      	b.n	8001ea4 <ADC_IRQHandler>
	...

08001ea8 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8001eb0:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <LL_EXTI_EnableIT_0_31+0x20>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	4904      	ldr	r1, [pc, #16]	; (8001ec8 <LL_EXTI_EnableIT_0_31+0x20>)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	600b      	str	r3, [r1, #0]
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	40013c00 	.word	0x40013c00

08001ecc <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001ed4:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <LL_EXTI_DisableIT_0_31+0x24>)
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	43db      	mvns	r3, r3
 8001edc:	4904      	ldr	r1, [pc, #16]	; (8001ef0 <LL_EXTI_DisableIT_0_31+0x24>)
 8001ede:	4013      	ands	r3, r2
 8001ee0:	600b      	str	r3, [r1, #0]
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	40013c00 	.word	0x40013c00

08001ef4 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8001efc:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	4904      	ldr	r1, [pc, #16]	; (8001f14 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	604b      	str	r3, [r1, #4]

}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	40013c00 	.word	0x40013c00

08001f18 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8001f20:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <LL_EXTI_DisableEvent_0_31+0x24>)
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	43db      	mvns	r3, r3
 8001f28:	4904      	ldr	r1, [pc, #16]	; (8001f3c <LL_EXTI_DisableEvent_0_31+0x24>)
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	604b      	str	r3, [r1, #4]
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	40013c00 	.word	0x40013c00

08001f40 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001f48:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	4904      	ldr	r1, [pc, #16]	; (8001f60 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	608b      	str	r3, [r1, #8]

}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	40013c00 	.word	0x40013c00

08001f64 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001f6c:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	43db      	mvns	r3, r3
 8001f74:	4904      	ldr	r1, [pc, #16]	; (8001f88 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001f76:	4013      	ands	r3, r2
 8001f78:	608b      	str	r3, [r1, #8]

}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	40013c00 	.word	0x40013c00

08001f8c <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001f94:	4b05      	ldr	r3, [pc, #20]	; (8001fac <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001f96:	68da      	ldr	r2, [r3, #12]
 8001f98:	4904      	ldr	r1, [pc, #16]	; (8001fac <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	60cb      	str	r3, [r1, #12]
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	40013c00 	.word	0x40013c00

08001fb0 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8001fb8:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001fba:	68da      	ldr	r2, [r3, #12]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	4904      	ldr	r1, [pc, #16]	; (8001fd4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	60cb      	str	r3, [r1, #12]
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	40013c00 	.word	0x40013c00

08001fd8 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	791b      	ldrb	r3, [r3, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d065      	beq.n	80020b8 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d06b      	beq.n	80020cc <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	795b      	ldrb	r3, [r3, #5]
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d01c      	beq.n	8002036 <LL_EXTI_Init+0x5e>
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	dc25      	bgt.n	800204c <LL_EXTI_Init+0x74>
 8002000:	2b00      	cmp	r3, #0
 8002002:	d002      	beq.n	800200a <LL_EXTI_Init+0x32>
 8002004:	2b01      	cmp	r3, #1
 8002006:	d00b      	beq.n	8002020 <LL_EXTI_Init+0x48>
 8002008:	e020      	b.n	800204c <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff ff82 	bl	8001f18 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff ff45 	bl	8001ea8 <LL_EXTI_EnableIT_0_31>
          break;
 800201e:	e018      	b.n	8002052 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff ff51 	bl	8001ecc <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff ff60 	bl	8001ef4 <LL_EXTI_EnableEvent_0_31>
          break;
 8002034:	e00d      	b.n	8002052 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff ff34 	bl	8001ea8 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff ff55 	bl	8001ef4 <LL_EXTI_EnableEvent_0_31>
          break;
 800204a:	e002      	b.n	8002052 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	73fb      	strb	r3, [r7, #15]
          break;
 8002050:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	799b      	ldrb	r3, [r3, #6]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d038      	beq.n	80020cc <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	799b      	ldrb	r3, [r3, #6]
 800205e:	2b03      	cmp	r3, #3
 8002060:	d01c      	beq.n	800209c <LL_EXTI_Init+0xc4>
 8002062:	2b03      	cmp	r3, #3
 8002064:	dc25      	bgt.n	80020b2 <LL_EXTI_Init+0xda>
 8002066:	2b01      	cmp	r3, #1
 8002068:	d002      	beq.n	8002070 <LL_EXTI_Init+0x98>
 800206a:	2b02      	cmp	r3, #2
 800206c:	d00b      	beq.n	8002086 <LL_EXTI_Init+0xae>
 800206e:	e020      	b.n	80020b2 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff ff9b 	bl	8001fb0 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff ff5e 	bl	8001f40 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8002084:	e022      	b.n	80020cc <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff ff6a 	bl	8001f64 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff ff79 	bl	8001f8c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800209a:	e017      	b.n	80020cc <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff ff4d 	bl	8001f40 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff ff6e 	bl	8001f8c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80020b0:	e00c      	b.n	80020cc <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	73fb      	strb	r3, [r7, #15]
            break;
 80020b6:	e009      	b.n	80020cc <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff ff05 	bl	8001ecc <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff ff26 	bl	8001f18 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 80020cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <LL_GPIO_SetPinMode>:
{
 80020d6:	b480      	push	{r7}
 80020d8:	b089      	sub	sp, #36	; 0x24
 80020da:	af00      	add	r7, sp, #0
 80020dc:	60f8      	str	r0, [r7, #12]
 80020de:	60b9      	str	r1, [r7, #8]
 80020e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	fa93 f3a3 	rbit	r3, r3
 80020f0:	613b      	str	r3, [r7, #16]
  return result;
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	fab3 f383 	clz	r3, r3
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	2103      	movs	r1, #3
 80020fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002102:	43db      	mvns	r3, r3
 8002104:	401a      	ands	r2, r3
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	fa93 f3a3 	rbit	r3, r3
 8002110:	61bb      	str	r3, [r7, #24]
  return result;
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	fab3 f383 	clz	r3, r3
 8002118:	b2db      	uxtb	r3, r3
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	fa01 f303 	lsl.w	r3, r1, r3
 8002122:	431a      	orrs	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	601a      	str	r2, [r3, #0]
}
 8002128:	bf00      	nop
 800212a:	3724      	adds	r7, #36	; 0x24
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <LL_GPIO_SetPinOutputType>:
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	685a      	ldr	r2, [r3, #4]
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	43db      	mvns	r3, r3
 8002148:	401a      	ands	r2, r3
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	fb01 f303 	mul.w	r3, r1, r3
 8002152:	431a      	orrs	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	605a      	str	r2, [r3, #4]
}
 8002158:	bf00      	nop
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <LL_GPIO_SetPinSpeed>:
{
 8002164:	b480      	push	{r7}
 8002166:	b089      	sub	sp, #36	; 0x24
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	fa93 f3a3 	rbit	r3, r3
 800217e:	613b      	str	r3, [r7, #16]
  return result;
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	fab3 f383 	clz	r3, r3
 8002186:	b2db      	uxtb	r3, r3
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	2103      	movs	r1, #3
 800218c:	fa01 f303 	lsl.w	r3, r1, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	401a      	ands	r2, r3
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	fa93 f3a3 	rbit	r3, r3
 800219e:	61bb      	str	r3, [r7, #24]
  return result;
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	fab3 f383 	clz	r3, r3
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	fa01 f303 	lsl.w	r3, r1, r3
 80021b0:	431a      	orrs	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	609a      	str	r2, [r3, #8]
}
 80021b6:	bf00      	nop
 80021b8:	3724      	adds	r7, #36	; 0x24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <LL_GPIO_SetPinPull>:
{
 80021c2:	b480      	push	{r7}
 80021c4:	b089      	sub	sp, #36	; 0x24
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	60f8      	str	r0, [r7, #12]
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	68da      	ldr	r2, [r3, #12]
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	fa93 f3a3 	rbit	r3, r3
 80021dc:	613b      	str	r3, [r7, #16]
  return result;
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	fab3 f383 	clz	r3, r3
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	2103      	movs	r1, #3
 80021ea:	fa01 f303 	lsl.w	r3, r1, r3
 80021ee:	43db      	mvns	r3, r3
 80021f0:	401a      	ands	r2, r3
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	fa93 f3a3 	rbit	r3, r3
 80021fc:	61bb      	str	r3, [r7, #24]
  return result;
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	fab3 f383 	clz	r3, r3
 8002204:	b2db      	uxtb	r3, r3
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	6879      	ldr	r1, [r7, #4]
 800220a:	fa01 f303 	lsl.w	r3, r1, r3
 800220e:	431a      	orrs	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	60da      	str	r2, [r3, #12]
}
 8002214:	bf00      	nop
 8002216:	3724      	adds	r7, #36	; 0x24
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <LL_GPIO_SetAFPin_0_7>:
{
 8002220:	b480      	push	{r7}
 8002222:	b089      	sub	sp, #36	; 0x24
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6a1a      	ldr	r2, [r3, #32]
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	fa93 f3a3 	rbit	r3, r3
 800223a:	613b      	str	r3, [r7, #16]
  return result;
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	fab3 f383 	clz	r3, r3
 8002242:	b2db      	uxtb	r3, r3
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	210f      	movs	r1, #15
 8002248:	fa01 f303 	lsl.w	r3, r1, r3
 800224c:	43db      	mvns	r3, r3
 800224e:	401a      	ands	r2, r3
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	fa93 f3a3 	rbit	r3, r3
 800225a:	61bb      	str	r3, [r7, #24]
  return result;
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	fab3 f383 	clz	r3, r3
 8002262:	b2db      	uxtb	r3, r3
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	fa01 f303 	lsl.w	r3, r1, r3
 800226c:	431a      	orrs	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	621a      	str	r2, [r3, #32]
}
 8002272:	bf00      	nop
 8002274:	3724      	adds	r7, #36	; 0x24
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <LL_GPIO_SetAFPin_8_15>:
{
 800227e:	b480      	push	{r7}
 8002280:	b089      	sub	sp, #36	; 0x24
 8002282:	af00      	add	r7, sp, #0
 8002284:	60f8      	str	r0, [r7, #12]
 8002286:	60b9      	str	r1, [r7, #8]
 8002288:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	0a1b      	lsrs	r3, r3, #8
 8002292:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	fa93 f3a3 	rbit	r3, r3
 800229a:	613b      	str	r3, [r7, #16]
  return result;
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	fab3 f383 	clz	r3, r3
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	210f      	movs	r1, #15
 80022a8:	fa01 f303 	lsl.w	r3, r1, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	401a      	ands	r2, r3
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	0a1b      	lsrs	r3, r3, #8
 80022b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	fa93 f3a3 	rbit	r3, r3
 80022bc:	61bb      	str	r3, [r7, #24]
  return result;
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	fab3 f383 	clz	r3, r3
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	fa01 f303 	lsl.w	r3, r1, r3
 80022ce:	431a      	orrs	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80022d4:	bf00      	nop
 80022d6:	3724      	adds	r7, #36	; 0x24
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b088      	sub	sp, #32
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80022ea:	2300      	movs	r3, #0
 80022ec:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	fa93 f3a3 	rbit	r3, r3
 80022fe:	613b      	str	r3, [r7, #16]
  return result;
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	fab3 f383 	clz	r3, r3
 8002306:	b2db      	uxtb	r3, r3
 8002308:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800230a:	e050      	b.n	80023ae <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	2101      	movs	r1, #1
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	fa01 f303 	lsl.w	r3, r1, r3
 8002318:	4013      	ands	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d042      	beq.n	80023a8 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d003      	beq.n	8002332 <LL_GPIO_Init+0x52>
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b02      	cmp	r3, #2
 8002330:	d10d      	bne.n	800234e <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	461a      	mov	r2, r3
 8002338:	69b9      	ldr	r1, [r7, #24]
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7ff ff12 	bl	8002164 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	461a      	mov	r2, r3
 8002346:	69b9      	ldr	r1, [r7, #24]
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7ff fef3 	bl	8002134 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	461a      	mov	r2, r3
 8002354:	69b9      	ldr	r1, [r7, #24]
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7ff ff33 	bl	80021c2 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	2b02      	cmp	r3, #2
 8002362:	d11a      	bne.n	800239a <LL_GPIO_Init+0xba>
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	fa93 f3a3 	rbit	r3, r3
 800236e:	60bb      	str	r3, [r7, #8]
  return result;
 8002370:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002372:	fab3 f383 	clz	r3, r3
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b07      	cmp	r3, #7
 800237a:	d807      	bhi.n	800238c <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	461a      	mov	r2, r3
 8002382:	69b9      	ldr	r1, [r7, #24]
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f7ff ff4b 	bl	8002220 <LL_GPIO_SetAFPin_0_7>
 800238a:	e006      	b.n	800239a <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	695b      	ldr	r3, [r3, #20]
 8002390:	461a      	mov	r2, r3
 8002392:	69b9      	ldr	r1, [r7, #24]
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f7ff ff72 	bl	800227e <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	461a      	mov	r2, r3
 80023a0:	69b9      	ldr	r1, [r7, #24]
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7ff fe97 	bl	80020d6 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	3301      	adds	r3, #1
 80023ac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	fa22 f303 	lsr.w	r3, r2, r3
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1a7      	bne.n	800230c <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3720      	adds	r7, #32
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <LL_I2C_Enable>:
{
 80023c6:	b480      	push	{r7}
 80023c8:	b083      	sub	sp, #12
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f043 0201 	orr.w	r2, r3, #1
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	601a      	str	r2, [r3, #0]
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <LL_I2C_Disable>:
{
 80023e6:	b480      	push	{r7}
 80023e8:	b083      	sub	sp, #12
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f023 0201 	bic.w	r2, r3, #1
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	601a      	str	r2, [r3, #0]
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <LL_I2C_ConfigFilters>:
{
 8002406:	b480      	push	{r7}
 8002408:	b085      	sub	sp, #20
 800240a:	af00      	add	r7, sp, #0
 800240c:	60f8      	str	r0, [r7, #12]
 800240e:	60b9      	str	r1, [r7, #8]
 8002410:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->FLTR, I2C_FLTR_ANOFF | I2C_FLTR_DNF, AnalogFilter | DigitalFilter);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002416:	f023 021f 	bic.w	r2, r3, #31
 800241a:	68b9      	ldr	r1, [r7, #8]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	430b      	orrs	r3, r1
 8002420:	431a      	orrs	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002426:	bf00      	nop
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr

08002432 <LL_I2C_SetOwnAddress1>:
{
 8002432:	b480      	push	{r7}
 8002434:	b085      	sub	sp, #20
 8002436:	af00      	add	r7, sp, #0
 8002438:	60f8      	str	r0, [r7, #12]
 800243a:	60b9      	str	r1, [r7, #8]
 800243c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002446:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800244a:	68b9      	ldr	r1, [r7, #8]
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	430a      	orrs	r2, r1
 8002450:	431a      	orrs	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	609a      	str	r2, [r3, #8]
}
 8002456:	bf00      	nop
 8002458:	3714      	adds	r7, #20
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
	...

08002464 <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 8002464:	b480      	push	{r7}
 8002466:	b087      	sub	sp, #28
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
 8002470:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 8002472:	2300      	movs	r3, #0
 8002474:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 8002476:	2300      	movs	r3, #0
 8002478:	617b      	str	r3, [r7, #20]

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	4a42      	ldr	r2, [pc, #264]	; (8002588 <LL_I2C_ConfigSpeed+0x124>)
 800247e:	fba2 2303 	umull	r2, r3, r2, r3
 8002482:	0c9b      	lsrs	r3, r3, #18
 8002484:	613b      	str	r3, [r7, #16]

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	431a      	orrs	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	493a      	ldr	r1, [pc, #232]	; (800258c <LL_I2C_ConfigSpeed+0x128>)
 80024a2:	428b      	cmp	r3, r1
 80024a4:	d802      	bhi.n	80024ac <LL_I2C_ConfigSpeed+0x48>
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	3301      	adds	r3, #1
 80024aa:	e009      	b.n	80024c0 <LL_I2C_ConfigSpeed+0x5c>
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80024b2:	fb01 f303 	mul.w	r3, r1, r3
 80024b6:	4936      	ldr	r1, [pc, #216]	; (8002590 <LL_I2C_ConfigSpeed+0x12c>)
 80024b8:	fba1 1303 	umull	r1, r3, r1, r3
 80024bc:	099b      	lsrs	r3, r3, #6
 80024be:	3301      	adds	r3, #1
 80024c0:	431a      	orrs	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a30      	ldr	r2, [pc, #192]	; (800258c <LL_I2C_ConfigSpeed+0x128>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d939      	bls.n	8002542 <LL_I2C_ConfigSpeed+0xde>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d117      	bne.n	8002504 <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	4613      	mov	r3, r2
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	4413      	add	r3, r2
 80024dc:	68ba      	ldr	r2, [r7, #8]
 80024de:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d009      	beq.n	80024fe <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	4613      	mov	r3, r2
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	4413      	add	r3, r2
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80024f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024fc:	e01d      	b.n	800253a <LL_I2C_ConfigSpeed+0xd6>
 80024fe:	f248 0301 	movw	r3, #32769	; 0x8001
 8002502:	e01a      	b.n	800253a <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	4613      	mov	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	009a      	lsls	r2, r3, #2
 800250e:	4413      	add	r3, r2
 8002510:	68ba      	ldr	r2, [r7, #8]
 8002512:	fbb2 f3f3 	udiv	r3, r2, r3
 8002516:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00b      	beq.n	8002536 <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	4613      	mov	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	009a      	lsls	r2, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8002530:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002534:	e001      	b.n	800253a <LL_I2C_ConfigSpeed+0xd6>
 8002536:	f248 0301 	movw	r3, #32769	; 0x8001
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	4313      	orrs	r3, r2
 800253e:	617b      	str	r3, [r7, #20]
 8002540:	e011      	b.n	8002566 <LL_I2C_ConfigSpeed+0x102>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	fbb2 f2f3 	udiv	r2, r2, r3
 800254c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002550:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8002552:	2b00      	cmp	r3, #0
 8002554:	d005      	beq.n	8002562 <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 800255a:	68ba      	ldr	r2, [r7, #8]
 800255c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002560:	e000      	b.n	8002564 <LL_I2C_ConfigSpeed+0x100>
 8002562:	2304      	movs	r3, #4
 8002564:	617b      	str	r3, [r7, #20]
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 800256e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	431a      	orrs	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	61da      	str	r2, [r3, #28]
}
 800257a:	bf00      	nop
 800257c:	371c      	adds	r7, #28
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	431bde83 	.word	0x431bde83
 800258c:	000186a0 	.word	0x000186a0
 8002590:	10624dd3 	.word	0x10624dd3

08002594 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f023 021a 	bic.w	r2, r3, #26
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	431a      	orrs	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	601a      	str	r2, [r3, #0]
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b083      	sub	sp, #12
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
 80025c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	431a      	orrs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	601a      	str	r2, [r3, #0]
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7ff fefb 	bl	80023e6 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80025f0:	f107 0308 	add.w	r3, r7, #8
 80025f4:	4618      	mov	r0, r3
 80025f6:	f000 f89d 	bl	8002734 <LL_RCC_GetSystemClocksFreq>
  /*---------------------------- I2Cx FLTR Configuration -----------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_FLTR_ANFOFF bit
   * - DigitalFilter: I2C_FLTR_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	68d9      	ldr	r1, [r3, #12]
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	461a      	mov	r2, r3
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f7ff fefe 	bl	8002406 <LL_I2C_ConfigFilters>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 800260a:	6939      	ldr	r1, [r7, #16]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f7ff ff25 	bl	8002464 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	6959      	ldr	r1, [r3, #20]
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	461a      	mov	r2, r3
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f7ff ff04 	bl	8002432 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4619      	mov	r1, r3
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f7ff ffaf 	bl	8002594 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f7ff fec5 	bl	80023c6 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	4619      	mov	r1, r3
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7ff ffb9 	bl	80025ba <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3718      	adds	r7, #24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
	...

08002654 <LL_RCC_GetSysClkSource>:
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002658:	4b04      	ldr	r3, [pc, #16]	; (800266c <LL_RCC_GetSysClkSource+0x18>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f003 030c 	and.w	r3, r3, #12
}
 8002660:	4618      	mov	r0, r3
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	40023800 	.word	0x40023800

08002670 <LL_RCC_GetAHBPrescaler>:
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002674:	4b04      	ldr	r3, [pc, #16]	; (8002688 <LL_RCC_GetAHBPrescaler+0x18>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800267c:	4618      	mov	r0, r3
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	40023800 	.word	0x40023800

0800268c <LL_RCC_GetAPB1Prescaler>:
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002690:	4b04      	ldr	r3, [pc, #16]	; (80026a4 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8002698:	4618      	mov	r0, r3
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	40023800 	.word	0x40023800

080026a8 <LL_RCC_GetAPB2Prescaler>:
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80026ac:	4b04      	ldr	r3, [pc, #16]	; (80026c0 <LL_RCC_GetAPB2Prescaler+0x18>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	40023800 	.word	0x40023800

080026c4 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80026c8:	4b04      	ldr	r3, [pc, #16]	; (80026dc <LL_RCC_PLL_GetMainSource+0x18>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	40023800 	.word	0x40023800

080026e0 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80026e4:	4b04      	ldr	r3, [pc, #16]	; (80026f8 <LL_RCC_PLL_GetN+0x18>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	099b      	lsrs	r3, r3, #6
 80026ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	40023800 	.word	0x40023800

080026fc <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8002700:	4b04      	ldr	r3, [pc, #16]	; (8002714 <LL_RCC_PLL_GetP+0x18>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8002708:	4618      	mov	r0, r3
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	40023800 	.word	0x40023800

08002718 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800271c:	4b04      	ldr	r3, [pc, #16]	; (8002730 <LL_RCC_PLL_GetDivider+0x18>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8002724:	4618      	mov	r0, r3
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	40023800 	.word	0x40023800

08002734 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800273c:	f000 f820 	bl	8002780 <RCC_GetSystemClockFreq>
 8002740:	4602      	mov	r2, r0
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f000 f840 	bl	80027d0 <RCC_GetHCLKClockFreq>
 8002750:	4602      	mov	r2, r0
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	4618      	mov	r0, r3
 800275c:	f000 f84e 	bl	80027fc <RCC_GetPCLK1ClockFreq>
 8002760:	4602      	mov	r2, r0
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	4618      	mov	r0, r3
 800276c:	f000 f85a 	bl	8002824 <RCC_GetPCLK2ClockFreq>
 8002770:	4602      	mov	r2, r0
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	60da      	str	r2, [r3, #12]
}
 8002776:	bf00      	nop
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
	...

08002780 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002786:	2300      	movs	r3, #0
 8002788:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800278a:	f7ff ff63 	bl	8002654 <LL_RCC_GetSysClkSource>
 800278e:	4603      	mov	r3, r0
 8002790:	2b08      	cmp	r3, #8
 8002792:	d00c      	beq.n	80027ae <RCC_GetSystemClockFreq+0x2e>
 8002794:	2b08      	cmp	r3, #8
 8002796:	d80f      	bhi.n	80027b8 <RCC_GetSystemClockFreq+0x38>
 8002798:	2b00      	cmp	r3, #0
 800279a:	d002      	beq.n	80027a2 <RCC_GetSystemClockFreq+0x22>
 800279c:	2b04      	cmp	r3, #4
 800279e:	d003      	beq.n	80027a8 <RCC_GetSystemClockFreq+0x28>
 80027a0:	e00a      	b.n	80027b8 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80027a2:	4b09      	ldr	r3, [pc, #36]	; (80027c8 <RCC_GetSystemClockFreq+0x48>)
 80027a4:	607b      	str	r3, [r7, #4]
      break;
 80027a6:	e00a      	b.n	80027be <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80027a8:	4b08      	ldr	r3, [pc, #32]	; (80027cc <RCC_GetSystemClockFreq+0x4c>)
 80027aa:	607b      	str	r3, [r7, #4]
      break;
 80027ac:	e007      	b.n	80027be <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80027ae:	2008      	movs	r0, #8
 80027b0:	f000 f84c 	bl	800284c <RCC_PLL_GetFreqDomain_SYS>
 80027b4:	6078      	str	r0, [r7, #4]
      break;
 80027b6:	e002      	b.n	80027be <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80027b8:	4b03      	ldr	r3, [pc, #12]	; (80027c8 <RCC_GetSystemClockFreq+0x48>)
 80027ba:	607b      	str	r3, [r7, #4]
      break;
 80027bc:	bf00      	nop
  }

  return frequency;
 80027be:	687b      	ldr	r3, [r7, #4]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	00f42400 	.word	0x00f42400
 80027cc:	007a1200 	.word	0x007a1200

080027d0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80027d8:	f7ff ff4a 	bl	8002670 <LL_RCC_GetAHBPrescaler>
 80027dc:	4603      	mov	r3, r0
 80027de:	091b      	lsrs	r3, r3, #4
 80027e0:	f003 030f 	and.w	r3, r3, #15
 80027e4:	4a04      	ldr	r2, [pc, #16]	; (80027f8 <RCC_GetHCLKClockFreq+0x28>)
 80027e6:	5cd3      	ldrb	r3, [r2, r3]
 80027e8:	461a      	mov	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	40d3      	lsrs	r3, r2
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	08006ff0 	.word	0x08006ff0

080027fc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002804:	f7ff ff42 	bl	800268c <LL_RCC_GetAPB1Prescaler>
 8002808:	4603      	mov	r3, r0
 800280a:	0a9b      	lsrs	r3, r3, #10
 800280c:	4a04      	ldr	r2, [pc, #16]	; (8002820 <RCC_GetPCLK1ClockFreq+0x24>)
 800280e:	5cd3      	ldrb	r3, [r2, r3]
 8002810:	461a      	mov	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	40d3      	lsrs	r3, r2
}
 8002816:	4618      	mov	r0, r3
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	08007000 	.word	0x08007000

08002824 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800282c:	f7ff ff3c 	bl	80026a8 <LL_RCC_GetAPB2Prescaler>
 8002830:	4603      	mov	r3, r0
 8002832:	0b5b      	lsrs	r3, r3, #13
 8002834:	4a04      	ldr	r2, [pc, #16]	; (8002848 <RCC_GetPCLK2ClockFreq+0x24>)
 8002836:	5cd3      	ldrb	r3, [r2, r3]
 8002838:	461a      	mov	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	40d3      	lsrs	r3, r2
}
 800283e:	4618      	mov	r0, r3
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	08007000 	.word	0x08007000

0800284c <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 800284c:	b590      	push	{r4, r7, lr}
 800284e:	b087      	sub	sp, #28
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8002854:	2300      	movs	r3, #0
 8002856:	617b      	str	r3, [r7, #20]
 8002858:	2300      	movs	r3, #0
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	2300      	movs	r3, #0
 800285e:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002860:	f7ff ff30 	bl	80026c4 <LL_RCC_PLL_GetMainSource>
 8002864:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d004      	beq.n	8002876 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002872:	d003      	beq.n	800287c <RCC_PLL_GetFreqDomain_SYS+0x30>
 8002874:	e005      	b.n	8002882 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002876:	4b12      	ldr	r3, [pc, #72]	; (80028c0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002878:	617b      	str	r3, [r7, #20]
      break;
 800287a:	e005      	b.n	8002888 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800287c:	4b11      	ldr	r3, [pc, #68]	; (80028c4 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800287e:	617b      	str	r3, [r7, #20]
      break;
 8002880:	e002      	b.n	8002888 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8002882:	4b0f      	ldr	r3, [pc, #60]	; (80028c0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002884:	617b      	str	r3, [r7, #20]
      break;
 8002886:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b08      	cmp	r3, #8
 800288c:	d113      	bne.n	80028b6 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800288e:	f7ff ff43 	bl	8002718 <LL_RCC_PLL_GetDivider>
 8002892:	4602      	mov	r2, r0
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	fbb3 f4f2 	udiv	r4, r3, r2
 800289a:	f7ff ff21 	bl	80026e0 <LL_RCC_PLL_GetN>
 800289e:	4603      	mov	r3, r0
 80028a0:	fb03 f404 	mul.w	r4, r3, r4
 80028a4:	f7ff ff2a 	bl	80026fc <LL_RCC_PLL_GetP>
 80028a8:	4603      	mov	r3, r0
 80028aa:	0c1b      	lsrs	r3, r3, #16
 80028ac:	3301      	adds	r3, #1
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	fbb4 f3f3 	udiv	r3, r4, r3
 80028b4:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80028b6:	693b      	ldr	r3, [r7, #16]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	371c      	adds	r7, #28
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd90      	pop	{r4, r7, pc}
 80028c0:	00f42400 	.word	0x00f42400
 80028c4:	007a1200 	.word	0x007a1200

080028c8 <LL_SPI_IsEnabled>:
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d8:	2b40      	cmp	r3, #64	; 0x40
 80028da:	d101      	bne.n	80028e0 <LL_SPI_IsEnabled+0x18>
 80028dc:	2301      	movs	r3, #1
 80028de:	e000      	b.n	80028e2 <LL_SPI_IsEnabled+0x1a>
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
 80028f6:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	461a      	mov	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	611a      	str	r2, [r3, #16]
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b084      	sub	sp, #16
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
 8002916:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7ff ffd3 	bl	80028c8 <LL_SPI_IsEnabled>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d139      	bne.n	800299c <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002930:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	6811      	ldr	r1, [r2, #0]
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	6852      	ldr	r2, [r2, #4]
 800293c:	4311      	orrs	r1, r2
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	6892      	ldr	r2, [r2, #8]
 8002942:	4311      	orrs	r1, r2
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	68d2      	ldr	r2, [r2, #12]
 8002948:	4311      	orrs	r1, r2
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	6912      	ldr	r2, [r2, #16]
 800294e:	4311      	orrs	r1, r2
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	6952      	ldr	r2, [r2, #20]
 8002954:	4311      	orrs	r1, r2
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	6992      	ldr	r2, [r2, #24]
 800295a:	4311      	orrs	r1, r2
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	69d2      	ldr	r2, [r2, #28]
 8002960:	4311      	orrs	r1, r2
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	6a12      	ldr	r2, [r2, #32]
 8002966:	430a      	orrs	r2, r1
 8002968:	431a      	orrs	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f023 0204 	bic.w	r2, r3, #4
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	0c1b      	lsrs	r3, r3, #16
 800297c:	431a      	orrs	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800298a:	d105      	bne.n	8002998 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002990:	4619      	mov	r1, r3
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7ff ffab 	bl	80028ee <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8002998:	2300      	movs	r3, #0
 800299a:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	69db      	ldr	r3, [r3, #28]
 80029a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	61da      	str	r2, [r3, #28]
  return status;
 80029a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <LL_TIM_SetPrescaler>:
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
 80029ba:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <LL_TIM_SetAutoReload>:
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
 80029d6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <LL_TIM_SetRepetitionCounter>:
{
 80029ea:	b480      	push	{r7}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
 80029f2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b083      	sub	sp, #12
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	f043 0201 	orr.w	r2, r3, #1
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	615a      	str	r2, [r3, #20]
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
	...

08002a28 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a31      	ldr	r2, [pc, #196]	; (8002b00 <LL_TIM_Init+0xd8>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d00f      	beq.n	8002a60 <LL_TIM_Init+0x38>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a46:	d00b      	beq.n	8002a60 <LL_TIM_Init+0x38>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a2e      	ldr	r2, [pc, #184]	; (8002b04 <LL_TIM_Init+0xdc>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d007      	beq.n	8002a60 <LL_TIM_Init+0x38>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a2d      	ldr	r2, [pc, #180]	; (8002b08 <LL_TIM_Init+0xe0>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d003      	beq.n	8002a60 <LL_TIM_Init+0x38>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a2c      	ldr	r2, [pc, #176]	; (8002b0c <LL_TIM_Init+0xe4>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d106      	bne.n	8002a6e <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a23      	ldr	r2, [pc, #140]	; (8002b00 <LL_TIM_Init+0xd8>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d01b      	beq.n	8002aae <LL_TIM_Init+0x86>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a7c:	d017      	beq.n	8002aae <LL_TIM_Init+0x86>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a20      	ldr	r2, [pc, #128]	; (8002b04 <LL_TIM_Init+0xdc>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d013      	beq.n	8002aae <LL_TIM_Init+0x86>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a1f      	ldr	r2, [pc, #124]	; (8002b08 <LL_TIM_Init+0xe0>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d00f      	beq.n	8002aae <LL_TIM_Init+0x86>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a1e      	ldr	r2, [pc, #120]	; (8002b0c <LL_TIM_Init+0xe4>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d00b      	beq.n	8002aae <LL_TIM_Init+0x86>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a1d      	ldr	r2, [pc, #116]	; (8002b10 <LL_TIM_Init+0xe8>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d007      	beq.n	8002aae <LL_TIM_Init+0x86>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a1c      	ldr	r2, [pc, #112]	; (8002b14 <LL_TIM_Init+0xec>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d003      	beq.n	8002aae <LL_TIM_Init+0x86>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a1b      	ldr	r2, [pc, #108]	; (8002b18 <LL_TIM_Init+0xf0>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d106      	bne.n	8002abc <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f7ff ff80 	bl	80029ce <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	881b      	ldrh	r3, [r3, #0]
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7ff ff6c 	bl	80029b2 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a08      	ldr	r2, [pc, #32]	; (8002b00 <LL_TIM_Init+0xd8>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d105      	bne.n	8002aee <LL_TIM_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f7ff ff7e 	bl	80029ea <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7ff ff89 	bl	8002a06 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	40010000 	.word	0x40010000
 8002b04:	40000400 	.word	0x40000400
 8002b08:	40000800 	.word	0x40000800
 8002b0c:	40000c00 	.word	0x40000c00
 8002b10:	40014000 	.word	0x40014000
 8002b14:	40014400 	.word	0x40014400
 8002b18:	40014800 	.word	0x40014800

08002b1c <LL_USART_IsEnabled>:
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b30:	bf0c      	ite	eq
 8002b32:	2301      	moveq	r3, #1
 8002b34:	2300      	movne	r3, #0
 8002b36:	b2db      	uxtb	r3, r3
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <LL_USART_SetStopBitsLength>:
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	611a      	str	r2, [r3, #16]
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr

08002b6a <LL_USART_SetHWFlowCtrl>:
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b083      	sub	sp, #12
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
 8002b72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	615a      	str	r2, [r3, #20]
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <LL_USART_SetBaudRate>:
{
 8002b90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b94:	b0c0      	sub	sp, #256	; 0x100
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002b9c:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8002ba0:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8002ba4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bb0:	f040 810c 	bne.w	8002dcc <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002bb4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002bbe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002bc2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002bc6:	4622      	mov	r2, r4
 8002bc8:	462b      	mov	r3, r5
 8002bca:	1891      	adds	r1, r2, r2
 8002bcc:	6639      	str	r1, [r7, #96]	; 0x60
 8002bce:	415b      	adcs	r3, r3
 8002bd0:	667b      	str	r3, [r7, #100]	; 0x64
 8002bd2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002bd6:	4621      	mov	r1, r4
 8002bd8:	eb12 0801 	adds.w	r8, r2, r1
 8002bdc:	4629      	mov	r1, r5
 8002bde:	eb43 0901 	adc.w	r9, r3, r1
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bf2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bf6:	4690      	mov	r8, r2
 8002bf8:	4699      	mov	r9, r3
 8002bfa:	4623      	mov	r3, r4
 8002bfc:	eb18 0303 	adds.w	r3, r8, r3
 8002c00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002c04:	462b      	mov	r3, r5
 8002c06:	eb49 0303 	adc.w	r3, r9, r3
 8002c0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002c0e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002c12:	2200      	movs	r2, #0
 8002c14:	469a      	mov	sl, r3
 8002c16:	4693      	mov	fp, r2
 8002c18:	eb1a 030a 	adds.w	r3, sl, sl
 8002c1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c1e:	eb4b 030b 	adc.w	r3, fp, fp
 8002c22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c24:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002c28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002c2c:	f7fd ffc4 	bl	8000bb8 <__aeabi_uldivmod>
 8002c30:	4602      	mov	r2, r0
 8002c32:	460b      	mov	r3, r1
 8002c34:	4b64      	ldr	r3, [pc, #400]	; (8002dc8 <LL_USART_SetBaudRate+0x238>)
 8002c36:	fba3 2302 	umull	r2, r3, r3, r2
 8002c3a:	095b      	lsrs	r3, r3, #5
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	011b      	lsls	r3, r3, #4
 8002c40:	b29c      	uxth	r4, r3
 8002c42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002c46:	2200      	movs	r2, #0
 8002c48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c4c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002c50:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8002c54:	4642      	mov	r2, r8
 8002c56:	464b      	mov	r3, r9
 8002c58:	1891      	adds	r1, r2, r2
 8002c5a:	6539      	str	r1, [r7, #80]	; 0x50
 8002c5c:	415b      	adcs	r3, r3
 8002c5e:	657b      	str	r3, [r7, #84]	; 0x54
 8002c60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c64:	4641      	mov	r1, r8
 8002c66:	1851      	adds	r1, r2, r1
 8002c68:	64b9      	str	r1, [r7, #72]	; 0x48
 8002c6a:	4649      	mov	r1, r9
 8002c6c:	414b      	adcs	r3, r1
 8002c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c70:	f04f 0200 	mov.w	r2, #0
 8002c74:	f04f 0300 	mov.w	r3, #0
 8002c78:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8002c7c:	4659      	mov	r1, fp
 8002c7e:	00cb      	lsls	r3, r1, #3
 8002c80:	4651      	mov	r1, sl
 8002c82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c86:	4651      	mov	r1, sl
 8002c88:	00ca      	lsls	r2, r1, #3
 8002c8a:	4610      	mov	r0, r2
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4603      	mov	r3, r0
 8002c90:	4642      	mov	r2, r8
 8002c92:	189b      	adds	r3, r3, r2
 8002c94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c98:	464b      	mov	r3, r9
 8002c9a:	460a      	mov	r2, r1
 8002c9c:	eb42 0303 	adc.w	r3, r2, r3
 8002ca0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002ca4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002cae:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8002cb2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	18db      	adds	r3, r3, r3
 8002cba:	643b      	str	r3, [r7, #64]	; 0x40
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	eb42 0303 	adc.w	r3, r2, r3
 8002cc2:	647b      	str	r3, [r7, #68]	; 0x44
 8002cc4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002cc8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8002ccc:	f7fd ff74 	bl	8000bb8 <__aeabi_uldivmod>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	4611      	mov	r1, r2
 8002cd6:	4b3c      	ldr	r3, [pc, #240]	; (8002dc8 <LL_USART_SetBaudRate+0x238>)
 8002cd8:	fba3 2301 	umull	r2, r3, r3, r1
 8002cdc:	095b      	lsrs	r3, r3, #5
 8002cde:	2264      	movs	r2, #100	; 0x64
 8002ce0:	fb02 f303 	mul.w	r3, r2, r3
 8002ce4:	1acb      	subs	r3, r1, r3
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002cec:	4b36      	ldr	r3, [pc, #216]	; (8002dc8 <LL_USART_SetBaudRate+0x238>)
 8002cee:	fba3 2302 	umull	r2, r3, r3, r2
 8002cf2:	095b      	lsrs	r3, r3, #5
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	4423      	add	r3, r4
 8002d02:	b29c      	uxth	r4, r3
 8002d04:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d0e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002d12:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8002d16:	4642      	mov	r2, r8
 8002d18:	464b      	mov	r3, r9
 8002d1a:	1891      	adds	r1, r2, r2
 8002d1c:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d1e:	415b      	adcs	r3, r3
 8002d20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d22:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d26:	4641      	mov	r1, r8
 8002d28:	1851      	adds	r1, r2, r1
 8002d2a:	6339      	str	r1, [r7, #48]	; 0x30
 8002d2c:	4649      	mov	r1, r9
 8002d2e:	414b      	adcs	r3, r1
 8002d30:	637b      	str	r3, [r7, #52]	; 0x34
 8002d32:	f04f 0200 	mov.w	r2, #0
 8002d36:	f04f 0300 	mov.w	r3, #0
 8002d3a:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002d3e:	4659      	mov	r1, fp
 8002d40:	00cb      	lsls	r3, r1, #3
 8002d42:	4651      	mov	r1, sl
 8002d44:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d48:	4651      	mov	r1, sl
 8002d4a:	00ca      	lsls	r2, r1, #3
 8002d4c:	4610      	mov	r0, r2
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4603      	mov	r3, r0
 8002d52:	4642      	mov	r2, r8
 8002d54:	189b      	adds	r3, r3, r2
 8002d56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d5a:	464b      	mov	r3, r9
 8002d5c:	460a      	mov	r2, r1
 8002d5e:	eb42 0303 	adc.w	r3, r2, r3
 8002d62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002d66:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d70:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002d74:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002d78:	460b      	mov	r3, r1
 8002d7a:	18db      	adds	r3, r3, r3
 8002d7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d7e:	4613      	mov	r3, r2
 8002d80:	eb42 0303 	adc.w	r3, r2, r3
 8002d84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d8a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8002d8e:	f7fd ff13 	bl	8000bb8 <__aeabi_uldivmod>
 8002d92:	4602      	mov	r2, r0
 8002d94:	460b      	mov	r3, r1
 8002d96:	4b0c      	ldr	r3, [pc, #48]	; (8002dc8 <LL_USART_SetBaudRate+0x238>)
 8002d98:	fba3 1302 	umull	r1, r3, r3, r2
 8002d9c:	095b      	lsrs	r3, r3, #5
 8002d9e:	2164      	movs	r1, #100	; 0x64
 8002da0:	fb01 f303 	mul.w	r3, r1, r3
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	3332      	adds	r3, #50	; 0x32
 8002daa:	4a07      	ldr	r2, [pc, #28]	; (8002dc8 <LL_USART_SetBaudRate+0x238>)
 8002dac:	fba2 2303 	umull	r2, r3, r2, r3
 8002db0:	095b      	lsrs	r3, r3, #5
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	4423      	add	r3, r4
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dc4:	609a      	str	r2, [r3, #8]
}
 8002dc6:	e108      	b.n	8002fda <LL_USART_SetBaudRate+0x44a>
 8002dc8:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002dcc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002dd6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002dda:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8002dde:	4642      	mov	r2, r8
 8002de0:	464b      	mov	r3, r9
 8002de2:	1891      	adds	r1, r2, r2
 8002de4:	6239      	str	r1, [r7, #32]
 8002de6:	415b      	adcs	r3, r3
 8002de8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002dee:	4641      	mov	r1, r8
 8002df0:	1854      	adds	r4, r2, r1
 8002df2:	4649      	mov	r1, r9
 8002df4:	eb43 0501 	adc.w	r5, r3, r1
 8002df8:	f04f 0200 	mov.w	r2, #0
 8002dfc:	f04f 0300 	mov.w	r3, #0
 8002e00:	00eb      	lsls	r3, r5, #3
 8002e02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e06:	00e2      	lsls	r2, r4, #3
 8002e08:	4614      	mov	r4, r2
 8002e0a:	461d      	mov	r5, r3
 8002e0c:	4643      	mov	r3, r8
 8002e0e:	18e3      	adds	r3, r4, r3
 8002e10:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002e14:	464b      	mov	r3, r9
 8002e16:	eb45 0303 	adc.w	r3, r5, r3
 8002e1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002e1e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002e22:	2200      	movs	r2, #0
 8002e24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e28:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002e2c:	f04f 0200 	mov.w	r2, #0
 8002e30:	f04f 0300 	mov.w	r3, #0
 8002e34:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8002e38:	4629      	mov	r1, r5
 8002e3a:	008b      	lsls	r3, r1, #2
 8002e3c:	4621      	mov	r1, r4
 8002e3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e42:	4621      	mov	r1, r4
 8002e44:	008a      	lsls	r2, r1, #2
 8002e46:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8002e4a:	f7fd feb5 	bl	8000bb8 <__aeabi_uldivmod>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	460b      	mov	r3, r1
 8002e52:	4b65      	ldr	r3, [pc, #404]	; (8002fe8 <LL_USART_SetBaudRate+0x458>)
 8002e54:	fba3 2302 	umull	r2, r3, r3, r2
 8002e58:	095b      	lsrs	r3, r3, #5
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	011b      	lsls	r3, r3, #4
 8002e5e:	b29c      	uxth	r4, r3
 8002e60:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002e64:	2200      	movs	r2, #0
 8002e66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e6e:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8002e72:	4642      	mov	r2, r8
 8002e74:	464b      	mov	r3, r9
 8002e76:	1891      	adds	r1, r2, r2
 8002e78:	61b9      	str	r1, [r7, #24]
 8002e7a:	415b      	adcs	r3, r3
 8002e7c:	61fb      	str	r3, [r7, #28]
 8002e7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e82:	4641      	mov	r1, r8
 8002e84:	1851      	adds	r1, r2, r1
 8002e86:	6139      	str	r1, [r7, #16]
 8002e88:	4649      	mov	r1, r9
 8002e8a:	414b      	adcs	r3, r1
 8002e8c:	617b      	str	r3, [r7, #20]
 8002e8e:	f04f 0200 	mov.w	r2, #0
 8002e92:	f04f 0300 	mov.w	r3, #0
 8002e96:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e9a:	4659      	mov	r1, fp
 8002e9c:	00cb      	lsls	r3, r1, #3
 8002e9e:	4651      	mov	r1, sl
 8002ea0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ea4:	4651      	mov	r1, sl
 8002ea6:	00ca      	lsls	r2, r1, #3
 8002ea8:	4610      	mov	r0, r2
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4603      	mov	r3, r0
 8002eae:	4642      	mov	r2, r8
 8002eb0:	189b      	adds	r3, r3, r2
 8002eb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002eb6:	464b      	mov	r3, r9
 8002eb8:	460a      	mov	r2, r1
 8002eba:	eb42 0303 	adc.w	r3, r2, r3
 8002ebe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002ec2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ecc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002ed0:	f04f 0200 	mov.w	r2, #0
 8002ed4:	f04f 0300 	mov.w	r3, #0
 8002ed8:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8002edc:	4649      	mov	r1, r9
 8002ede:	008b      	lsls	r3, r1, #2
 8002ee0:	4641      	mov	r1, r8
 8002ee2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ee6:	4641      	mov	r1, r8
 8002ee8:	008a      	lsls	r2, r1, #2
 8002eea:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8002eee:	f7fd fe63 	bl	8000bb8 <__aeabi_uldivmod>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	4611      	mov	r1, r2
 8002ef8:	4b3b      	ldr	r3, [pc, #236]	; (8002fe8 <LL_USART_SetBaudRate+0x458>)
 8002efa:	fba3 2301 	umull	r2, r3, r3, r1
 8002efe:	095b      	lsrs	r3, r3, #5
 8002f00:	2264      	movs	r2, #100	; 0x64
 8002f02:	fb02 f303 	mul.w	r3, r2, r3
 8002f06:	1acb      	subs	r3, r1, r3
 8002f08:	011b      	lsls	r3, r3, #4
 8002f0a:	3332      	adds	r3, #50	; 0x32
 8002f0c:	4a36      	ldr	r2, [pc, #216]	; (8002fe8 <LL_USART_SetBaudRate+0x458>)
 8002f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f12:	095b      	lsrs	r3, r3, #5
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	4423      	add	r3, r4
 8002f1e:	b29c      	uxth	r4, r3
 8002f20:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002f24:	2200      	movs	r2, #0
 8002f26:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f28:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002f2a:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002f2e:	4642      	mov	r2, r8
 8002f30:	464b      	mov	r3, r9
 8002f32:	1891      	adds	r1, r2, r2
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	415b      	adcs	r3, r3
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f3e:	4641      	mov	r1, r8
 8002f40:	1851      	adds	r1, r2, r1
 8002f42:	6039      	str	r1, [r7, #0]
 8002f44:	4649      	mov	r1, r9
 8002f46:	414b      	adcs	r3, r1
 8002f48:	607b      	str	r3, [r7, #4]
 8002f4a:	f04f 0200 	mov.w	r2, #0
 8002f4e:	f04f 0300 	mov.w	r3, #0
 8002f52:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f56:	4659      	mov	r1, fp
 8002f58:	00cb      	lsls	r3, r1, #3
 8002f5a:	4651      	mov	r1, sl
 8002f5c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f60:	4651      	mov	r1, sl
 8002f62:	00ca      	lsls	r2, r1, #3
 8002f64:	4610      	mov	r0, r2
 8002f66:	4619      	mov	r1, r3
 8002f68:	4603      	mov	r3, r0
 8002f6a:	4642      	mov	r2, r8
 8002f6c:	189b      	adds	r3, r3, r2
 8002f6e:	673b      	str	r3, [r7, #112]	; 0x70
 8002f70:	464b      	mov	r3, r9
 8002f72:	460a      	mov	r2, r1
 8002f74:	eb42 0303 	adc.w	r3, r2, r3
 8002f78:	677b      	str	r3, [r7, #116]	; 0x74
 8002f7a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002f7e:	2200      	movs	r2, #0
 8002f80:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f82:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f84:	f04f 0200 	mov.w	r2, #0
 8002f88:	f04f 0300 	mov.w	r3, #0
 8002f8c:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8002f90:	4649      	mov	r1, r9
 8002f92:	008b      	lsls	r3, r1, #2
 8002f94:	4641      	mov	r1, r8
 8002f96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f9a:	4641      	mov	r1, r8
 8002f9c:	008a      	lsls	r2, r1, #2
 8002f9e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002fa2:	f7fd fe09 	bl	8000bb8 <__aeabi_uldivmod>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	460b      	mov	r3, r1
 8002faa:	4b0f      	ldr	r3, [pc, #60]	; (8002fe8 <LL_USART_SetBaudRate+0x458>)
 8002fac:	fba3 1302 	umull	r1, r3, r3, r2
 8002fb0:	095b      	lsrs	r3, r3, #5
 8002fb2:	2164      	movs	r1, #100	; 0x64
 8002fb4:	fb01 f303 	mul.w	r3, r1, r3
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	011b      	lsls	r3, r3, #4
 8002fbc:	3332      	adds	r3, #50	; 0x32
 8002fbe:	4a0a      	ldr	r2, [pc, #40]	; (8002fe8 <LL_USART_SetBaudRate+0x458>)
 8002fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc4:	095b      	lsrs	r3, r3, #5
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	f003 030f 	and.w	r3, r3, #15
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	4423      	add	r3, r4
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fd8:	609a      	str	r2, [r3, #8]
}
 8002fda:	bf00      	nop
 8002fdc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fe6:	bf00      	nop
 8002fe8:	51eb851f 	.word	0x51eb851f

08002fec <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b088      	sub	sp, #32
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7ff fd8c 	bl	8002b1c <LL_USART_IsEnabled>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d149      	bne.n	800309e <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003012:	f023 030c 	bic.w	r3, r3, #12
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	6851      	ldr	r1, [r2, #4]
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	68d2      	ldr	r2, [r2, #12]
 800301e:	4311      	orrs	r1, r2
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	6912      	ldr	r2, [r2, #16]
 8003024:	4311      	orrs	r1, r2
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	6992      	ldr	r2, [r2, #24]
 800302a:	430a      	orrs	r2, r1
 800302c:	431a      	orrs	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	4619      	mov	r1, r3
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f7ff fd83 	bl	8002b44 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	4619      	mov	r1, r3
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f7ff fd90 	bl	8002b6a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800304a:	f107 0308 	add.w	r3, r7, #8
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff fb70 	bl	8002734 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a14      	ldr	r2, [pc, #80]	; (80030a8 <LL_USART_Init+0xbc>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d102      	bne.n	8003062 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	61bb      	str	r3, [r7, #24]
 8003060:	e00c      	b.n	800307c <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a11      	ldr	r2, [pc, #68]	; (80030ac <LL_USART_Init+0xc0>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d102      	bne.n	8003070 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	61bb      	str	r3, [r7, #24]
 800306e:	e005      	b.n	800307c <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a0f      	ldr	r2, [pc, #60]	; (80030b0 <LL_USART_Init+0xc4>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d101      	bne.n	800307c <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00d      	beq.n	800309e <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d009      	beq.n	800309e <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 800308a:	2300      	movs	r3, #0
 800308c:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	699a      	ldr	r2, [r3, #24]
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	69b9      	ldr	r1, [r7, #24]
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f7ff fd79 	bl	8002b90 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800309e:	7ffb      	ldrb	r3, [r7, #31]
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3720      	adds	r7, #32
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	40011000 	.word	0x40011000
 80030ac:	40004400 	.word	0x40004400
 80030b0:	40011400 	.word	0x40011400

080030b4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c6:	4a07      	ldr	r2, [pc, #28]	; (80030e4 <LL_InitTick+0x30>)
 80030c8:	3b01      	subs	r3, #1
 80030ca:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80030cc:	4b05      	ldr	r3, [pc, #20]	; (80030e4 <LL_InitTick+0x30>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030d2:	4b04      	ldr	r3, [pc, #16]	; (80030e4 <LL_InitTick+0x30>)
 80030d4:	2205      	movs	r2, #5
 80030d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	e000e010 	.word	0xe000e010

080030e8 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80030f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f7ff ffdd 	bl	80030b4 <LL_InitTick>
}
 80030fa:	bf00      	nop
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
	...

08003104 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800310c:	4a04      	ldr	r2, [pc, #16]	; (8003120 <LL_SetSystemCoreClock+0x1c>)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6013      	str	r3, [r2, #0]
}
 8003112:	bf00      	nop
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	20000000 	.word	0x20000000

08003124 <__Custom_Exception_Set_Message>:

void Custom_Exception_Reset() {
	_message = CUSTOM_EXCEPTION_MSG_NONE;
}

void __Custom_Exception_Set_Message(char *file, int line, char *message) {
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
	_file = file;
 8003130:	4a07      	ldr	r2, [pc, #28]	; (8003150 <__Custom_Exception_Set_Message+0x2c>)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6013      	str	r3, [r2, #0]
	_line = line;
 8003136:	4a07      	ldr	r2, [pc, #28]	; (8003154 <__Custom_Exception_Set_Message+0x30>)
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	6013      	str	r3, [r2, #0]
	_message = message;
 800313c:	4a06      	ldr	r2, [pc, #24]	; (8003158 <__Custom_Exception_Set_Message+0x34>)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6013      	str	r3, [r2, #0]
}
 8003142:	bf00      	nop
 8003144:	3714      	adds	r7, #20
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	200001f4 	.word	0x200001f4
 8003154:	200001f8 	.word	0x200001f8
 8003158:	200001fc 	.word	0x200001fc

0800315c <Custom_FileSystem_Load>:
typedef union {
	FileInfo_t fileInfo;
	uint8_t bytes[FILEINFO_SIZE];
} FileInfo_u;

void Custom_FileSystem_Load() {
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
	Custom_Flash_Read(filesystem, FILESYSTEM_SIZE);
 8003160:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003164:	4803      	ldr	r0, [pc, #12]	; (8003174 <Custom_FileSystem_Load+0x18>)
 8003166:	f000 f851 	bl	800320c <Custom_Flash_Read>
	filesystemLoaded = true;
 800316a:	4b03      	ldr	r3, [pc, #12]	; (8003178 <Custom_FileSystem_Load+0x1c>)
 800316c:	2201      	movs	r2, #1
 800316e:	701a      	strb	r2, [r3, #0]
}
 8003170:	bf00      	nop
 8003172:	bd80      	pop	{r7, pc}
 8003174:	20000200 	.word	0x20000200
 8003178:	20001201 	.word	0x20001201

0800317c <Custom_Flash_Check_Error>:
 * Flash의 Sector 3에 데이터를 쓰거나 읽는 라이브러리.
 * 읽기, 쓰기 단위는 1byte이다.
 * 만약 정상적으로 읽기, 쓰기가 잘 이루어졌다면 CUSTOM_FLASH_SUCCESS를 반환하고, 그렇지 않다면 에러를 나타내는 문자열을 반환한다.
 */

bool Custom_Flash_Check_Error() {
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
	uint32_t fsr = FLASH->SR;
 8003182:	4b1c      	ldr	r3, [pc, #112]	; (80031f4 <Custom_Flash_Check_Error+0x78>)
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	607b      	str	r3, [r7, #4]
	ASSERT_MSG(!(fsr & FLASH_SR_PGAERR), "Programming sequence error.");
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f003 0320 	and.w	r3, r3, #32
 800318e:	2b00      	cmp	r3, #0
 8003190:	d006      	beq.n	80031a0 <Custom_Flash_Check_Error+0x24>
 8003192:	4a19      	ldr	r2, [pc, #100]	; (80031f8 <Custom_Flash_Check_Error+0x7c>)
 8003194:	2113      	movs	r1, #19
 8003196:	4819      	ldr	r0, [pc, #100]	; (80031fc <Custom_Flash_Check_Error+0x80>)
 8003198:	f7ff ffc4 	bl	8003124 <__Custom_Exception_Set_Message>
 800319c:	2300      	movs	r3, #0
 800319e:	e024      	b.n	80031ea <Custom_Flash_Check_Error+0x6e>
	ASSERT_MSG(!(fsr & FLASH_SR_PGPERR), "Programming parallelism error.");
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d006      	beq.n	80031b8 <Custom_Flash_Check_Error+0x3c>
 80031aa:	4a15      	ldr	r2, [pc, #84]	; (8003200 <Custom_Flash_Check_Error+0x84>)
 80031ac:	2114      	movs	r1, #20
 80031ae:	4813      	ldr	r0, [pc, #76]	; (80031fc <Custom_Flash_Check_Error+0x80>)
 80031b0:	f7ff ffb8 	bl	8003124 <__Custom_Exception_Set_Message>
 80031b4:	2300      	movs	r3, #0
 80031b6:	e018      	b.n	80031ea <Custom_Flash_Check_Error+0x6e>
	ASSERT_MSG(!(fsr & FLASH_SR_PGAERR), "Programming alignment error.");
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f003 0320 	and.w	r3, r3, #32
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d006      	beq.n	80031d0 <Custom_Flash_Check_Error+0x54>
 80031c2:	4a10      	ldr	r2, [pc, #64]	; (8003204 <Custom_Flash_Check_Error+0x88>)
 80031c4:	2115      	movs	r1, #21
 80031c6:	480d      	ldr	r0, [pc, #52]	; (80031fc <Custom_Flash_Check_Error+0x80>)
 80031c8:	f7ff ffac 	bl	8003124 <__Custom_Exception_Set_Message>
 80031cc:	2300      	movs	r3, #0
 80031ce:	e00c      	b.n	80031ea <Custom_Flash_Check_Error+0x6e>
	ASSERT_MSG(!(fsr & FLASH_SR_WRPERR), "Write protection error.");
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f003 0310 	and.w	r3, r3, #16
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d006      	beq.n	80031e8 <Custom_Flash_Check_Error+0x6c>
 80031da:	4a0b      	ldr	r2, [pc, #44]	; (8003208 <Custom_Flash_Check_Error+0x8c>)
 80031dc:	2116      	movs	r1, #22
 80031de:	4807      	ldr	r0, [pc, #28]	; (80031fc <Custom_Flash_Check_Error+0x80>)
 80031e0:	f7ff ffa0 	bl	8003124 <__Custom_Exception_Set_Message>
 80031e4:	2300      	movs	r3, #0
 80031e6:	e000      	b.n	80031ea <Custom_Flash_Check_Error+0x6e>

	return true;
 80031e8:	2301      	movs	r3, #1
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	40023c00 	.word	0x40023c00
 80031f8:	08006e58 	.word	0x08006e58
 80031fc:	08006e74 	.word	0x08006e74
 8003200:	08006e9c 	.word	0x08006e9c
 8003204:	08006ebc 	.word	0x08006ebc
 8003208:	08006edc 	.word	0x08006edc

0800320c <Custom_Flash_Read>:

bool Custom_Flash_Read(uint8_t *data, uint32_t length)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
	ASSERT_MSG(length < CUSTOM_FLASH_SIZE, "Data is too large.");
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800321c:	d306      	bcc.n	800322c <Custom_Flash_Read+0x20>
 800321e:	4a12      	ldr	r2, [pc, #72]	; (8003268 <Custom_Flash_Read+0x5c>)
 8003220:	211d      	movs	r1, #29
 8003222:	4812      	ldr	r0, [pc, #72]	; (800326c <Custom_Flash_Read+0x60>)
 8003224:	f7ff ff7e 	bl	8003124 <__Custom_Exception_Set_Message>
 8003228:	2300      	movs	r3, #0
 800322a:	e019      	b.n	8003260 <Custom_Flash_Read+0x54>
	for (int i = 0; i < length; i++) {
 800322c:	2300      	movs	r3, #0
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	e00f      	b.n	8003252 <Custom_Flash_Read+0x46>
		uint32_t address = CUSTOM_FLASH_BASE + i;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8003238:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 800323c:	60bb      	str	r3, [r7, #8]
		data[i] = *(__IO uint8_t*) (address);
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6879      	ldr	r1, [r7, #4]
 8003244:	440b      	add	r3, r1
 8003246:	7812      	ldrb	r2, [r2, #0]
 8003248:	b2d2      	uxtb	r2, r2
 800324a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < length; i++) {
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	3301      	adds	r3, #1
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	429a      	cmp	r2, r3
 8003258:	d8eb      	bhi.n	8003232 <Custom_Flash_Read+0x26>
	}
	return Custom_Flash_Check_Error();
 800325a:	f7ff ff8f 	bl	800317c <Custom_Flash_Check_Error>
 800325e:	4603      	mov	r3, r0
}
 8003260:	4618      	mov	r0, r3
 8003262:	3710      	adds	r7, #16
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	08006ef4 	.word	0x08006ef4
 800326c:	08006e74 	.word	0x08006e74

08003270 <LL_SPI_Enable>:
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	601a      	str	r2, [r3, #0]
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <LL_SPI_SetTransferDirection>:
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f423 4244 	bic.w	r2, r3, #50176	; 0xc400
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	431a      	orrs	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	601a      	str	r2, [r3, #0]
}
 80032aa:	bf00      	nop
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr

080032b6 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 80032b6:	b480      	push	{r7}
 80032b8:	b083      	sub	sp, #12
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d101      	bne.n	80032ce <LL_SPI_IsActiveFlag_TXE+0x18>
 80032ca:	2301      	movs	r3, #1
 80032cc:	e000      	b.n	80032d0 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ec:	2b80      	cmp	r3, #128	; 0x80
 80032ee:	d101      	bne.n	80032f4 <LL_SPI_IsActiveFlag_BSY+0x18>
 80032f0:	2301      	movs	r3, #1
 80032f2:	e000      	b.n	80032f6 <LL_SPI_IsActiveFlag_BSY+0x1a>
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8003302:	b480      	push	{r7}
 8003304:	b085      	sub	sp, #20
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
 800330a:	460b      	mov	r3, r1
 800330c:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	330c      	adds	r3, #12
 8003312:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	78fa      	ldrb	r2, [r7, #3]
 8003318:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 800331a:	bf00      	nop
 800331c:	3714      	adds	r7, #20
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr

08003326 <Custom_GPIO_Set>:
 * 아래 Custom_GPIO_Set 함수 등을 .c 파일에 구현하지 않고 헤더 파일에 static으로 구현하였다.
 * 이는 C언어에서 inline function이 일반 함수와 다르게 취급되기 때문으로, 자세한 이유는 본인도 잘 모르므로 생략한다.
 */

static inline void Custom_GPIO_Set(GPIO_TypeDef *GPIOx, uint32_t PinMask,
		uint32_t value) {
 8003326:	b480      	push	{r7}
 8003328:	b085      	sub	sp, #20
 800332a:	af00      	add	r7, sp, #0
 800332c:	60f8      	str	r0, [r7, #12]
 800332e:	60b9      	str	r1, [r7, #8]
 8003330:	607a      	str	r2, [r7, #4]
	 * 이 분기 예측이 틀릴 경우 로드해둔 명령어는 전혀 쓸 수 없게 되므로 CPU에서는 수 클럭 이상을 낭비한다.
	 * Custom_GPIO_Set 함수와 같은 경우 분기 예측이 틀릴 가능성이 매우 높은 함수다.
	 * 따라서 분기 예측을 할 수 있도록 if문 없이 비트 연산만을 사용하여 GPIO 설정을 구현한 것이다.
	 */

	GPIOx->ODR = (GPIOx->ODR & ~PinMask)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	695a      	ldr	r2, [r3, #20]
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	43db      	mvns	r3, r3
 800333a:	401a      	ands	r2, r3
			| (PinMask & (((!!value) << 31) >> 31));
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d002      	beq.n	8003348 <Custom_GPIO_Set+0x22>
 8003342:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003346:	e000      	b.n	800334a <Custom_GPIO_Set+0x24>
 8003348:	2100      	movs	r1, #0
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	400b      	ands	r3, r1
 800334e:	431a      	orrs	r2, r3
	GPIOx->ODR = (GPIOx->ODR & ~PinMask)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	615a      	str	r2, [r3, #20]
		LL_GPIO_SetOutputPin(GPIOx, PinMask);
	}else{
		LL_GPIO_ResetOutputPin(GPIOx, PinMask);
	}
#endif
}
 8003354:	bf00      	nop
 8003356:	3714      	adds	r7, #20
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <Custom_OLED_SPI_Tramsnit_Blocking>:
 *        매개변수로 전달 받은 데이터의 전송이 완료될 때까지 기다린다. 즉, 동기적(synchronous)으로 동작한다.
 *
 * @param cmd 보낼 명령어의 배열
 * @param length 보낼 명령어들의 총 길이
 */
static inline void Custom_OLED_SPI_Tramsnit_Blocking(const uint8_t data) {
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	4603      	mov	r3, r0
 8003368:	71fb      	strb	r3, [r7, #7]
	while (!LL_SPI_IsActiveFlag_TXE(OLED_SPI));
 800336a:	bf00      	nop
 800336c:	480b      	ldr	r0, [pc, #44]	; (800339c <Custom_OLED_SPI_Tramsnit_Blocking+0x3c>)
 800336e:	f7ff ffa2 	bl	80032b6 <LL_SPI_IsActiveFlag_TXE>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0f9      	beq.n	800336c <Custom_OLED_SPI_Tramsnit_Blocking+0xc>
	LL_SPI_TransmitData8(OLED_SPI, data);
 8003378:	79fb      	ldrb	r3, [r7, #7]
 800337a:	4619      	mov	r1, r3
 800337c:	4807      	ldr	r0, [pc, #28]	; (800339c <Custom_OLED_SPI_Tramsnit_Blocking+0x3c>)
 800337e:	f7ff ffc0 	bl	8003302 <LL_SPI_TransmitData8>
	while (LL_SPI_IsActiveFlag_BSY(OLED_SPI));
 8003382:	bf00      	nop
 8003384:	4805      	ldr	r0, [pc, #20]	; (800339c <Custom_OLED_SPI_Tramsnit_Blocking+0x3c>)
 8003386:	f7ff ffa9 	bl	80032dc <LL_SPI_IsActiveFlag_BSY>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1f9      	bne.n	8003384 <Custom_OLED_SPI_Tramsnit_Blocking+0x24>
}
 8003390:	bf00      	nop
 8003392:	bf00      	nop
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	40003800 	.word	0x40003800

080033a0 <Custom_OLED_Write_Command>:
 * @brief OLED에 명령을 보내는 함수.
 * 
 * @param cmd 보낼 명령어의 배열
 * @param length 보낼 명령어들의 총 길이
 */
static inline void Custom_OLED_Write_Command(const uint8_t *cmd, size_t length) {
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
	Custom_GPIO_Set(OLED_DC_GPIO_Port, OLED_DC_Pin, 0); // 0 is command mode
 80033aa:	2200      	movs	r2, #0
 80033ac:	2110      	movs	r1, #16
 80033ae:	4811      	ldr	r0, [pc, #68]	; (80033f4 <Custom_OLED_Write_Command+0x54>)
 80033b0:	f7ff ffb9 	bl	8003326 <Custom_GPIO_Set>
	Custom_GPIO_Set(OLED_CS_GPIO_Port, OLED_CS_Pin, 0);
 80033b4:	2200      	movs	r2, #0
 80033b6:	2104      	movs	r1, #4
 80033b8:	480f      	ldr	r0, [pc, #60]	; (80033f8 <Custom_OLED_Write_Command+0x58>)
 80033ba:	f7ff ffb4 	bl	8003326 <Custom_GPIO_Set>

	for (int i = 0; i < length; i++) {
 80033be:	2300      	movs	r3, #0
 80033c0:	60fb      	str	r3, [r7, #12]
 80033c2:	e009      	b.n	80033d8 <Custom_OLED_Write_Command+0x38>
		Custom_OLED_SPI_Tramsnit_Blocking(cmd[i]);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	4413      	add	r3, r2
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff ffc7 	bl	8003360 <Custom_OLED_SPI_Tramsnit_Blocking>
	for (int i = 0; i < length; i++) {
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	3301      	adds	r3, #1
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d8f1      	bhi.n	80033c4 <Custom_OLED_Write_Command+0x24>
	}

	Custom_GPIO_Set(OLED_CS_GPIO_Port, OLED_CS_Pin, 1);
 80033e0:	2201      	movs	r2, #1
 80033e2:	2104      	movs	r1, #4
 80033e4:	4804      	ldr	r0, [pc, #16]	; (80033f8 <Custom_OLED_Write_Command+0x58>)
 80033e6:	f7ff ff9e 	bl	8003326 <Custom_GPIO_Set>
}
 80033ea:	bf00      	nop
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	40020000 	.word	0x40020000
 80033f8:	40020400 	.word	0x40020400

080033fc <Custom_OLED_Write_Data>:
 *        매개변수로 전달 받은 데이터를 모두 보낼 때까지 동기적(synchronous)으로 동작한다.
 *
 * @param data 16비트 형태의 색상값들의 배열
 * @param length 보낼 값들의 갯수 (바이트 수가 아님을 주의)
 */
static inline void Custom_OLED_Write_Data(const uint16_t *data, size_t length){
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
	Custom_GPIO_Set(OLED_DC_GPIO_Port, OLED_DC_Pin, 1); // 1 is data mode
 8003406:	2201      	movs	r2, #1
 8003408:	2110      	movs	r1, #16
 800340a:	4817      	ldr	r0, [pc, #92]	; (8003468 <Custom_OLED_Write_Data+0x6c>)
 800340c:	f7ff ff8b 	bl	8003326 <Custom_GPIO_Set>
	Custom_GPIO_Set(OLED_CS_GPIO_Port, OLED_CS_Pin, 0);
 8003410:	2200      	movs	r2, #0
 8003412:	2104      	movs	r1, #4
 8003414:	4815      	ldr	r0, [pc, #84]	; (800346c <Custom_OLED_Write_Data+0x70>)
 8003416:	f7ff ff86 	bl	8003326 <Custom_GPIO_Set>
	 * 그러면, SPI 통신으로 데이터를 8비트씩 보낼 때 0번지 부터 값을 보낼 것이므로 0x1F을 보내고 0x00을 그 다음으로 보낼 것이다.
	 * SSD1331은 C1 C0 B5 B4 B3 데이터가 1인 것으로 인식할 것이며 이러면 안되므로,
	 * 상위 8비트 0x00을 보내고 나서 하위 8비트 0x1F 보내는 식으로 진행해야 한다.
	 * 다른 색상 정보도 마찬가지로 데이터를 전송할 때 상위 8비트를 먼저 보내야 한다.
	 */
	for (int i = 0; i < length; i++) {
 800341a:	2300      	movs	r3, #0
 800341c:	60fb      	str	r3, [r7, #12]
 800341e:	e016      	b.n	800344e <Custom_OLED_Write_Data+0x52>
		Custom_OLED_SPI_Tramsnit_Blocking(data[i] >> 8);   // 상위 8비트 전송
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	4413      	add	r3, r2
 8003428:	881b      	ldrh	r3, [r3, #0]
 800342a:	0a1b      	lsrs	r3, r3, #8
 800342c:	b29b      	uxth	r3, r3
 800342e:	b2db      	uxtb	r3, r3
 8003430:	4618      	mov	r0, r3
 8003432:	f7ff ff95 	bl	8003360 <Custom_OLED_SPI_Tramsnit_Blocking>
		Custom_OLED_SPI_Tramsnit_Blocking(data[i] & 0xFF); // 하위 8비트 전송
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	4413      	add	r3, r2
 800343e:	881b      	ldrh	r3, [r3, #0]
 8003440:	b2db      	uxtb	r3, r3
 8003442:	4618      	mov	r0, r3
 8003444:	f7ff ff8c 	bl	8003360 <Custom_OLED_SPI_Tramsnit_Blocking>
	for (int i = 0; i < length; i++) {
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	3301      	adds	r3, #1
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	429a      	cmp	r2, r3
 8003454:	d8e4      	bhi.n	8003420 <Custom_OLED_Write_Data+0x24>
	}

	Custom_GPIO_Set(OLED_CS_GPIO_Port, OLED_CS_Pin, 1);
 8003456:	2201      	movs	r2, #1
 8003458:	2104      	movs	r1, #4
 800345a:	4804      	ldr	r0, [pc, #16]	; (800346c <Custom_OLED_Write_Data+0x70>)
 800345c:	f7ff ff63 	bl	8003326 <Custom_GPIO_Set>
}
 8003460:	bf00      	nop
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	40020000 	.word	0x40020000
 800346c:	40020400 	.word	0x40020400

08003470 <Custom_OLED_Set_Window>:
 * @param x1 GDDRAM 시작 열
 * @param y1 GDDRAM 시작 행
 * @param x2 GDDRAM 종료 열
 * @param y2 GDDRAM 종료 행
 */
static inline void Custom_OLED_Set_Window(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
 8003470:	b590      	push	{r4, r7, lr}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	4604      	mov	r4, r0
 8003478:	4608      	mov	r0, r1
 800347a:	4611      	mov	r1, r2
 800347c:	461a      	mov	r2, r3
 800347e:	4623      	mov	r3, r4
 8003480:	71fb      	strb	r3, [r7, #7]
 8003482:	4603      	mov	r3, r0
 8003484:	71bb      	strb	r3, [r7, #6]
 8003486:	460b      	mov	r3, r1
 8003488:	717b      	strb	r3, [r7, #5]
 800348a:	4613      	mov	r3, r2
 800348c:	713b      	strb	r3, [r7, #4]
	const uint8_t cmd[] = {
 800348e:	2315      	movs	r3, #21
 8003490:	723b      	strb	r3, [r7, #8]
 8003492:	79fb      	ldrb	r3, [r7, #7]
 8003494:	727b      	strb	r3, [r7, #9]
 8003496:	797b      	ldrb	r3, [r7, #5]
 8003498:	72bb      	strb	r3, [r7, #10]
 800349a:	2375      	movs	r3, #117	; 0x75
 800349c:	72fb      	strb	r3, [r7, #11]
 800349e:	79bb      	ldrb	r3, [r7, #6]
 80034a0:	733b      	strb	r3, [r7, #12]
 80034a2:	793b      	ldrb	r3, [r7, #4]
 80034a4:	737b      	strb	r3, [r7, #13]
		x1, x2,
		OLED_CMD_SETROW,
		y1, y2,
	};

	Custom_OLED_Write_Command(cmd, sizeof(cmd));
 80034a6:	f107 0308 	add.w	r3, r7, #8
 80034aa:	2106      	movs	r1, #6
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff ff77 	bl	80033a0 <Custom_OLED_Write_Command>
}
 80034b2:	bf00      	nop
 80034b4:	3714      	adds	r7, #20
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd90      	pop	{r4, r7, pc}

080034ba <Custom_OLED_Clear>:

void Custom_OLED_Clear() {
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b082      	sub	sp, #8
 80034be:	af00      	add	r7, sp, #0
	uint16_t data = 0x0000;
 80034c0:	2300      	movs	r3, #0
 80034c2:	807b      	strh	r3, [r7, #2]

	Custom_OLED_Set_Window(0, 0, OLED_WIDTH - 1, OLED_HEIGHT - 1);
 80034c4:	233f      	movs	r3, #63	; 0x3f
 80034c6:	225f      	movs	r2, #95	; 0x5f
 80034c8:	2100      	movs	r1, #0
 80034ca:	2000      	movs	r0, #0
 80034cc:	f7ff ffd0 	bl	8003470 <Custom_OLED_Set_Window>

    for (int i = 0; i < OLED_WIDTH * OLED_HEIGHT; i++) {
 80034d0:	2300      	movs	r3, #0
 80034d2:	607b      	str	r3, [r7, #4]
 80034d4:	e007      	b.n	80034e6 <Custom_OLED_Clear+0x2c>
        Custom_OLED_Write_Data(&data, 1);
 80034d6:	1cbb      	adds	r3, r7, #2
 80034d8:	2101      	movs	r1, #1
 80034da:	4618      	mov	r0, r3
 80034dc:	f7ff ff8e 	bl	80033fc <Custom_OLED_Write_Data>
    for (int i = 0; i < OLED_WIDTH * OLED_HEIGHT; i++) {
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3301      	adds	r3, #1
 80034e4:	607b      	str	r3, [r7, #4]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80034ec:	dbf3      	blt.n	80034d6 <Custom_OLED_Clear+0x1c>
    }
}
 80034ee:	bf00      	nop
 80034f0:	bf00      	nop
 80034f2:	3708      	adds	r7, #8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <Custom_OLED_Init>:

void Custom_OLED_Init() {
 80034f8:	b5b0      	push	{r4, r5, r7, lr}
 80034fa:	b08a      	sub	sp, #40	; 0x28
 80034fc:	af00      	add	r7, sp, #0
	// SPI 활성화
	LL_SPI_SetTransferDirection(OLED_SPI, LL_SPI_HALF_DUPLEX_TX);
 80034fe:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8003502:	480e      	ldr	r0, [pc, #56]	; (800353c <Custom_OLED_Init+0x44>)
 8003504:	f7ff fec4 	bl	8003290 <LL_SPI_SetTransferDirection>
	LL_SPI_Enable(OLED_SPI);
 8003508:	480c      	ldr	r0, [pc, #48]	; (800353c <Custom_OLED_Init+0x44>)
 800350a:	f7ff feb1 	bl	8003270 <LL_SPI_Enable>
	/*
	 * 우리가 사용하는 SSD1331 OLED 모듈의 초기화 명령어들이다.
	 * 아래의 사이트에서 해당 명령어를 참조했으며, SSD1331 데이터시트 8장과 9절을 참조하면 더욱 자세한 내용을 알 수 있다.
	 * https://github.com/adafruit/Adafruit-SSD1331-OLED-Driver-Library-for-Arduino
	 */
	const uint8_t init_cmd[] = {
 800350e:	4b0c      	ldr	r3, [pc, #48]	; (8003540 <Custom_OLED_Init+0x48>)
 8003510:	463c      	mov	r4, r7
 8003512:	461d      	mov	r5, r3
 8003514:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003516:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003518:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800351a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800351c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003520:	6020      	str	r0, [r4, #0]
 8003522:	3404      	adds	r4, #4
 8003524:	7021      	strb	r1, [r4, #0]
		OLED_CMD_CONTRASTB, 0x50,
		OLED_CMD_CONTRASTC, 0x7D,
		OLED_CMD_DISPLAYON
	};

	Custom_OLED_Write_Command(init_cmd, sizeof(init_cmd));
 8003526:	463b      	mov	r3, r7
 8003528:	2125      	movs	r1, #37	; 0x25
 800352a:	4618      	mov	r0, r3
 800352c:	f7ff ff38 	bl	80033a0 <Custom_OLED_Write_Command>
	Custom_OLED_Clear();
 8003530:	f7ff ffc3 	bl	80034ba <Custom_OLED_Clear>
}
 8003534:	bf00      	nop
 8003536:	3728      	adds	r7, #40	; 0x28
 8003538:	46bd      	mov	sp, r7
 800353a:	bdb0      	pop	{r4, r5, r7, pc}
 800353c:	40003800 	.word	0x40003800
 8003540:	08006f3c 	.word	0x08006f3c

08003544 <Custom_OLED_Putchar>:

int Custom_OLED_Putchar(char c, uint16_t color, uint8_t x, uint8_t y, uint8_t size) {
 8003544:	b590      	push	{r4, r7, lr}
 8003546:	b089      	sub	sp, #36	; 0x24
 8003548:	af00      	add	r7, sp, #0
 800354a:	4604      	mov	r4, r0
 800354c:	4608      	mov	r0, r1
 800354e:	4611      	mov	r1, r2
 8003550:	461a      	mov	r2, r3
 8003552:	4623      	mov	r3, r4
 8003554:	71fb      	strb	r3, [r7, #7]
 8003556:	4603      	mov	r3, r0
 8003558:	80bb      	strh	r3, [r7, #4]
 800355a:	460b      	mov	r3, r1
 800355c:	71bb      	strb	r3, [r7, #6]
 800355e:	4613      	mov	r3, r2
 8003560:	70fb      	strb	r3, [r7, #3]
	uint8_t xe = x + FONT_WIDTH * size - 1;
 8003562:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003566:	461a      	mov	r2, r3
 8003568:	0092      	lsls	r2, r2, #2
 800356a:	4413      	add	r3, r2
 800356c:	b2da      	uxtb	r2, r3
 800356e:	79bb      	ldrb	r3, [r7, #6]
 8003570:	4413      	add	r3, r2
 8003572:	b2db      	uxtb	r3, r3
 8003574:	3b01      	subs	r3, #1
 8003576:	73fb      	strb	r3, [r7, #15]
	uint8_t ye = y + FONT_HEIGHT * size - 1;
 8003578:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	b2da      	uxtb	r2, r3
 8003580:	78fb      	ldrb	r3, [r7, #3]
 8003582:	4413      	add	r3, r2
 8003584:	b2db      	uxtb	r3, r3
 8003586:	3b01      	subs	r3, #1
 8003588:	73bb      	strb	r3, [r7, #14]

	if (xe >= OLED_WIDTH || ye >= OLED_HEIGHT) {
 800358a:	7bfb      	ldrb	r3, [r7, #15]
 800358c:	2b5f      	cmp	r3, #95	; 0x5f
 800358e:	d802      	bhi.n	8003596 <Custom_OLED_Putchar+0x52>
 8003590:	7bbb      	ldrb	r3, [r7, #14]
 8003592:	2b3f      	cmp	r3, #63	; 0x3f
 8003594:	d902      	bls.n	800359c <Custom_OLED_Putchar+0x58>
		// OLED 화면을 넘어서면 유효하지 않은 명령이다.
		return -1;
 8003596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800359a:	e06a      	b.n	8003672 <Custom_OLED_Putchar+0x12e>
	}
	// OLED GDDRAM에 데이터를 넣을 시작 위치(x, y)와 종료 위치(xe, ye)를 설정한다.
	Custom_OLED_Set_Window(x, y, xe, ye);
 800359c:	7bbb      	ldrb	r3, [r7, #14]
 800359e:	7bfa      	ldrb	r2, [r7, #15]
 80035a0:	78f9      	ldrb	r1, [r7, #3]
 80035a2:	79b8      	ldrb	r0, [r7, #6]
 80035a4:	f7ff ff64 	bl	8003470 <Custom_OLED_Set_Window>

	const char *font = FONT[(int)c];
 80035a8:	79fa      	ldrb	r2, [r7, #7]
 80035aa:	4613      	mov	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4413      	add	r3, r2
 80035b0:	4a32      	ldr	r2, [pc, #200]	; (800367c <Custom_OLED_Putchar+0x138>)
 80035b2:	4413      	add	r3, r2
 80035b4:	60bb      	str	r3, [r7, #8]
	static uint16_t data[FONT_WIDTH * FONT_HEIGHT * 4];

	for (int i = 0; i < FONT_WIDTH; i++) {
 80035b6:	2300      	movs	r3, #0
 80035b8:	61fb      	str	r3, [r7, #28]
 80035ba:	e048      	b.n	800364e <Custom_OLED_Putchar+0x10a>
		for (int j = 0; j < FONT_HEIGHT; j++) {
 80035bc:	2300      	movs	r3, #0
 80035be:	61bb      	str	r3, [r7, #24]
 80035c0:	e03f      	b.n	8003642 <Custom_OLED_Putchar+0xfe>
			for(int x = 0; x < size; x++){
 80035c2:	2300      	movs	r3, #0
 80035c4:	617b      	str	r3, [r7, #20]
 80035c6:	e034      	b.n	8003632 <Custom_OLED_Putchar+0xee>
				for(int y = 0; y < size; y++){
 80035c8:	2300      	movs	r3, #0
 80035ca:	613b      	str	r3, [r7, #16]
 80035cc:	e029      	b.n	8003622 <Custom_OLED_Putchar+0xde>
			    	data[FONT_HEIGHT * size * (i*size+ x) + j*size + y] = font[i] & (1 << j) ? color : 0x0000;
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	68ba      	ldr	r2, [r7, #8]
 80035d2:	4413      	add	r3, r2
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	461a      	mov	r2, r3
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	fa42 f303 	asr.w	r3, r2, r3
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <Custom_OLED_Putchar+0xa6>
 80035e6:	88b8      	ldrh	r0, [r7, #4]
 80035e8:	e000      	b.n	80035ec <Custom_OLED_Putchar+0xa8>
 80035ea:	2000      	movs	r0, #0
 80035ec:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80035f0:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80035f4:	69f9      	ldr	r1, [r7, #28]
 80035f6:	fb02 f101 	mul.w	r1, r2, r1
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	440a      	add	r2, r1
 80035fe:	fb02 f303 	mul.w	r3, r2, r3
 8003602:	00da      	lsls	r2, r3, #3
 8003604:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003608:	69b9      	ldr	r1, [r7, #24]
 800360a:	fb01 f303 	mul.w	r3, r1, r3
 800360e:	441a      	add	r2, r3
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	4413      	add	r3, r2
 8003614:	4a1a      	ldr	r2, [pc, #104]	; (8003680 <Custom_OLED_Putchar+0x13c>)
 8003616:	4601      	mov	r1, r0
 8003618:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for(int y = 0; y < size; y++){
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	3301      	adds	r3, #1
 8003620:	613b      	str	r3, [r7, #16]
 8003622:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	429a      	cmp	r2, r3
 800362a:	dbd0      	blt.n	80035ce <Custom_OLED_Putchar+0x8a>
			for(int x = 0; x < size; x++){
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	3301      	adds	r3, #1
 8003630:	617b      	str	r3, [r7, #20]
 8003632:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	429a      	cmp	r2, r3
 800363a:	dbc5      	blt.n	80035c8 <Custom_OLED_Putchar+0x84>
		for (int j = 0; j < FONT_HEIGHT; j++) {
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	3301      	adds	r3, #1
 8003640:	61bb      	str	r3, [r7, #24]
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	2b07      	cmp	r3, #7
 8003646:	ddbc      	ble.n	80035c2 <Custom_OLED_Putchar+0x7e>
	for (int i = 0; i < FONT_WIDTH; i++) {
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	3301      	adds	r3, #1
 800364c:	61fb      	str	r3, [r7, #28]
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	2b04      	cmp	r3, #4
 8003652:	ddb3      	ble.n	80035bc <Custom_OLED_Putchar+0x78>
			    }
			}
		}
	}

	Custom_OLED_Write_Data(data, sizeof(data) / sizeof(uint16_t) / 4 * size * size);
 8003654:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003658:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800365c:	fb03 f202 	mul.w	r2, r3, r2
 8003660:	4613      	mov	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	4619      	mov	r1, r3
 800366a:	4805      	ldr	r0, [pc, #20]	; (8003680 <Custom_OLED_Putchar+0x13c>)
 800366c:	f7ff fec6 	bl	80033fc <Custom_OLED_Write_Data>
	return 0;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3724      	adds	r7, #36	; 0x24
 8003676:	46bd      	mov	sp, r7
 8003678:	bd90      	pop	{r4, r7, pc}
 800367a:	bf00      	nop
 800367c:	08007008 	.word	0x08007008
 8003680:	20001204 	.word	0x20001204

08003684 <Custom_OLED_Printf>:

void Custom_OLED_Printf(const char *format, ...) {
 8003684:	b40f      	push	{r0, r1, r2, r3}
 8003686:	b590      	push	{r4, r7, lr}
 8003688:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 800368c:	af02      	add	r7, sp, #8
	char buffer[OLED_BUFFER_SIZE];
	uint8_t posX = 0;
 800368e:	2300      	movs	r3, #0
 8003690:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
	uint8_t posY = 0;
 8003694:	2300      	movs	r3, #0
 8003696:	f887 321e 	strb.w	r3, [r7, #542]	; 0x21e
	
	/*
	 * printf 함수처럼 가변 인자를 받고 vsprintf 함수를 통해 buffer에 서식 문자가 적용된 문자열을 저장한다.
	 */
	va_list args;
	va_start(args, format);
 800369a:	f507 720d 	add.w	r2, r7, #564	; 0x234
 800369e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80036a2:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80036a6:	601a      	str	r2, [r3, #0]
	vsprintf(buffer, format, args);
 80036a8:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80036ac:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80036b0:	f107 0008 	add.w	r0, r7, #8
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	f8d7 1230 	ldr.w	r1, [r7, #560]	; 0x230
 80036ba:	f001 fa77 	bl	8004bac <vsiprintf>
	va_end(args);

	/*
	 * Pierre de Starlit(P. J. Kim)의 OLED 서식 문자 표준을 따라 처리한다.
	 */
	int cursor = 0;
 80036be:	2300      	movs	r3, #0
 80036c0:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint16_t color = OLED_COLOR_WHITE;
 80036c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036c8:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
	uint8_t size = 1;
 80036cc:	2301      	movs	r3, #1
 80036ce:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215

	while (buffer[cursor]) {
 80036d2:	e226      	b.n	8003b22 <Custom_OLED_Printf+0x49e>

		// 서식 문자의 시작을 나타내는 문자
		if (buffer[cursor] == '/') {
 80036d4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80036d8:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 80036dc:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80036e0:	4413      	add	r3, r2
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	2b2f      	cmp	r3, #47	; 0x2f
 80036e6:	f040 81f7 	bne.w	8003ad8 <Custom_OLED_Printf+0x454>
			char nextChar = buffer[cursor + 1];
 80036ea:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80036ee:	3301      	adds	r3, #1
 80036f0:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80036f4:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 80036f8:	5cd3      	ldrb	r3, [r2, r3]
 80036fa:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b

			if (nextChar == '/') {
 80036fe:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8003702:	2b2f      	cmp	r3, #47	; 0x2f
 8003704:	d105      	bne.n	8003712 <Custom_OLED_Printf+0x8e>
				cursor += 1;
 8003706:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800370a:	3301      	adds	r3, #1
 800370c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8003710:	e1e2      	b.n	8003ad8 <Custom_OLED_Printf+0x454>

			} else {
				switch (nextChar) {
 8003712:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8003716:	3b23      	subs	r3, #35	; 0x23
 8003718:	2b56      	cmp	r3, #86	; 0x56
 800371a:	f200 81d7 	bhi.w	8003acc <Custom_OLED_Printf+0x448>
 800371e:	a201      	add	r2, pc, #4	; (adr r2, 8003724 <Custom_OLED_Printf+0xa0>)
 8003720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003724:	0800393d 	.word	0x0800393d
 8003728:	08003acd 	.word	0x08003acd
 800372c:	08003acd 	.word	0x08003acd
 8003730:	08003acd 	.word	0x08003acd
 8003734:	08003acd 	.word	0x08003acd
 8003738:	08003acd 	.word	0x08003acd
 800373c:	08003acd 	.word	0x08003acd
 8003740:	08003acd 	.word	0x08003acd
 8003744:	08003acd 	.word	0x08003acd
 8003748:	08003acd 	.word	0x08003acd
 800374c:	08003acd 	.word	0x08003acd
 8003750:	08003acd 	.word	0x08003acd
 8003754:	08003acd 	.word	0x08003acd
 8003758:	08003881 	.word	0x08003881
 800375c:	08003881 	.word	0x08003881
 8003760:	08003881 	.word	0x08003881
 8003764:	08003881 	.word	0x08003881
 8003768:	08003881 	.word	0x08003881
 800376c:	08003881 	.word	0x08003881
 8003770:	08003881 	.word	0x08003881
 8003774:	08003acd 	.word	0x08003acd
 8003778:	08003acd 	.word	0x08003acd
 800377c:	08003acd 	.word	0x08003acd
 8003780:	08003acd 	.word	0x08003acd
 8003784:	08003acd 	.word	0x08003acd
 8003788:	08003acd 	.word	0x08003acd
 800378c:	08003acd 	.word	0x08003acd
 8003790:	08003acd 	.word	0x08003acd
 8003794:	08003acd 	.word	0x08003acd
 8003798:	08003acd 	.word	0x08003acd
 800379c:	0800392d 	.word	0x0800392d
 80037a0:	08003acd 	.word	0x08003acd
 80037a4:	08003acd 	.word	0x08003acd
 80037a8:	08003acd 	.word	0x08003acd
 80037ac:	08003acd 	.word	0x08003acd
 80037b0:	08003acd 	.word	0x08003acd
 80037b4:	08003acd 	.word	0x08003acd
 80037b8:	08003acd 	.word	0x08003acd
 80037bc:	08003acd 	.word	0x08003acd
 80037c0:	08003acd 	.word	0x08003acd
 80037c4:	0800391b 	.word	0x0800391b
 80037c8:	08003acd 	.word	0x08003acd
 80037cc:	08003acd 	.word	0x08003acd
 80037d0:	08003acd 	.word	0x08003acd
 80037d4:	08003acd 	.word	0x08003acd
 80037d8:	08003acd 	.word	0x08003acd
 80037dc:	08003acd 	.word	0x08003acd
 80037e0:	08003acd 	.word	0x08003acd
 80037e4:	08003acd 	.word	0x08003acd
 80037e8:	08003acd 	.word	0x08003acd
 80037ec:	08003acd 	.word	0x08003acd
 80037f0:	08003acd 	.word	0x08003acd
 80037f4:	08003acd 	.word	0x08003acd
 80037f8:	08003acd 	.word	0x08003acd
 80037fc:	08003acd 	.word	0x08003acd
 8003800:	08003acd 	.word	0x08003acd
 8003804:	08003acd 	.word	0x08003acd
 8003808:	08003acd 	.word	0x08003acd
 800380c:	08003acd 	.word	0x08003acd
 8003810:	08003acd 	.word	0x08003acd
 8003814:	08003acd 	.word	0x08003acd
 8003818:	08003acd 	.word	0x08003acd
 800381c:	08003935 	.word	0x08003935
 8003820:	080038b9 	.word	0x080038b9
 8003824:	080038cb 	.word	0x080038cb
 8003828:	08003acd 	.word	0x08003acd
 800382c:	08003acd 	.word	0x08003acd
 8003830:	08003acd 	.word	0x08003acd
 8003834:	080038af 	.word	0x080038af
 8003838:	08003acd 	.word	0x08003acd
 800383c:	08003acd 	.word	0x08003acd
 8003840:	08003acd 	.word	0x08003acd
 8003844:	08003925 	.word	0x08003925
 8003848:	080038e9 	.word	0x080038e9
 800384c:	080038d5 	.word	0x080038d5
 8003850:	08003acd 	.word	0x08003acd
 8003854:	080038df 	.word	0x080038df
 8003858:	08003911 	.word	0x08003911
 800385c:	08003acd 	.word	0x08003acd
 8003860:	080038a5 	.word	0x080038a5
 8003864:	080038fd 	.word	0x080038fd
 8003868:	080038f3 	.word	0x080038f3
 800386c:	08003acd 	.word	0x08003acd
 8003870:	08003907 	.word	0x08003907
 8003874:	0800389b 	.word	0x0800389b
 8003878:	08003acd 	.word	0x08003acd
 800387c:	080038c1 	.word	0x080038c1
				// 문자를 표시할 행을 지정하는 서식 문자
				case '0': case '1': case '2': case '3': case '4': case '5': case '6':
					posX = 0;
 8003880:	2300      	movs	r3, #0
 8003882:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
					posY = (FONT_HEIGHT + 1) * (nextChar - '0'); // FONT_HEIGHT + 1를 해주는 이유는, 폰트 아래 한 칸 여백을 남겨두기 위함이다.
 8003886:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 800388a:	3b30      	subs	r3, #48	; 0x30
 800388c:	b2db      	uxtb	r3, r3
 800388e:	461a      	mov	r2, r3
 8003890:	00d2      	lsls	r2, r2, #3
 8003892:	4413      	add	r3, r2
 8003894:	f887 321e 	strb.w	r3, [r7, #542]	; 0x21e
					break;
 8003898:	e118      	b.n	8003acc <Custom_OLED_Printf+0x448>
				// 색상을 지정할 서식 문자
				case 'w': color = OLED_COLOR_WHITE;   break;
 800389a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800389e:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80038a2:	e113      	b.n	8003acc <Custom_OLED_Printf+0x448>
				case 'r': color = OLED_COLOR_RED;     break;
 80038a4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80038a8:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80038ac:	e10e      	b.n	8003acc <Custom_OLED_Printf+0x448>
				case 'g': color = OLED_COLOR_GREEN;   break;
 80038ae:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80038b2:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80038b6:	e109      	b.n	8003acc <Custom_OLED_Printf+0x448>
				case 'b': color = OLED_COLOR_BLUE;    break;
 80038b8:	231f      	movs	r3, #31
 80038ba:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80038be:	e105      	b.n	8003acc <Custom_OLED_Printf+0x448>
				case 'y': color = OLED_COLOR_YELLOW;  break;
 80038c0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80038c4:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80038c8:	e100      	b.n	8003acc <Custom_OLED_Printf+0x448>
				case 'c': color = OLED_COLOR_CYAN;    break;
 80038ca:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80038ce:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80038d2:	e0fb      	b.n	8003acc <Custom_OLED_Printf+0x448>
				case 'm': color = OLED_COLOR_MAGENTA; break;
 80038d4:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80038d8:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80038dc:	e0f6      	b.n	8003acc <Custom_OLED_Printf+0x448>
				case 'o': color = OLED_COLOR_ORANGE;  break;
 80038de:	f64f 33e0 	movw	r3, #64480	; 0xfbe0
 80038e2:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80038e6:	e0f1      	b.n	8003acc <Custom_OLED_Printf+0x448>
				case 'l': color = OLED_COLOR_LIME;    break;
 80038e8:	f647 73e0 	movw	r3, #32736	; 0x7fe0
 80038ec:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80038f0:	e0ec      	b.n	8003acc <Custom_OLED_Printf+0x448>
				case 't': color = OLED_COLOR_MINT;    break;
 80038f2:	f240 73ef 	movw	r3, #2031	; 0x7ef
 80038f6:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80038fa:	e0e7      	b.n	8003acc <Custom_OLED_Printf+0x448>
				case 's': color = OLED_COLOR_SEA;     break;
 80038fc:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8003900:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8003904:	e0e2      	b.n	8003acc <Custom_OLED_Printf+0x448>
				case 'v': color = OLED_COLOR_VIOLET;  break;
 8003906:	f647 031f 	movw	r3, #30751	; 0x781f
 800390a:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 800390e:	e0dd      	b.n	8003acc <Custom_OLED_Printf+0x448>
				case 'p': color = OLED_COLOR_ROSE;    break;
 8003910:	f64f 030f 	movw	r3, #63503	; 0xf80f
 8003914:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8003918:	e0d8      	b.n	8003acc <Custom_OLED_Printf+0x448>
				case 'K': color = OLED_COLOR_GRAY;    break;
 800391a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800391e:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8003922:	e0d3      	b.n	8003acc <Custom_OLED_Printf+0x448>
				case 'k': color = OLED_COLOR_BLACK;   break;
 8003924:	2300      	movs	r3, #0
 8003926:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 800392a:	e0cf      	b.n	8003acc <Custom_OLED_Printf+0x448>
				// TODO: 크기 지정 문자 추가
				case 'A': size = 2;                   break;
 800392c:	2302      	movs	r3, #2
 800392e:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215
 8003932:	e0cb      	b.n	8003acc <Custom_OLED_Printf+0x448>
				case 'a': size = 1;                   break;
 8003934:	2301      	movs	r3, #1
 8003936:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215
 800393a:	e0c7      	b.n	8003acc <Custom_OLED_Printf+0x448>
				case '#':
                    {
                        uint32_t colordata = 0;
 800393c:	2300      	movs	r3, #0
 800393e:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
                        for(uint32_t i = 0; i < 6; i++){
 8003942:	2300      	movs	r3, #0
 8003944:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8003948:	e099      	b.n	8003a7e <Custom_OLED_Printf+0x3fa>
                            if(buffer[cursor + i + 2] >= 'A' && buffer[cursor + i + 2] <= 'F'){
 800394a:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 800394e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003952:	4413      	add	r3, r2
 8003954:	3302      	adds	r3, #2
 8003956:	f507 7208 	add.w	r2, r7, #544	; 0x220
 800395a:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 800395e:	5cd3      	ldrb	r3, [r2, r3]
 8003960:	2b40      	cmp	r3, #64	; 0x40
 8003962:	d924      	bls.n	80039ae <Custom_OLED_Printf+0x32a>
 8003964:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8003968:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800396c:	4413      	add	r3, r2
 800396e:	3302      	adds	r3, #2
 8003970:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8003974:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8003978:	5cd3      	ldrb	r3, [r2, r3]
 800397a:	2b46      	cmp	r3, #70	; 0x46
 800397c:	d817      	bhi.n	80039ae <Custom_OLED_Printf+0x32a>
                            	colordata *= 16;
 800397e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003982:	011b      	lsls	r3, r3, #4
 8003984:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
                            	colordata += buffer[cursor + i + 2] - 'A' + 10;
 8003988:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 800398c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003990:	4413      	add	r3, r2
 8003992:	3302      	adds	r3, #2
 8003994:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8003998:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 800399c:	5cd3      	ldrb	r3, [r2, r3]
 800399e:	461a      	mov	r2, r3
 80039a0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80039a4:	4413      	add	r3, r2
 80039a6:	3b37      	subs	r3, #55	; 0x37
 80039a8:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80039ac:	e062      	b.n	8003a74 <Custom_OLED_Printf+0x3f0>
                            }
                            else if(buffer[cursor + i + 2] >= 'a' && buffer[cursor + i + 2] <= 'f'){
 80039ae:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 80039b2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80039b6:	4413      	add	r3, r2
 80039b8:	3302      	adds	r3, #2
 80039ba:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80039be:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 80039c2:	5cd3      	ldrb	r3, [r2, r3]
 80039c4:	2b60      	cmp	r3, #96	; 0x60
 80039c6:	d924      	bls.n	8003a12 <Custom_OLED_Printf+0x38e>
 80039c8:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 80039cc:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80039d0:	4413      	add	r3, r2
 80039d2:	3302      	adds	r3, #2
 80039d4:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80039d8:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 80039dc:	5cd3      	ldrb	r3, [r2, r3]
 80039de:	2b66      	cmp	r3, #102	; 0x66
 80039e0:	d817      	bhi.n	8003a12 <Custom_OLED_Printf+0x38e>
                            	colordata *= 16;
 80039e2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80039e6:	011b      	lsls	r3, r3, #4
 80039e8:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
                            	colordata += buffer[cursor + i + 2] - 'a' + 10;
 80039ec:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 80039f0:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80039f4:	4413      	add	r3, r2
 80039f6:	3302      	adds	r3, #2
 80039f8:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80039fc:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8003a00:	5cd3      	ldrb	r3, [r2, r3]
 8003a02:	461a      	mov	r2, r3
 8003a04:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003a08:	4413      	add	r3, r2
 8003a0a:	3b57      	subs	r3, #87	; 0x57
 8003a0c:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8003a10:	e030      	b.n	8003a74 <Custom_OLED_Printf+0x3f0>
                            }
                            else if(buffer[cursor + i + 2] >= '0' && buffer[cursor + i + 2] <= '9'){
 8003a12:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8003a16:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003a1a:	4413      	add	r3, r2
 8003a1c:	3302      	adds	r3, #2
 8003a1e:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8003a22:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8003a26:	5cd3      	ldrb	r3, [r2, r3]
 8003a28:	2b2f      	cmp	r3, #47	; 0x2f
 8003a2a:	d923      	bls.n	8003a74 <Custom_OLED_Printf+0x3f0>
 8003a2c:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8003a30:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003a34:	4413      	add	r3, r2
 8003a36:	3302      	adds	r3, #2
 8003a38:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8003a3c:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8003a40:	5cd3      	ldrb	r3, [r2, r3]
 8003a42:	2b39      	cmp	r3, #57	; 0x39
 8003a44:	d816      	bhi.n	8003a74 <Custom_OLED_Printf+0x3f0>
                            	colordata *= 16;
 8003a46:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003a4a:	011b      	lsls	r3, r3, #4
 8003a4c:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
                            	colordata += buffer[cursor + i + 2] - '0';
 8003a50:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8003a54:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003a58:	4413      	add	r3, r2
 8003a5a:	3302      	adds	r3, #2
 8003a5c:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8003a60:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8003a64:	5cd3      	ldrb	r3, [r2, r3]
 8003a66:	461a      	mov	r2, r3
 8003a68:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003a6c:	4413      	add	r3, r2
 8003a6e:	3b30      	subs	r3, #48	; 0x30
 8003a70:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
                        for(uint32_t i = 0; i < 6; i++){
 8003a74:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003a78:	3301      	adds	r3, #1
 8003a7a:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8003a7e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003a82:	2b05      	cmp	r3, #5
 8003a84:	f67f af61 	bls.w	800394a <Custom_OLED_Printf+0x2c6>
                            }
                        }
                        color = ((colordata >> 8) & 0xF800) | ((colordata >> 5) & 0x07F0) | ((colordata >> 3) & 0x001F);
 8003a88:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003a8c:	0a1b      	lsrs	r3, r3, #8
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003a94:	f023 0307 	bic.w	r3, r3, #7
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003a9e:	095b      	lsrs	r3, r3, #5
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003ab0:	08db      	lsrs	r3, r3, #3
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	f003 031f 	and.w	r3, r3, #31
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	4313      	orrs	r3, r2
 8003abc:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216

                    }
                cursor += 6;
 8003ac0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003ac4:	3306      	adds	r3, #6
 8003ac6:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
                break;
 8003aca:	bf00      	nop
				}

				cursor += 2;
 8003acc:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003ad0:	3302      	adds	r3, #2
 8003ad2:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
				continue;
 8003ad6:	e024      	b.n	8003b22 <Custom_OLED_Printf+0x49e>
			}
		}

		Custom_OLED_Putchar(buffer[cursor], color, posX, posY, size); // 문자를 화면에 표시한다.
 8003ad8:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003adc:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 8003ae0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003ae4:	4413      	add	r3, r2
 8003ae6:	7818      	ldrb	r0, [r3, #0]
 8003ae8:	f897 421e 	ldrb.w	r4, [r7, #542]	; 0x21e
 8003aec:	f897 221f 	ldrb.w	r2, [r7, #543]	; 0x21f
 8003af0:	f8b7 1216 	ldrh.w	r1, [r7, #534]	; 0x216
 8003af4:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	4623      	mov	r3, r4
 8003afc:	f7ff fd22 	bl	8003544 <Custom_OLED_Putchar>
		posX += (FONT_WIDTH + 1) * size; // FONT_WIDTH + 1를 해주는 이유는, 폰트 오른쪽 한 칸 여백을 남겨두기 위함이다.
 8003b00:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 8003b04:	461a      	mov	r2, r3
 8003b06:	0052      	lsls	r2, r2, #1
 8003b08:	4413      	add	r3, r2
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	b2da      	uxtb	r2, r3
 8003b0e:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8003b12:	4413      	add	r3, r2
 8003b14:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
		cursor++;
 8003b18:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	while (buffer[cursor]) {
 8003b22:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003b26:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 8003b2a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003b2e:	4413      	add	r3, r2
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f47f adce 	bne.w	80036d4 <Custom_OLED_Printf+0x50>
	}
}
 8003b38:	bf00      	nop
 8003b3a:	bf00      	nop
 8003b3c:	f507 7709 	add.w	r7, r7, #548	; 0x224
 8003b40:	46bd      	mov	sp, r7
 8003b42:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003b46:	b004      	add	sp, #16
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop

08003b4c <LL_GPIO_ReadInputPort>:
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	691b      	ldr	r3, [r3, #16]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <Custom_Delay_Get_SysTick>:
}

/**
 * @brief SysTick이 초기화된 시점부터 경과한 시간을 반환한다.
 */
__STATIC_INLINE uint32_t Custom_Delay_Get_SysTick() {
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
	return uwTick;
 8003b68:	4b03      	ldr	r3, [pc, #12]	; (8003b78 <Custom_Delay_Get_SysTick+0x14>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	200001ec 	.word	0x200001ec

08003b7c <Custom_Switch_Init_ButtonState>:
	uint32_t prevTick;
	uint8_t state;
} ButtonState_t;

static void Custom_Switch_Init_ButtonState(ButtonState_t *State,
		GPIO_TypeDef *GPIOx, uint32_t PinMask) {
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
	State->port = GPIOx;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	601a      	str	r2, [r3, #0]
	State->pinMask = PinMask;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	605a      	str	r2, [r3, #4]
	State->timer = 0;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	609a      	str	r2, [r3, #8]
	State->prevTick = Custom_Delay_Get_SysTick();
 8003b9a:	f7ff ffe3 	bl	8003b64 <Custom_Delay_Get_SysTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	60da      	str	r2, [r3, #12]
	State->state = LONG_OFF;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	741a      	strb	r2, [r3, #16]
}
 8003baa:	bf00      	nop
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
	...

08003bb4 <Custom_Switch_State_Machine>:

static uint8_t Custom_Switch_State_Machine(ButtonState_t *State) {
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
	 * 이 함수는 State 구조체의 값을 기반으로 아래 설명된 바와 같이 state machine을 구현한다.
	 * 원래는 1ms마다 호출됨을 전제로 하였으나 OLED 화면 출력과 같은 시간이 많이 소요되는 함로로 인해 부하가 걸리면
	 * 1ms 시간이 부족하여 스위치가 동작이 제대로 수행되지 않는 문제점이 있었다.
	 * 함수가 호출된 시간을 측정하여 타이머 값에 시간을 뺀 뒤 기준 시간이 지났음을 감지하여 버튼 입력값을 출력하는 방식으로 변경하였다.
	 */
	bool currentPushed = !(LL_GPIO_ReadInputPort(State->port) & State->pinMask);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7ff ffc3 	bl	8003b4c <LL_GPIO_ReadInputPort>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	bf0c      	ite	eq
 8003bd2:	2301      	moveq	r3, #1
 8003bd4:	2300      	movne	r3, #0
 8003bd6:	73bb      	strb	r3, [r7, #14]
	bool pushEvent = false;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	73fb      	strb	r3, [r7, #15]

	uint32_t currTick = Custom_Delay_Get_SysTick();
 8003bdc:	f7ff ffc2 	bl	8003b64 <Custom_Delay_Get_SysTick>
 8003be0:	60b8      	str	r0, [r7, #8]

	switch (State->state) {
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	7c1b      	ldrb	r3, [r3, #16]
 8003be6:	3b01      	subs	r3, #1
 8003be8:	2b07      	cmp	r3, #7
 8003bea:	d873      	bhi.n	8003cd4 <Custom_Switch_State_Machine+0x120>
 8003bec:	a201      	add	r2, pc, #4	; (adr r2, 8003bf4 <Custom_Switch_State_Machine+0x40>)
 8003bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf2:	bf00      	nop
 8003bf4:	08003c15 	.word	0x08003c15
 8003bf8:	08003c29 	.word	0x08003c29
 8003bfc:	08003cd5 	.word	0x08003cd5
 8003c00:	08003c5f 	.word	0x08003c5f
 8003c04:	08003cd5 	.word	0x08003cd5
 8003c08:	08003cd5 	.word	0x08003cd5
 8003c0c:	08003cd5 	.word	0x08003cd5
 8003c10:	08003ca9 	.word	0x08003ca9

		case LONG_OFF:
			if (currentPushed) {
 8003c14:	7bbb      	ldrb	r3, [r7, #14]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d05b      	beq.n	8003cd2 <Custom_Switch_State_Machine+0x11e>
				State->state = SHORT_ON;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2202      	movs	r2, #2
 8003c1e:	741a      	strb	r2, [r3, #16]
				State->timer = TIME_SHROT;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2250      	movs	r2, #80	; 0x50
 8003c24:	609a      	str	r2, [r3, #8]
			}
			break;
 8003c26:	e054      	b.n	8003cd2 <Custom_Switch_State_Machine+0x11e>

		case SHORT_ON:
			if (State->timer <= currTick - State->prevTick) {
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689a      	ldr	r2, [r3, #8]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	68b9      	ldr	r1, [r7, #8]
 8003c32:	1acb      	subs	r3, r1, r3
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d808      	bhi.n	8003c4a <Custom_Switch_State_Machine+0x96>
				pushEvent = true;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	73fb      	strb	r3, [r7, #15]
				State->state = LONG_ON;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2204      	movs	r2, #4
 8003c40:	741a      	strb	r2, [r3, #16]
				State->timer = TIME_LONG;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c48:	609a      	str	r2, [r3, #8]
			}
			State->timer -= currTick - State->prevTick;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689a      	ldr	r2, [r3, #8]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68d9      	ldr	r1, [r3, #12]
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	1acb      	subs	r3, r1, r3
 8003c56:	441a      	add	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	609a      	str	r2, [r3, #8]
			break;
 8003c5c:	e03a      	b.n	8003cd4 <Custom_Switch_State_Machine+0x120>

		case LONG_ON:
			if (!currentPushed) {
 8003c5e:	7bbb      	ldrb	r3, [r7, #14]
 8003c60:	f083 0301 	eor.w	r3, r3, #1
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d006      	beq.n	8003c78 <Custom_Switch_State_Machine+0xc4>
				State->state = SHORT_OFF;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2208      	movs	r2, #8
 8003c6e:	741a      	strb	r2, [r3, #16]
				State->timer = TIME_SHROT;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2250      	movs	r2, #80	; 0x50
 8003c74:	609a      	str	r2, [r3, #8]
				break;
 8003c76:	e02d      	b.n	8003cd4 <Custom_Switch_State_Machine+0x120>
			}
			if (State->timer <= currTick - State->prevTick) {
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	68b9      	ldr	r1, [r7, #8]
 8003c82:	1acb      	subs	r3, r1, r3
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d805      	bhi.n	8003c94 <Custom_Switch_State_Machine+0xe0>
				pushEvent = true;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	73fb      	strb	r3, [r7, #15]
				State->timer = TIME_LONG;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c92:	609a      	str	r2, [r3, #8]
			}
			State->timer -= currTick - State->prevTick;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68d9      	ldr	r1, [r3, #12]
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	1acb      	subs	r3, r1, r3
 8003ca0:	441a      	add	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	609a      	str	r2, [r3, #8]
			break;
 8003ca6:	e015      	b.n	8003cd4 <Custom_Switch_State_Machine+0x120>

		case SHORT_OFF:
			if (State->timer <= currTick - State->prevTick) {
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	68b9      	ldr	r1, [r7, #8]
 8003cb2:	1acb      	subs	r3, r1, r3
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d802      	bhi.n	8003cbe <Custom_Switch_State_Machine+0x10a>
				State->state = LONG_OFF;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	741a      	strb	r2, [r3, #16]
			}
			State->timer -= currTick - State->prevTick;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689a      	ldr	r2, [r3, #8]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68d9      	ldr	r1, [r3, #12]
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	1acb      	subs	r3, r1, r3
 8003cca:	441a      	add	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	609a      	str	r2, [r3, #8]
			break;
 8003cd0:	e000      	b.n	8003cd4 <Custom_Switch_State_Machine+0x120>
			break;
 8003cd2:	bf00      	nop
	}

	// 다음 호출 시 이전에 함수가 호출된 시간을 참조해야 하므로 prevTick값에 저장한다.
	State->prevTick = currTick;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	60da      	str	r2, [r3, #12]

	return pushEvent;
 8003cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3710      	adds	r7, #16
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <Custom_Switch_Read>:

uint8_t Custom_Switch_Read(void) {
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
	 * 그러나 C언어 및 임베디드시스템에는 그런 오류를 잡는 기능이 없다. 그래서 이러한 함수를 사용하는 것이 바람직하다.
	 * 다만 매우 고속의 연산이 필요한 경우 if검사를 매번 실시하는 것은 바람직하지 않다. 그런 경우 초기화 루틴을 따로 함수로 빼는 것이 낫다.
	 */
	static bool isInitialized = false;
	static ButtonState_t sw1, sw2;
	if (!isInitialized) {
 8003cea:	4b2c      	ldr	r3, [pc, #176]	; (8003d9c <Custom_Switch_Read+0xb8>)
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	f083 0301 	eor.w	r3, r3, #1
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00c      	beq.n	8003d12 <Custom_Switch_Read+0x2e>
		isInitialized = true;
 8003cf8:	4b28      	ldr	r3, [pc, #160]	; (8003d9c <Custom_Switch_Read+0xb8>)
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	701a      	strb	r2, [r3, #0]
		Custom_Switch_Init_ButtonState(&sw1, SW1_PORT, SW1_PIN);
 8003cfe:	2210      	movs	r2, #16
 8003d00:	4927      	ldr	r1, [pc, #156]	; (8003da0 <Custom_Switch_Read+0xbc>)
 8003d02:	4828      	ldr	r0, [pc, #160]	; (8003da4 <Custom_Switch_Read+0xc0>)
 8003d04:	f7ff ff3a 	bl	8003b7c <Custom_Switch_Init_ButtonState>
		Custom_Switch_Init_ButtonState(&sw2, SW2_PORT, SW2_PIN);
 8003d08:	2220      	movs	r2, #32
 8003d0a:	4925      	ldr	r1, [pc, #148]	; (8003da0 <Custom_Switch_Read+0xbc>)
 8003d0c:	4826      	ldr	r0, [pc, #152]	; (8003da8 <Custom_Switch_Read+0xc4>)
 8003d0e:	f7ff ff35 	bl	8003b7c <Custom_Switch_Init_ButtonState>
	}

	uint8_t sw1PushEvent = Custom_Switch_State_Machine(&sw1);
 8003d12:	4824      	ldr	r0, [pc, #144]	; (8003da4 <Custom_Switch_Read+0xc0>)
 8003d14:	f7ff ff4e 	bl	8003bb4 <Custom_Switch_State_Machine>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	71fb      	strb	r3, [r7, #7]
	uint8_t sw2PushEvent = Custom_Switch_State_Machine(&sw2);
 8003d1c:	4822      	ldr	r0, [pc, #136]	; (8003da8 <Custom_Switch_Read+0xc4>)
 8003d1e:	f7ff ff49 	bl	8003bb4 <Custom_Switch_State_Machine>
 8003d22:	4603      	mov	r3, r0
 8003d24:	71bb      	strb	r3, [r7, #6]

	/*
	 * 두 버튼이 동시에 눌리는 것을 처리하기 위해, 한 버튼의 푸시 이벤트가 발생했고 다른 버튼이 Short-On 상태에 있다면 두 버튼이 동시에 눌린 것으로 간주한다.
	 */
	if ((sw1.state & SHORT_ON) && sw2PushEvent) {
 8003d26:	4b1f      	ldr	r3, [pc, #124]	; (8003da4 <Custom_Switch_Read+0xc0>)
 8003d28:	7c1b      	ldrb	r3, [r3, #16]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00c      	beq.n	8003d4c <Custom_Switch_Read+0x68>
 8003d32:	79bb      	ldrb	r3, [r7, #6]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d009      	beq.n	8003d4c <Custom_Switch_Read+0x68>
		sw1PushEvent = true;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	71fb      	strb	r3, [r7, #7]
		sw1.state = sw2.state;
 8003d3c:	4b1a      	ldr	r3, [pc, #104]	; (8003da8 <Custom_Switch_Read+0xc4>)
 8003d3e:	7c1a      	ldrb	r2, [r3, #16]
 8003d40:	4b18      	ldr	r3, [pc, #96]	; (8003da4 <Custom_Switch_Read+0xc0>)
 8003d42:	741a      	strb	r2, [r3, #16]
		sw1.timer = sw2.timer;
 8003d44:	4b18      	ldr	r3, [pc, #96]	; (8003da8 <Custom_Switch_Read+0xc4>)
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	4a16      	ldr	r2, [pc, #88]	; (8003da4 <Custom_Switch_Read+0xc0>)
 8003d4a:	6093      	str	r3, [r2, #8]
	}
	if ((sw2.state & SHORT_ON) && sw1PushEvent) {
 8003d4c:	4b16      	ldr	r3, [pc, #88]	; (8003da8 <Custom_Switch_Read+0xc4>)
 8003d4e:	7c1b      	ldrb	r3, [r3, #16]
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00c      	beq.n	8003d72 <Custom_Switch_Read+0x8e>
 8003d58:	79fb      	ldrb	r3, [r7, #7]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d009      	beq.n	8003d72 <Custom_Switch_Read+0x8e>
		sw2PushEvent = true;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	71bb      	strb	r3, [r7, #6]
		sw2.state = sw1.state;
 8003d62:	4b10      	ldr	r3, [pc, #64]	; (8003da4 <Custom_Switch_Read+0xc0>)
 8003d64:	7c1a      	ldrb	r2, [r3, #16]
 8003d66:	4b10      	ldr	r3, [pc, #64]	; (8003da8 <Custom_Switch_Read+0xc4>)
 8003d68:	741a      	strb	r2, [r3, #16]
		sw2.timer = sw1.timer;
 8003d6a:	4b0e      	ldr	r3, [pc, #56]	; (8003da4 <Custom_Switch_Read+0xc0>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	4a0e      	ldr	r2, [pc, #56]	; (8003da8 <Custom_Switch_Read+0xc4>)
 8003d70:	6093      	str	r3, [r2, #8]
	}

	uint8_t buttonPushEvent = 0;
 8003d72:	2300      	movs	r3, #0
 8003d74:	717b      	strb	r3, [r7, #5]
	if (sw1PushEvent) buttonPushEvent |= CUSTOM_SW_1;
 8003d76:	79fb      	ldrb	r3, [r7, #7]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d003      	beq.n	8003d84 <Custom_Switch_Read+0xa0>
 8003d7c:	797b      	ldrb	r3, [r7, #5]
 8003d7e:	f043 0301 	orr.w	r3, r3, #1
 8003d82:	717b      	strb	r3, [r7, #5]
	if (sw2PushEvent) buttonPushEvent |= CUSTOM_SW_2;
 8003d84:	79bb      	ldrb	r3, [r7, #6]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <Custom_Switch_Read+0xae>
 8003d8a:	797b      	ldrb	r3, [r7, #5]
 8003d8c:	f043 0302 	orr.w	r3, r3, #2
 8003d90:	717b      	strb	r3, [r7, #5]

	return buttonPushEvent;
 8003d92:	797b      	ldrb	r3, [r7, #5]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3708      	adds	r7, #8
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	20001344 	.word	0x20001344
 8003da0:	40020400 	.word	0x40020400
 8003da4:	20001348 	.word	0x20001348
 8003da8:	2000135c 	.word	0x2000135c

08003dac <LL_USART_Enable>:
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	60da      	str	r2, [r3, #12]
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ddc:	2b80      	cmp	r3, #128	; 0x80
 8003dde:	bf0c      	ite	eq
 8003de0:	2301      	moveq	r3, #1
 8003de2:	2300      	movne	r3, #0
 8003de4:	b2db      	uxtb	r3, r3
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr

08003df2 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b083      	sub	sp, #12
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	b2db      	uxtb	r3, r3
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	460b      	mov	r3, r1
 8003e16:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8003e18:	78fa      	ldrb	r2, [r7, #3]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	605a      	str	r2, [r3, #4]
}
 8003e1e:	bf00      	nop
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <Custom_Delay_us>:
__STATIC_INLINE void Custom_Delay_us(uint32_t microsecond) {
 8003e2a:	b480      	push	{r7}
 8003e2c:	b083      	sub	sp, #12
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
	CUSTOM_DELAY_TIM->ARR = microsecond - 1;
 8003e32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	62d3      	str	r3, [r2, #44]	; 0x2c
	CUSTOM_DELAY_TIM->SR &= ~(0x0001); // Clear UEV flag
 8003e3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003e46:	f023 0301 	bic.w	r3, r3, #1
 8003e4a:	6113      	str	r3, [r2, #16]
	CUSTOM_DELAY_TIM->CR1 |= 1UL;
 8003e4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003e56:	f043 0301 	orr.w	r3, r3, #1
 8003e5a:	6013      	str	r3, [r2, #0]
	while ((CUSTOM_DELAY_TIM->SR & 0x0001) != 1)
 8003e5c:	bf00      	nop
 8003e5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d1f8      	bne.n	8003e5e <Custom_Delay_us+0x34>
}
 8003e6c:	bf00      	nop
 8003e6e:	bf00      	nop
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <Custom_Delay_ms>:
__STATIC_INLINE void Custom_Delay_ms(uint32_t millisecond) {
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b082      	sub	sp, #8
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
	Custom_Delay_us(millisecond * 1000);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e88:	fb02 f303 	mul.w	r3, r2, r3
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7ff ffcc 	bl	8003e2a <Custom_Delay_us>
}
 8003e92:	bf00      	nop
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
	...

08003e9c <Custom_Delay_Init_SysTick>:
__STATIC_INLINE void Custom_Delay_Init_SysTick() {
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
	uwTick = 0;
 8003ea0:	4b06      	ldr	r3, [pc, #24]	; (8003ebc <Custom_Delay_Init_SysTick+0x20>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	601a      	str	r2, [r3, #0]
	SysTick->CTRL = (SysTick->CTRL & 0xFFFFFFF8) | 0x07;
 8003ea6:	4b06      	ldr	r3, [pc, #24]	; (8003ec0 <Custom_Delay_Init_SysTick+0x24>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a05      	ldr	r2, [pc, #20]	; (8003ec0 <Custom_Delay_Init_SysTick+0x24>)
 8003eac:	f043 0307 	orr.w	r3, r3, #7
 8003eb0:	6013      	str	r3, [r2, #0]
}
 8003eb2:	bf00      	nop
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	200001ec 	.word	0x200001ec
 8003ec0:	e000e010 	.word	0xe000e010

08003ec4 <__io_putchar>:

/*
 * syscalls.c에 있는 _io_putchar 재정의
 */
int __io_putchar(int ch)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
	while (!LL_USART_IsActiveFlag_TXE(USART2));
 8003ecc:	bf00      	nop
 8003ece:	4808      	ldr	r0, [pc, #32]	; (8003ef0 <__io_putchar+0x2c>)
 8003ed0:	f7ff ff7c 	bl	8003dcc <LL_USART_IsActiveFlag_TXE>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d0f9      	beq.n	8003ece <__io_putchar+0xa>
	LL_USART_TransmitData8(USART2, (char)ch);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	4619      	mov	r1, r3
 8003ee0:	4803      	ldr	r0, [pc, #12]	; (8003ef0 <__io_putchar+0x2c>)
 8003ee2:	f7ff ff93 	bl	8003e0c <LL_USART_TransmitData8>
	return ch;
 8003ee6:	687b      	ldr	r3, [r7, #4]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3708      	adds	r7, #8
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	40004400 	.word	0x40004400

08003ef4 <Read_State_Machine>:




void Read_State_Machine(uint8_t cntlSig) {
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	4603      	mov	r3, r0
 8003efc:	71fb      	strb	r3, [r7, #7]

	static uint8_t	readState = READ_STATE_IDLE;
	static uint8_t	readCnt = 0;
	int32_t	readData;

	if (cntlSig == RESET_SIG) {
 8003efe:	79fb      	ldrb	r3, [r7, #7]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d10b      	bne.n	8003f1c <Read_State_Machine+0x28>

		readCnt = 0;
 8003f04:	4b24      	ldr	r3, [pc, #144]	; (8003f98 <Read_State_Machine+0xa4>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	701a      	strb	r2, [r3, #0]
		doReading = DO_NOT_READING_SIG;
 8003f0a:	4b24      	ldr	r3, [pc, #144]	; (8003f9c <Read_State_Machine+0xa8>)
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	701a      	strb	r2, [r3, #0]

		readState = READ_STATE_IDLE;
 8003f10:	4b23      	ldr	r3, [pc, #140]	; (8003fa0 <Read_State_Machine+0xac>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	701a      	strb	r2, [r3, #0]
		Custom_OLED_Printf("/0READ IDLE");
 8003f16:	4823      	ldr	r0, [pc, #140]	; (8003fa4 <Read_State_Machine+0xb0>)
 8003f18:	f7ff fbb4 	bl	8003684 <Custom_OLED_Printf>
	}

	switch(readState) {
 8003f1c:	4b20      	ldr	r3, [pc, #128]	; (8003fa0 <Read_State_Machine+0xac>)
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d02a      	beq.n	8003f7a <Read_State_Machine+0x86>
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	dc33      	bgt.n	8003f90 <Read_State_Machine+0x9c>
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d002      	beq.n	8003f32 <Read_State_Machine+0x3e>
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d00b      	beq.n	8003f48 <Read_State_Machine+0x54>
			doReading = DO_NOT_READING_SIG;
			readState = READ_STATE_IDLE;

			break;
	}
}
 8003f30:	e02e      	b.n	8003f90 <Read_State_Machine+0x9c>
			if (doReading == DO_READING_SIG) {
 8003f32:	4b1a      	ldr	r3, [pc, #104]	; (8003f9c <Read_State_Machine+0xa8>)
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d129      	bne.n	8003f8e <Read_State_Machine+0x9a>
				Custom_OLED_Printf("/0READ IDLE");
 8003f3a:	481a      	ldr	r0, [pc, #104]	; (8003fa4 <Read_State_Machine+0xb0>)
 8003f3c:	f7ff fba2 	bl	8003684 <Custom_OLED_Printf>
				readState = READ_STATE_DOING;
 8003f40:	4b17      	ldr	r3, [pc, #92]	; (8003fa0 <Read_State_Machine+0xac>)
 8003f42:	2201      	movs	r2, #1
 8003f44:	701a      	strb	r2, [r3, #0]
			break;
 8003f46:	e022      	b.n	8003f8e <Read_State_Machine+0x9a>
			Custom_OLED_Printf("/0READ DO  ");
 8003f48:	4817      	ldr	r0, [pc, #92]	; (8003fa8 <Read_State_Machine+0xb4>)
 8003f4a:	f7ff fb9b 	bl	8003684 <Custom_OLED_Printf>
			readData = LL_USART_ReceiveData8(USART2);
 8003f4e:	4817      	ldr	r0, [pc, #92]	; (8003fac <Read_State_Machine+0xb8>)
 8003f50:	f7ff ff4f 	bl	8003df2 <LL_USART_ReceiveData8>
 8003f54:	4603      	mov	r3, r0
 8003f56:	60fb      	str	r3, [r7, #12]
			Custom_OLED_Printf("/1%dth read: %d", ++readCnt, readData);
 8003f58:	4b0f      	ldr	r3, [pc, #60]	; (8003f98 <Read_State_Machine+0xa4>)
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	b2da      	uxtb	r2, r3
 8003f60:	4b0d      	ldr	r3, [pc, #52]	; (8003f98 <Read_State_Machine+0xa4>)
 8003f62:	701a      	strb	r2, [r3, #0]
 8003f64:	4b0c      	ldr	r3, [pc, #48]	; (8003f98 <Read_State_Machine+0xa4>)
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	4810      	ldr	r0, [pc, #64]	; (8003fb0 <Read_State_Machine+0xbc>)
 8003f6e:	f7ff fb89 	bl	8003684 <Custom_OLED_Printf>
			readState = READ_STATE_DONE;
 8003f72:	4b0b      	ldr	r3, [pc, #44]	; (8003fa0 <Read_State_Machine+0xac>)
 8003f74:	2202      	movs	r2, #2
 8003f76:	701a      	strb	r2, [r3, #0]
			break;
 8003f78:	e00a      	b.n	8003f90 <Read_State_Machine+0x9c>
			Custom_OLED_Printf("/0READ DONE");
 8003f7a:	480e      	ldr	r0, [pc, #56]	; (8003fb4 <Read_State_Machine+0xc0>)
 8003f7c:	f7ff fb82 	bl	8003684 <Custom_OLED_Printf>
			doReading = DO_NOT_READING_SIG;
 8003f80:	4b06      	ldr	r3, [pc, #24]	; (8003f9c <Read_State_Machine+0xa8>)
 8003f82:	2201      	movs	r2, #1
 8003f84:	701a      	strb	r2, [r3, #0]
			readState = READ_STATE_IDLE;
 8003f86:	4b06      	ldr	r3, [pc, #24]	; (8003fa0 <Read_State_Machine+0xac>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	701a      	strb	r2, [r3, #0]
			break;
 8003f8c:	e000      	b.n	8003f90 <Read_State_Machine+0x9c>
			break;
 8003f8e:	bf00      	nop
}
 8003f90:	bf00      	nop
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	20001370 	.word	0x20001370
 8003f9c:	20000005 	.word	0x20000005
 8003fa0:	20001371 	.word	0x20001371
 8003fa4:	08006f64 	.word	0x08006f64
 8003fa8:	08006f70 	.word	0x08006f70
 8003fac:	40004400 	.word	0x40004400
 8003fb0:	08006f7c 	.word	0x08006f7c
 8003fb4:	08006f8c 	.word	0x08006f8c

08003fb8 <Write_State_Machine>:




void Write_State_Machine(uint8_t writeData, uint8_t cntlSig) {
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	460a      	mov	r2, r1
 8003fc2:	71fb      	strb	r3, [r7, #7]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	71bb      	strb	r3, [r7, #6]

	static uint8_t	writeState = WRITE_STATE_IDLE;
	static uint8_t	writeCnt = 0;

	if (cntlSig == RESET_SIG) {
 8003fc8:	79bb      	ldrb	r3, [r7, #6]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d10b      	bne.n	8003fe6 <Write_State_Machine+0x2e>

		writeCnt = 0;
 8003fce:	4b25      	ldr	r3, [pc, #148]	; (8004064 <Write_State_Machine+0xac>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	701a      	strb	r2, [r3, #0]
		doReading = DO_NOT_READING_SIG;
 8003fd4:	4b24      	ldr	r3, [pc, #144]	; (8004068 <Write_State_Machine+0xb0>)
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	701a      	strb	r2, [r3, #0]

		writeState = WRITE_STATE_IDLE;
 8003fda:	4b24      	ldr	r3, [pc, #144]	; (800406c <Write_State_Machine+0xb4>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	701a      	strb	r2, [r3, #0]
		Custom_OLED_Printf("/4WRITE IDLE");
 8003fe0:	4823      	ldr	r0, [pc, #140]	; (8004070 <Write_State_Machine+0xb8>)
 8003fe2:	f7ff fb4f 	bl	8003684 <Custom_OLED_Printf>
	}

	switch(writeState) {
 8003fe6:	4b21      	ldr	r3, [pc, #132]	; (800406c <Write_State_Machine+0xb4>)
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d02b      	beq.n	8004046 <Write_State_Machine+0x8e>
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	dc34      	bgt.n	800405c <Write_State_Machine+0xa4>
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d002      	beq.n	8003ffc <Write_State_Machine+0x44>
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d00b      	beq.n	8004012 <Write_State_Machine+0x5a>
			doWriting = DO_NOT_WRITING_SIG;
			writeState = WRITE_STATE_IDLE;

			break;
	}
}
 8003ffa:	e02f      	b.n	800405c <Write_State_Machine+0xa4>
			if (doWriting == DO_WRITING_SIG) {
 8003ffc:	4b1d      	ldr	r3, [pc, #116]	; (8004074 <Write_State_Machine+0xbc>)
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d12a      	bne.n	800405a <Write_State_Machine+0xa2>
				Custom_OLED_Printf("/4WRITE IDLE");
 8004004:	481a      	ldr	r0, [pc, #104]	; (8004070 <Write_State_Machine+0xb8>)
 8004006:	f7ff fb3d 	bl	8003684 <Custom_OLED_Printf>
				writeState = WRITE_STATE_DOING;
 800400a:	4b18      	ldr	r3, [pc, #96]	; (800406c <Write_State_Machine+0xb4>)
 800400c:	2201      	movs	r2, #1
 800400e:	701a      	strb	r2, [r3, #0]
			break;
 8004010:	e023      	b.n	800405a <Write_State_Machine+0xa2>
			Custom_OLED_Printf("/4WRITE DO  ");
 8004012:	4819      	ldr	r0, [pc, #100]	; (8004078 <Write_State_Machine+0xc0>)
 8004014:	f7ff fb36 	bl	8003684 <Custom_OLED_Printf>
			LL_USART_TransmitData8(USART2, writeData);
 8004018:	79fb      	ldrb	r3, [r7, #7]
 800401a:	4619      	mov	r1, r3
 800401c:	4817      	ldr	r0, [pc, #92]	; (800407c <Write_State_Machine+0xc4>)
 800401e:	f7ff fef5 	bl	8003e0c <LL_USART_TransmitData8>
			Custom_OLED_Printf("/5%dth write: %4d", ++writeCnt, writeData);
 8004022:	4b10      	ldr	r3, [pc, #64]	; (8004064 <Write_State_Machine+0xac>)
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	3301      	adds	r3, #1
 8004028:	b2da      	uxtb	r2, r3
 800402a:	4b0e      	ldr	r3, [pc, #56]	; (8004064 <Write_State_Machine+0xac>)
 800402c:	701a      	strb	r2, [r3, #0]
 800402e:	4b0d      	ldr	r3, [pc, #52]	; (8004064 <Write_State_Machine+0xac>)
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	4619      	mov	r1, r3
 8004034:	79fb      	ldrb	r3, [r7, #7]
 8004036:	461a      	mov	r2, r3
 8004038:	4811      	ldr	r0, [pc, #68]	; (8004080 <Write_State_Machine+0xc8>)
 800403a:	f7ff fb23 	bl	8003684 <Custom_OLED_Printf>
			writeState = WRITE_STATE_DONE;
 800403e:	4b0b      	ldr	r3, [pc, #44]	; (800406c <Write_State_Machine+0xb4>)
 8004040:	2202      	movs	r2, #2
 8004042:	701a      	strb	r2, [r3, #0]
			break;
 8004044:	e00a      	b.n	800405c <Write_State_Machine+0xa4>
			Custom_OLED_Printf("/4WRITE DONE");
 8004046:	480f      	ldr	r0, [pc, #60]	; (8004084 <Write_State_Machine+0xcc>)
 8004048:	f7ff fb1c 	bl	8003684 <Custom_OLED_Printf>
			doWriting = DO_NOT_WRITING_SIG;
 800404c:	4b09      	ldr	r3, [pc, #36]	; (8004074 <Write_State_Machine+0xbc>)
 800404e:	2201      	movs	r2, #1
 8004050:	701a      	strb	r2, [r3, #0]
			writeState = WRITE_STATE_IDLE;
 8004052:	4b06      	ldr	r3, [pc, #24]	; (800406c <Write_State_Machine+0xb4>)
 8004054:	2200      	movs	r2, #0
 8004056:	701a      	strb	r2, [r3, #0]
			break;
 8004058:	e000      	b.n	800405c <Write_State_Machine+0xa4>
			break;
 800405a:	bf00      	nop
}
 800405c:	bf00      	nop
 800405e:	3708      	adds	r7, #8
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	20001372 	.word	0x20001372
 8004068:	20000005 	.word	0x20000005
 800406c:	20001373 	.word	0x20001373
 8004070:	08006f98 	.word	0x08006f98
 8004074:	20000004 	.word	0x20000004
 8004078:	08006fa8 	.word	0x08006fa8
 800407c:	40004400 	.word	0x40004400
 8004080:	08006fb8 	.word	0x08006fb8
 8004084:	08006fcc 	.word	0x08006fcc

08004088 <UART_Loopback>:





void UART_Loopback() {
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0

	static int i = 0;
	uint8_t writeData = 1;
 800408e:	2301      	movs	r3, #1
 8004090:	71fb      	strb	r3, [r7, #7]
	uint8_t cntlSig = NORMAL_SIG;
 8004092:	2300      	movs	r3, #0
 8004094:	71bb      	strb	r3, [r7, #6]
	uint8_t sw = Custom_Switch_Read();
 8004096:	f7ff fe25 	bl	8003ce4 <Custom_Switch_Read>
 800409a:	4603      	mov	r3, r0
 800409c:	717b      	strb	r3, [r7, #5]


	if (sw == CUSTOM_SW_BOTH) {
 800409e:	797b      	ldrb	r3, [r7, #5]
 80040a0:	2b03      	cmp	r3, #3
 80040a2:	d102      	bne.n	80040aa <UART_Loopback+0x22>
		cntlSig = RESET_SIG;
 80040a4:	2301      	movs	r3, #1
 80040a6:	71bb      	strb	r3, [r7, #6]
 80040a8:	e012      	b.n	80040d0 <UART_Loopback+0x48>
	}

	else if (sw == CUSTOM_SW_1) {
 80040aa:	797b      	ldrb	r3, [r7, #5]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d109      	bne.n	80040c4 <UART_Loopback+0x3c>

		doWriting = DO_WRITING_SIG;
 80040b0:	4b0e      	ldr	r3, [pc, #56]	; (80040ec <UART_Loopback+0x64>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	701a      	strb	r2, [r3, #0]
		writeData = i++;
 80040b6:	4b0e      	ldr	r3, [pc, #56]	; (80040f0 <UART_Loopback+0x68>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	1c5a      	adds	r2, r3, #1
 80040bc:	490c      	ldr	r1, [pc, #48]	; (80040f0 <UART_Loopback+0x68>)
 80040be:	600a      	str	r2, [r1, #0]
 80040c0:	71fb      	strb	r3, [r7, #7]
 80040c2:	e005      	b.n	80040d0 <UART_Loopback+0x48>
	}

	else if (sw == CUSTOM_SW_2) {
 80040c4:	797b      	ldrb	r3, [r7, #5]
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d102      	bne.n	80040d0 <UART_Loopback+0x48>

		doReading = DO_READING_SIG;
 80040ca:	4b0a      	ldr	r3, [pc, #40]	; (80040f4 <UART_Loopback+0x6c>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	701a      	strb	r2, [r3, #0]
	}

	Write_State_Machine((uint8_t)writeData, cntlSig);
 80040d0:	79ba      	ldrb	r2, [r7, #6]
 80040d2:	79fb      	ldrb	r3, [r7, #7]
 80040d4:	4611      	mov	r1, r2
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7ff ff6e 	bl	8003fb8 <Write_State_Machine>
	Read_State_Machine(cntlSig);
 80040dc:	79bb      	ldrb	r3, [r7, #6]
 80040de:	4618      	mov	r0, r3
 80040e0:	f7ff ff08 	bl	8003ef4 <Read_State_Machine>

}
 80040e4:	bf00      	nop
 80040e6:	3708      	adds	r7, #8
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	20000004 	.word	0x20000004
 80040f0:	20001374 	.word	0x20001374
 80040f4:	20000005 	.word	0x20000005

080040f8 <Init>:



void Init() {
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
	/*
	 * STM 보드와 컴퓨터 간 UART 통신을 통해 컴퓨터 터미널로 디버깅할 수 있도록 USART2를 활성화한다.
	 */
	LL_USART_Enable(USART2);
 80040fc:	480a      	ldr	r0, [pc, #40]	; (8004128 <Init+0x30>)
 80040fe:	f7ff fe55 	bl	8003dac <LL_USART_Enable>

	/*
	* 1ms 주기로 동작하는 SysTick을 기화한다. custom_delay.h 파일의 Custom_Delay_Get_SysTick
	* 현재 SvsTick이 초기화된 시점부터 경과한 시간을 구할 수 있다.
	*/
	Custom_Delay_Init_SysTick();
 8004102:	f7ff fecb 	bl	8003e9c <Custom_Delay_Init_SysTick>

	/*
	 * OLED를 사용하기 전에는 Custom_OLED_Init 함수를 호출하여 여러가지 초기화를 수행해야 한다.
	 * 이 함수는 OLED 처음 쓰기 전에 딱 한 번만 호출하면 된다.
	 */
	Custom_OLED_Init();
 8004106:	f7ff f9f7 	bl	80034f8 <Custom_OLED_Init>

	/*
	 * 플래시를 사용하기 전에는 Custom_FileSystem_Load 함수를 호출하여 플래시 정보를 불러와야 한다.
	 * 이 함수는 플래시를 처음 쓰기 전에 딱 한 번만 호출하면 된다.
	 */
	Custom_FileSystem_Load();
 800410a:	f7ff f827 	bl	800315c <Custom_FileSystem_Load>
	 * 다만 특수한 기능들 추가되어있는데, /0이라는 부분이 있으면 첫 번째 줄의 첫 번째 칸으로 돌아가고,
	 * /1이라는 부분이 있으면 두 번째 줄의 첫 번째 칸으로 돌아간다.
	 * 그리고 /r, /g, /b라는 부분이 있으면 각각 문자를 빨강, 초록, 파랑으로 출력한다.
	 * 즉, 아래 예제에서는 첫 번째 줄에 "Hello"를 출력한 후, 두 번째 줄의 첫 번째 칸으로 커서가 이동하고 파란색 글씨로 "ZETIN!"을 쓴다.
	 */
	Custom_OLED_Init();
 800410e:	f7ff f9f3 	bl	80034f8 <Custom_OLED_Init>
	Custom_OLED_Printf("/0Hello, /1/bZETIN!");
 8004112:	4806      	ldr	r0, [pc, #24]	; (800412c <Init+0x34>)
 8004114:	f7ff fab6 	bl	8003684 <Custom_OLED_Printf>
	Custom_Delay_ms(1000);
 8004118:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800411c:	f7ff fead 	bl	8003e7a <Custom_Delay_ms>


	while(1) {

		UART_Loopback();
 8004120:	f7ff ffb2 	bl	8004088 <UART_Loopback>
 8004124:	e7fc      	b.n	8004120 <Init+0x28>
 8004126:	bf00      	nop
 8004128:	40004400 	.word	0x40004400
 800412c:	08006fdc 	.word	0x08006fdc

08004130 <__cvt>:
 8004130:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004134:	ec55 4b10 	vmov	r4, r5, d0
 8004138:	2d00      	cmp	r5, #0
 800413a:	460e      	mov	r6, r1
 800413c:	4619      	mov	r1, r3
 800413e:	462b      	mov	r3, r5
 8004140:	bfbb      	ittet	lt
 8004142:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004146:	461d      	movlt	r5, r3
 8004148:	2300      	movge	r3, #0
 800414a:	232d      	movlt	r3, #45	; 0x2d
 800414c:	700b      	strb	r3, [r1, #0]
 800414e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004150:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004154:	4691      	mov	r9, r2
 8004156:	f023 0820 	bic.w	r8, r3, #32
 800415a:	bfbc      	itt	lt
 800415c:	4622      	movlt	r2, r4
 800415e:	4614      	movlt	r4, r2
 8004160:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004164:	d005      	beq.n	8004172 <__cvt+0x42>
 8004166:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800416a:	d100      	bne.n	800416e <__cvt+0x3e>
 800416c:	3601      	adds	r6, #1
 800416e:	2102      	movs	r1, #2
 8004170:	e000      	b.n	8004174 <__cvt+0x44>
 8004172:	2103      	movs	r1, #3
 8004174:	ab03      	add	r3, sp, #12
 8004176:	9301      	str	r3, [sp, #4]
 8004178:	ab02      	add	r3, sp, #8
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	ec45 4b10 	vmov	d0, r4, r5
 8004180:	4653      	mov	r3, sl
 8004182:	4632      	mov	r2, r6
 8004184:	f000 fde0 	bl	8004d48 <_dtoa_r>
 8004188:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800418c:	4607      	mov	r7, r0
 800418e:	d102      	bne.n	8004196 <__cvt+0x66>
 8004190:	f019 0f01 	tst.w	r9, #1
 8004194:	d022      	beq.n	80041dc <__cvt+0xac>
 8004196:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800419a:	eb07 0906 	add.w	r9, r7, r6
 800419e:	d110      	bne.n	80041c2 <__cvt+0x92>
 80041a0:	783b      	ldrb	r3, [r7, #0]
 80041a2:	2b30      	cmp	r3, #48	; 0x30
 80041a4:	d10a      	bne.n	80041bc <__cvt+0x8c>
 80041a6:	2200      	movs	r2, #0
 80041a8:	2300      	movs	r3, #0
 80041aa:	4620      	mov	r0, r4
 80041ac:	4629      	mov	r1, r5
 80041ae:	f7fc fc93 	bl	8000ad8 <__aeabi_dcmpeq>
 80041b2:	b918      	cbnz	r0, 80041bc <__cvt+0x8c>
 80041b4:	f1c6 0601 	rsb	r6, r6, #1
 80041b8:	f8ca 6000 	str.w	r6, [sl]
 80041bc:	f8da 3000 	ldr.w	r3, [sl]
 80041c0:	4499      	add	r9, r3
 80041c2:	2200      	movs	r2, #0
 80041c4:	2300      	movs	r3, #0
 80041c6:	4620      	mov	r0, r4
 80041c8:	4629      	mov	r1, r5
 80041ca:	f7fc fc85 	bl	8000ad8 <__aeabi_dcmpeq>
 80041ce:	b108      	cbz	r0, 80041d4 <__cvt+0xa4>
 80041d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80041d4:	2230      	movs	r2, #48	; 0x30
 80041d6:	9b03      	ldr	r3, [sp, #12]
 80041d8:	454b      	cmp	r3, r9
 80041da:	d307      	bcc.n	80041ec <__cvt+0xbc>
 80041dc:	9b03      	ldr	r3, [sp, #12]
 80041de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80041e0:	1bdb      	subs	r3, r3, r7
 80041e2:	4638      	mov	r0, r7
 80041e4:	6013      	str	r3, [r2, #0]
 80041e6:	b004      	add	sp, #16
 80041e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041ec:	1c59      	adds	r1, r3, #1
 80041ee:	9103      	str	r1, [sp, #12]
 80041f0:	701a      	strb	r2, [r3, #0]
 80041f2:	e7f0      	b.n	80041d6 <__cvt+0xa6>

080041f4 <__exponent>:
 80041f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041f6:	4603      	mov	r3, r0
 80041f8:	2900      	cmp	r1, #0
 80041fa:	bfb8      	it	lt
 80041fc:	4249      	neglt	r1, r1
 80041fe:	f803 2b02 	strb.w	r2, [r3], #2
 8004202:	bfb4      	ite	lt
 8004204:	222d      	movlt	r2, #45	; 0x2d
 8004206:	222b      	movge	r2, #43	; 0x2b
 8004208:	2909      	cmp	r1, #9
 800420a:	7042      	strb	r2, [r0, #1]
 800420c:	dd2a      	ble.n	8004264 <__exponent+0x70>
 800420e:	f10d 0207 	add.w	r2, sp, #7
 8004212:	4617      	mov	r7, r2
 8004214:	260a      	movs	r6, #10
 8004216:	4694      	mov	ip, r2
 8004218:	fb91 f5f6 	sdiv	r5, r1, r6
 800421c:	fb06 1415 	mls	r4, r6, r5, r1
 8004220:	3430      	adds	r4, #48	; 0x30
 8004222:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004226:	460c      	mov	r4, r1
 8004228:	2c63      	cmp	r4, #99	; 0x63
 800422a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800422e:	4629      	mov	r1, r5
 8004230:	dcf1      	bgt.n	8004216 <__exponent+0x22>
 8004232:	3130      	adds	r1, #48	; 0x30
 8004234:	f1ac 0402 	sub.w	r4, ip, #2
 8004238:	f802 1c01 	strb.w	r1, [r2, #-1]
 800423c:	1c41      	adds	r1, r0, #1
 800423e:	4622      	mov	r2, r4
 8004240:	42ba      	cmp	r2, r7
 8004242:	d30a      	bcc.n	800425a <__exponent+0x66>
 8004244:	f10d 0209 	add.w	r2, sp, #9
 8004248:	eba2 020c 	sub.w	r2, r2, ip
 800424c:	42bc      	cmp	r4, r7
 800424e:	bf88      	it	hi
 8004250:	2200      	movhi	r2, #0
 8004252:	4413      	add	r3, r2
 8004254:	1a18      	subs	r0, r3, r0
 8004256:	b003      	add	sp, #12
 8004258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800425a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800425e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004262:	e7ed      	b.n	8004240 <__exponent+0x4c>
 8004264:	2330      	movs	r3, #48	; 0x30
 8004266:	3130      	adds	r1, #48	; 0x30
 8004268:	7083      	strb	r3, [r0, #2]
 800426a:	70c1      	strb	r1, [r0, #3]
 800426c:	1d03      	adds	r3, r0, #4
 800426e:	e7f1      	b.n	8004254 <__exponent+0x60>

08004270 <_printf_float>:
 8004270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004274:	ed2d 8b02 	vpush	{d8}
 8004278:	b08d      	sub	sp, #52	; 0x34
 800427a:	460c      	mov	r4, r1
 800427c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004280:	4616      	mov	r6, r2
 8004282:	461f      	mov	r7, r3
 8004284:	4605      	mov	r5, r0
 8004286:	f000 fca3 	bl	8004bd0 <_localeconv_r>
 800428a:	f8d0 a000 	ldr.w	sl, [r0]
 800428e:	4650      	mov	r0, sl
 8004290:	f7fb fff6 	bl	8000280 <strlen>
 8004294:	2300      	movs	r3, #0
 8004296:	930a      	str	r3, [sp, #40]	; 0x28
 8004298:	6823      	ldr	r3, [r4, #0]
 800429a:	9305      	str	r3, [sp, #20]
 800429c:	f8d8 3000 	ldr.w	r3, [r8]
 80042a0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80042a4:	3307      	adds	r3, #7
 80042a6:	f023 0307 	bic.w	r3, r3, #7
 80042aa:	f103 0208 	add.w	r2, r3, #8
 80042ae:	f8c8 2000 	str.w	r2, [r8]
 80042b2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80042b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80042ba:	9307      	str	r3, [sp, #28]
 80042bc:	f8cd 8018 	str.w	r8, [sp, #24]
 80042c0:	ee08 0a10 	vmov	s16, r0
 80042c4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80042c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80042cc:	4b9e      	ldr	r3, [pc, #632]	; (8004548 <_printf_float+0x2d8>)
 80042ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80042d2:	f7fc fc33 	bl	8000b3c <__aeabi_dcmpun>
 80042d6:	bb88      	cbnz	r0, 800433c <_printf_float+0xcc>
 80042d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80042dc:	4b9a      	ldr	r3, [pc, #616]	; (8004548 <_printf_float+0x2d8>)
 80042de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80042e2:	f7fc fc0d 	bl	8000b00 <__aeabi_dcmple>
 80042e6:	bb48      	cbnz	r0, 800433c <_printf_float+0xcc>
 80042e8:	2200      	movs	r2, #0
 80042ea:	2300      	movs	r3, #0
 80042ec:	4640      	mov	r0, r8
 80042ee:	4649      	mov	r1, r9
 80042f0:	f7fc fbfc 	bl	8000aec <__aeabi_dcmplt>
 80042f4:	b110      	cbz	r0, 80042fc <_printf_float+0x8c>
 80042f6:	232d      	movs	r3, #45	; 0x2d
 80042f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042fc:	4a93      	ldr	r2, [pc, #588]	; (800454c <_printf_float+0x2dc>)
 80042fe:	4b94      	ldr	r3, [pc, #592]	; (8004550 <_printf_float+0x2e0>)
 8004300:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004304:	bf94      	ite	ls
 8004306:	4690      	movls	r8, r2
 8004308:	4698      	movhi	r8, r3
 800430a:	2303      	movs	r3, #3
 800430c:	6123      	str	r3, [r4, #16]
 800430e:	9b05      	ldr	r3, [sp, #20]
 8004310:	f023 0304 	bic.w	r3, r3, #4
 8004314:	6023      	str	r3, [r4, #0]
 8004316:	f04f 0900 	mov.w	r9, #0
 800431a:	9700      	str	r7, [sp, #0]
 800431c:	4633      	mov	r3, r6
 800431e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004320:	4621      	mov	r1, r4
 8004322:	4628      	mov	r0, r5
 8004324:	f000 f9da 	bl	80046dc <_printf_common>
 8004328:	3001      	adds	r0, #1
 800432a:	f040 8090 	bne.w	800444e <_printf_float+0x1de>
 800432e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004332:	b00d      	add	sp, #52	; 0x34
 8004334:	ecbd 8b02 	vpop	{d8}
 8004338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800433c:	4642      	mov	r2, r8
 800433e:	464b      	mov	r3, r9
 8004340:	4640      	mov	r0, r8
 8004342:	4649      	mov	r1, r9
 8004344:	f7fc fbfa 	bl	8000b3c <__aeabi_dcmpun>
 8004348:	b140      	cbz	r0, 800435c <_printf_float+0xec>
 800434a:	464b      	mov	r3, r9
 800434c:	2b00      	cmp	r3, #0
 800434e:	bfbc      	itt	lt
 8004350:	232d      	movlt	r3, #45	; 0x2d
 8004352:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004356:	4a7f      	ldr	r2, [pc, #508]	; (8004554 <_printf_float+0x2e4>)
 8004358:	4b7f      	ldr	r3, [pc, #508]	; (8004558 <_printf_float+0x2e8>)
 800435a:	e7d1      	b.n	8004300 <_printf_float+0x90>
 800435c:	6863      	ldr	r3, [r4, #4]
 800435e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004362:	9206      	str	r2, [sp, #24]
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	d13f      	bne.n	80043e8 <_printf_float+0x178>
 8004368:	2306      	movs	r3, #6
 800436a:	6063      	str	r3, [r4, #4]
 800436c:	9b05      	ldr	r3, [sp, #20]
 800436e:	6861      	ldr	r1, [r4, #4]
 8004370:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004374:	2300      	movs	r3, #0
 8004376:	9303      	str	r3, [sp, #12]
 8004378:	ab0a      	add	r3, sp, #40	; 0x28
 800437a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800437e:	ab09      	add	r3, sp, #36	; 0x24
 8004380:	ec49 8b10 	vmov	d0, r8, r9
 8004384:	9300      	str	r3, [sp, #0]
 8004386:	6022      	str	r2, [r4, #0]
 8004388:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800438c:	4628      	mov	r0, r5
 800438e:	f7ff fecf 	bl	8004130 <__cvt>
 8004392:	9b06      	ldr	r3, [sp, #24]
 8004394:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004396:	2b47      	cmp	r3, #71	; 0x47
 8004398:	4680      	mov	r8, r0
 800439a:	d108      	bne.n	80043ae <_printf_float+0x13e>
 800439c:	1cc8      	adds	r0, r1, #3
 800439e:	db02      	blt.n	80043a6 <_printf_float+0x136>
 80043a0:	6863      	ldr	r3, [r4, #4]
 80043a2:	4299      	cmp	r1, r3
 80043a4:	dd41      	ble.n	800442a <_printf_float+0x1ba>
 80043a6:	f1ab 0302 	sub.w	r3, fp, #2
 80043aa:	fa5f fb83 	uxtb.w	fp, r3
 80043ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80043b2:	d820      	bhi.n	80043f6 <_printf_float+0x186>
 80043b4:	3901      	subs	r1, #1
 80043b6:	465a      	mov	r2, fp
 80043b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80043bc:	9109      	str	r1, [sp, #36]	; 0x24
 80043be:	f7ff ff19 	bl	80041f4 <__exponent>
 80043c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80043c4:	1813      	adds	r3, r2, r0
 80043c6:	2a01      	cmp	r2, #1
 80043c8:	4681      	mov	r9, r0
 80043ca:	6123      	str	r3, [r4, #16]
 80043cc:	dc02      	bgt.n	80043d4 <_printf_float+0x164>
 80043ce:	6822      	ldr	r2, [r4, #0]
 80043d0:	07d2      	lsls	r2, r2, #31
 80043d2:	d501      	bpl.n	80043d8 <_printf_float+0x168>
 80043d4:	3301      	adds	r3, #1
 80043d6:	6123      	str	r3, [r4, #16]
 80043d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d09c      	beq.n	800431a <_printf_float+0xaa>
 80043e0:	232d      	movs	r3, #45	; 0x2d
 80043e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043e6:	e798      	b.n	800431a <_printf_float+0xaa>
 80043e8:	9a06      	ldr	r2, [sp, #24]
 80043ea:	2a47      	cmp	r2, #71	; 0x47
 80043ec:	d1be      	bne.n	800436c <_printf_float+0xfc>
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1bc      	bne.n	800436c <_printf_float+0xfc>
 80043f2:	2301      	movs	r3, #1
 80043f4:	e7b9      	b.n	800436a <_printf_float+0xfa>
 80043f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80043fa:	d118      	bne.n	800442e <_printf_float+0x1be>
 80043fc:	2900      	cmp	r1, #0
 80043fe:	6863      	ldr	r3, [r4, #4]
 8004400:	dd0b      	ble.n	800441a <_printf_float+0x1aa>
 8004402:	6121      	str	r1, [r4, #16]
 8004404:	b913      	cbnz	r3, 800440c <_printf_float+0x19c>
 8004406:	6822      	ldr	r2, [r4, #0]
 8004408:	07d0      	lsls	r0, r2, #31
 800440a:	d502      	bpl.n	8004412 <_printf_float+0x1a2>
 800440c:	3301      	adds	r3, #1
 800440e:	440b      	add	r3, r1
 8004410:	6123      	str	r3, [r4, #16]
 8004412:	65a1      	str	r1, [r4, #88]	; 0x58
 8004414:	f04f 0900 	mov.w	r9, #0
 8004418:	e7de      	b.n	80043d8 <_printf_float+0x168>
 800441a:	b913      	cbnz	r3, 8004422 <_printf_float+0x1b2>
 800441c:	6822      	ldr	r2, [r4, #0]
 800441e:	07d2      	lsls	r2, r2, #31
 8004420:	d501      	bpl.n	8004426 <_printf_float+0x1b6>
 8004422:	3302      	adds	r3, #2
 8004424:	e7f4      	b.n	8004410 <_printf_float+0x1a0>
 8004426:	2301      	movs	r3, #1
 8004428:	e7f2      	b.n	8004410 <_printf_float+0x1a0>
 800442a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800442e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004430:	4299      	cmp	r1, r3
 8004432:	db05      	blt.n	8004440 <_printf_float+0x1d0>
 8004434:	6823      	ldr	r3, [r4, #0]
 8004436:	6121      	str	r1, [r4, #16]
 8004438:	07d8      	lsls	r0, r3, #31
 800443a:	d5ea      	bpl.n	8004412 <_printf_float+0x1a2>
 800443c:	1c4b      	adds	r3, r1, #1
 800443e:	e7e7      	b.n	8004410 <_printf_float+0x1a0>
 8004440:	2900      	cmp	r1, #0
 8004442:	bfd4      	ite	le
 8004444:	f1c1 0202 	rsble	r2, r1, #2
 8004448:	2201      	movgt	r2, #1
 800444a:	4413      	add	r3, r2
 800444c:	e7e0      	b.n	8004410 <_printf_float+0x1a0>
 800444e:	6823      	ldr	r3, [r4, #0]
 8004450:	055a      	lsls	r2, r3, #21
 8004452:	d407      	bmi.n	8004464 <_printf_float+0x1f4>
 8004454:	6923      	ldr	r3, [r4, #16]
 8004456:	4642      	mov	r2, r8
 8004458:	4631      	mov	r1, r6
 800445a:	4628      	mov	r0, r5
 800445c:	47b8      	blx	r7
 800445e:	3001      	adds	r0, #1
 8004460:	d12c      	bne.n	80044bc <_printf_float+0x24c>
 8004462:	e764      	b.n	800432e <_printf_float+0xbe>
 8004464:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004468:	f240 80e0 	bls.w	800462c <_printf_float+0x3bc>
 800446c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004470:	2200      	movs	r2, #0
 8004472:	2300      	movs	r3, #0
 8004474:	f7fc fb30 	bl	8000ad8 <__aeabi_dcmpeq>
 8004478:	2800      	cmp	r0, #0
 800447a:	d034      	beq.n	80044e6 <_printf_float+0x276>
 800447c:	4a37      	ldr	r2, [pc, #220]	; (800455c <_printf_float+0x2ec>)
 800447e:	2301      	movs	r3, #1
 8004480:	4631      	mov	r1, r6
 8004482:	4628      	mov	r0, r5
 8004484:	47b8      	blx	r7
 8004486:	3001      	adds	r0, #1
 8004488:	f43f af51 	beq.w	800432e <_printf_float+0xbe>
 800448c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004490:	429a      	cmp	r2, r3
 8004492:	db02      	blt.n	800449a <_printf_float+0x22a>
 8004494:	6823      	ldr	r3, [r4, #0]
 8004496:	07d8      	lsls	r0, r3, #31
 8004498:	d510      	bpl.n	80044bc <_printf_float+0x24c>
 800449a:	ee18 3a10 	vmov	r3, s16
 800449e:	4652      	mov	r2, sl
 80044a0:	4631      	mov	r1, r6
 80044a2:	4628      	mov	r0, r5
 80044a4:	47b8      	blx	r7
 80044a6:	3001      	adds	r0, #1
 80044a8:	f43f af41 	beq.w	800432e <_printf_float+0xbe>
 80044ac:	f04f 0800 	mov.w	r8, #0
 80044b0:	f104 091a 	add.w	r9, r4, #26
 80044b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044b6:	3b01      	subs	r3, #1
 80044b8:	4543      	cmp	r3, r8
 80044ba:	dc09      	bgt.n	80044d0 <_printf_float+0x260>
 80044bc:	6823      	ldr	r3, [r4, #0]
 80044be:	079b      	lsls	r3, r3, #30
 80044c0:	f100 8107 	bmi.w	80046d2 <_printf_float+0x462>
 80044c4:	68e0      	ldr	r0, [r4, #12]
 80044c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80044c8:	4298      	cmp	r0, r3
 80044ca:	bfb8      	it	lt
 80044cc:	4618      	movlt	r0, r3
 80044ce:	e730      	b.n	8004332 <_printf_float+0xc2>
 80044d0:	2301      	movs	r3, #1
 80044d2:	464a      	mov	r2, r9
 80044d4:	4631      	mov	r1, r6
 80044d6:	4628      	mov	r0, r5
 80044d8:	47b8      	blx	r7
 80044da:	3001      	adds	r0, #1
 80044dc:	f43f af27 	beq.w	800432e <_printf_float+0xbe>
 80044e0:	f108 0801 	add.w	r8, r8, #1
 80044e4:	e7e6      	b.n	80044b4 <_printf_float+0x244>
 80044e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	dc39      	bgt.n	8004560 <_printf_float+0x2f0>
 80044ec:	4a1b      	ldr	r2, [pc, #108]	; (800455c <_printf_float+0x2ec>)
 80044ee:	2301      	movs	r3, #1
 80044f0:	4631      	mov	r1, r6
 80044f2:	4628      	mov	r0, r5
 80044f4:	47b8      	blx	r7
 80044f6:	3001      	adds	r0, #1
 80044f8:	f43f af19 	beq.w	800432e <_printf_float+0xbe>
 80044fc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004500:	4313      	orrs	r3, r2
 8004502:	d102      	bne.n	800450a <_printf_float+0x29a>
 8004504:	6823      	ldr	r3, [r4, #0]
 8004506:	07d9      	lsls	r1, r3, #31
 8004508:	d5d8      	bpl.n	80044bc <_printf_float+0x24c>
 800450a:	ee18 3a10 	vmov	r3, s16
 800450e:	4652      	mov	r2, sl
 8004510:	4631      	mov	r1, r6
 8004512:	4628      	mov	r0, r5
 8004514:	47b8      	blx	r7
 8004516:	3001      	adds	r0, #1
 8004518:	f43f af09 	beq.w	800432e <_printf_float+0xbe>
 800451c:	f04f 0900 	mov.w	r9, #0
 8004520:	f104 0a1a 	add.w	sl, r4, #26
 8004524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004526:	425b      	negs	r3, r3
 8004528:	454b      	cmp	r3, r9
 800452a:	dc01      	bgt.n	8004530 <_printf_float+0x2c0>
 800452c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800452e:	e792      	b.n	8004456 <_printf_float+0x1e6>
 8004530:	2301      	movs	r3, #1
 8004532:	4652      	mov	r2, sl
 8004534:	4631      	mov	r1, r6
 8004536:	4628      	mov	r0, r5
 8004538:	47b8      	blx	r7
 800453a:	3001      	adds	r0, #1
 800453c:	f43f aef7 	beq.w	800432e <_printf_float+0xbe>
 8004540:	f109 0901 	add.w	r9, r9, #1
 8004544:	e7ee      	b.n	8004524 <_printf_float+0x2b4>
 8004546:	bf00      	nop
 8004548:	7fefffff 	.word	0x7fefffff
 800454c:	08007288 	.word	0x08007288
 8004550:	0800728c 	.word	0x0800728c
 8004554:	08007290 	.word	0x08007290
 8004558:	08007294 	.word	0x08007294
 800455c:	08007298 	.word	0x08007298
 8004560:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004562:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004564:	429a      	cmp	r2, r3
 8004566:	bfa8      	it	ge
 8004568:	461a      	movge	r2, r3
 800456a:	2a00      	cmp	r2, #0
 800456c:	4691      	mov	r9, r2
 800456e:	dc37      	bgt.n	80045e0 <_printf_float+0x370>
 8004570:	f04f 0b00 	mov.w	fp, #0
 8004574:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004578:	f104 021a 	add.w	r2, r4, #26
 800457c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800457e:	9305      	str	r3, [sp, #20]
 8004580:	eba3 0309 	sub.w	r3, r3, r9
 8004584:	455b      	cmp	r3, fp
 8004586:	dc33      	bgt.n	80045f0 <_printf_float+0x380>
 8004588:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800458c:	429a      	cmp	r2, r3
 800458e:	db3b      	blt.n	8004608 <_printf_float+0x398>
 8004590:	6823      	ldr	r3, [r4, #0]
 8004592:	07da      	lsls	r2, r3, #31
 8004594:	d438      	bmi.n	8004608 <_printf_float+0x398>
 8004596:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800459a:	eba2 0903 	sub.w	r9, r2, r3
 800459e:	9b05      	ldr	r3, [sp, #20]
 80045a0:	1ad2      	subs	r2, r2, r3
 80045a2:	4591      	cmp	r9, r2
 80045a4:	bfa8      	it	ge
 80045a6:	4691      	movge	r9, r2
 80045a8:	f1b9 0f00 	cmp.w	r9, #0
 80045ac:	dc35      	bgt.n	800461a <_printf_float+0x3aa>
 80045ae:	f04f 0800 	mov.w	r8, #0
 80045b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80045b6:	f104 0a1a 	add.w	sl, r4, #26
 80045ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045be:	1a9b      	subs	r3, r3, r2
 80045c0:	eba3 0309 	sub.w	r3, r3, r9
 80045c4:	4543      	cmp	r3, r8
 80045c6:	f77f af79 	ble.w	80044bc <_printf_float+0x24c>
 80045ca:	2301      	movs	r3, #1
 80045cc:	4652      	mov	r2, sl
 80045ce:	4631      	mov	r1, r6
 80045d0:	4628      	mov	r0, r5
 80045d2:	47b8      	blx	r7
 80045d4:	3001      	adds	r0, #1
 80045d6:	f43f aeaa 	beq.w	800432e <_printf_float+0xbe>
 80045da:	f108 0801 	add.w	r8, r8, #1
 80045de:	e7ec      	b.n	80045ba <_printf_float+0x34a>
 80045e0:	4613      	mov	r3, r2
 80045e2:	4631      	mov	r1, r6
 80045e4:	4642      	mov	r2, r8
 80045e6:	4628      	mov	r0, r5
 80045e8:	47b8      	blx	r7
 80045ea:	3001      	adds	r0, #1
 80045ec:	d1c0      	bne.n	8004570 <_printf_float+0x300>
 80045ee:	e69e      	b.n	800432e <_printf_float+0xbe>
 80045f0:	2301      	movs	r3, #1
 80045f2:	4631      	mov	r1, r6
 80045f4:	4628      	mov	r0, r5
 80045f6:	9205      	str	r2, [sp, #20]
 80045f8:	47b8      	blx	r7
 80045fa:	3001      	adds	r0, #1
 80045fc:	f43f ae97 	beq.w	800432e <_printf_float+0xbe>
 8004600:	9a05      	ldr	r2, [sp, #20]
 8004602:	f10b 0b01 	add.w	fp, fp, #1
 8004606:	e7b9      	b.n	800457c <_printf_float+0x30c>
 8004608:	ee18 3a10 	vmov	r3, s16
 800460c:	4652      	mov	r2, sl
 800460e:	4631      	mov	r1, r6
 8004610:	4628      	mov	r0, r5
 8004612:	47b8      	blx	r7
 8004614:	3001      	adds	r0, #1
 8004616:	d1be      	bne.n	8004596 <_printf_float+0x326>
 8004618:	e689      	b.n	800432e <_printf_float+0xbe>
 800461a:	9a05      	ldr	r2, [sp, #20]
 800461c:	464b      	mov	r3, r9
 800461e:	4442      	add	r2, r8
 8004620:	4631      	mov	r1, r6
 8004622:	4628      	mov	r0, r5
 8004624:	47b8      	blx	r7
 8004626:	3001      	adds	r0, #1
 8004628:	d1c1      	bne.n	80045ae <_printf_float+0x33e>
 800462a:	e680      	b.n	800432e <_printf_float+0xbe>
 800462c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800462e:	2a01      	cmp	r2, #1
 8004630:	dc01      	bgt.n	8004636 <_printf_float+0x3c6>
 8004632:	07db      	lsls	r3, r3, #31
 8004634:	d53a      	bpl.n	80046ac <_printf_float+0x43c>
 8004636:	2301      	movs	r3, #1
 8004638:	4642      	mov	r2, r8
 800463a:	4631      	mov	r1, r6
 800463c:	4628      	mov	r0, r5
 800463e:	47b8      	blx	r7
 8004640:	3001      	adds	r0, #1
 8004642:	f43f ae74 	beq.w	800432e <_printf_float+0xbe>
 8004646:	ee18 3a10 	vmov	r3, s16
 800464a:	4652      	mov	r2, sl
 800464c:	4631      	mov	r1, r6
 800464e:	4628      	mov	r0, r5
 8004650:	47b8      	blx	r7
 8004652:	3001      	adds	r0, #1
 8004654:	f43f ae6b 	beq.w	800432e <_printf_float+0xbe>
 8004658:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800465c:	2200      	movs	r2, #0
 800465e:	2300      	movs	r3, #0
 8004660:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004664:	f7fc fa38 	bl	8000ad8 <__aeabi_dcmpeq>
 8004668:	b9d8      	cbnz	r0, 80046a2 <_printf_float+0x432>
 800466a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800466e:	f108 0201 	add.w	r2, r8, #1
 8004672:	4631      	mov	r1, r6
 8004674:	4628      	mov	r0, r5
 8004676:	47b8      	blx	r7
 8004678:	3001      	adds	r0, #1
 800467a:	d10e      	bne.n	800469a <_printf_float+0x42a>
 800467c:	e657      	b.n	800432e <_printf_float+0xbe>
 800467e:	2301      	movs	r3, #1
 8004680:	4652      	mov	r2, sl
 8004682:	4631      	mov	r1, r6
 8004684:	4628      	mov	r0, r5
 8004686:	47b8      	blx	r7
 8004688:	3001      	adds	r0, #1
 800468a:	f43f ae50 	beq.w	800432e <_printf_float+0xbe>
 800468e:	f108 0801 	add.w	r8, r8, #1
 8004692:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004694:	3b01      	subs	r3, #1
 8004696:	4543      	cmp	r3, r8
 8004698:	dcf1      	bgt.n	800467e <_printf_float+0x40e>
 800469a:	464b      	mov	r3, r9
 800469c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80046a0:	e6da      	b.n	8004458 <_printf_float+0x1e8>
 80046a2:	f04f 0800 	mov.w	r8, #0
 80046a6:	f104 0a1a 	add.w	sl, r4, #26
 80046aa:	e7f2      	b.n	8004692 <_printf_float+0x422>
 80046ac:	2301      	movs	r3, #1
 80046ae:	4642      	mov	r2, r8
 80046b0:	e7df      	b.n	8004672 <_printf_float+0x402>
 80046b2:	2301      	movs	r3, #1
 80046b4:	464a      	mov	r2, r9
 80046b6:	4631      	mov	r1, r6
 80046b8:	4628      	mov	r0, r5
 80046ba:	47b8      	blx	r7
 80046bc:	3001      	adds	r0, #1
 80046be:	f43f ae36 	beq.w	800432e <_printf_float+0xbe>
 80046c2:	f108 0801 	add.w	r8, r8, #1
 80046c6:	68e3      	ldr	r3, [r4, #12]
 80046c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80046ca:	1a5b      	subs	r3, r3, r1
 80046cc:	4543      	cmp	r3, r8
 80046ce:	dcf0      	bgt.n	80046b2 <_printf_float+0x442>
 80046d0:	e6f8      	b.n	80044c4 <_printf_float+0x254>
 80046d2:	f04f 0800 	mov.w	r8, #0
 80046d6:	f104 0919 	add.w	r9, r4, #25
 80046da:	e7f4      	b.n	80046c6 <_printf_float+0x456>

080046dc <_printf_common>:
 80046dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046e0:	4616      	mov	r6, r2
 80046e2:	4699      	mov	r9, r3
 80046e4:	688a      	ldr	r2, [r1, #8]
 80046e6:	690b      	ldr	r3, [r1, #16]
 80046e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80046ec:	4293      	cmp	r3, r2
 80046ee:	bfb8      	it	lt
 80046f0:	4613      	movlt	r3, r2
 80046f2:	6033      	str	r3, [r6, #0]
 80046f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80046f8:	4607      	mov	r7, r0
 80046fa:	460c      	mov	r4, r1
 80046fc:	b10a      	cbz	r2, 8004702 <_printf_common+0x26>
 80046fe:	3301      	adds	r3, #1
 8004700:	6033      	str	r3, [r6, #0]
 8004702:	6823      	ldr	r3, [r4, #0]
 8004704:	0699      	lsls	r1, r3, #26
 8004706:	bf42      	ittt	mi
 8004708:	6833      	ldrmi	r3, [r6, #0]
 800470a:	3302      	addmi	r3, #2
 800470c:	6033      	strmi	r3, [r6, #0]
 800470e:	6825      	ldr	r5, [r4, #0]
 8004710:	f015 0506 	ands.w	r5, r5, #6
 8004714:	d106      	bne.n	8004724 <_printf_common+0x48>
 8004716:	f104 0a19 	add.w	sl, r4, #25
 800471a:	68e3      	ldr	r3, [r4, #12]
 800471c:	6832      	ldr	r2, [r6, #0]
 800471e:	1a9b      	subs	r3, r3, r2
 8004720:	42ab      	cmp	r3, r5
 8004722:	dc26      	bgt.n	8004772 <_printf_common+0x96>
 8004724:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004728:	1e13      	subs	r3, r2, #0
 800472a:	6822      	ldr	r2, [r4, #0]
 800472c:	bf18      	it	ne
 800472e:	2301      	movne	r3, #1
 8004730:	0692      	lsls	r2, r2, #26
 8004732:	d42b      	bmi.n	800478c <_printf_common+0xb0>
 8004734:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004738:	4649      	mov	r1, r9
 800473a:	4638      	mov	r0, r7
 800473c:	47c0      	blx	r8
 800473e:	3001      	adds	r0, #1
 8004740:	d01e      	beq.n	8004780 <_printf_common+0xa4>
 8004742:	6823      	ldr	r3, [r4, #0]
 8004744:	6922      	ldr	r2, [r4, #16]
 8004746:	f003 0306 	and.w	r3, r3, #6
 800474a:	2b04      	cmp	r3, #4
 800474c:	bf02      	ittt	eq
 800474e:	68e5      	ldreq	r5, [r4, #12]
 8004750:	6833      	ldreq	r3, [r6, #0]
 8004752:	1aed      	subeq	r5, r5, r3
 8004754:	68a3      	ldr	r3, [r4, #8]
 8004756:	bf0c      	ite	eq
 8004758:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800475c:	2500      	movne	r5, #0
 800475e:	4293      	cmp	r3, r2
 8004760:	bfc4      	itt	gt
 8004762:	1a9b      	subgt	r3, r3, r2
 8004764:	18ed      	addgt	r5, r5, r3
 8004766:	2600      	movs	r6, #0
 8004768:	341a      	adds	r4, #26
 800476a:	42b5      	cmp	r5, r6
 800476c:	d11a      	bne.n	80047a4 <_printf_common+0xc8>
 800476e:	2000      	movs	r0, #0
 8004770:	e008      	b.n	8004784 <_printf_common+0xa8>
 8004772:	2301      	movs	r3, #1
 8004774:	4652      	mov	r2, sl
 8004776:	4649      	mov	r1, r9
 8004778:	4638      	mov	r0, r7
 800477a:	47c0      	blx	r8
 800477c:	3001      	adds	r0, #1
 800477e:	d103      	bne.n	8004788 <_printf_common+0xac>
 8004780:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004788:	3501      	adds	r5, #1
 800478a:	e7c6      	b.n	800471a <_printf_common+0x3e>
 800478c:	18e1      	adds	r1, r4, r3
 800478e:	1c5a      	adds	r2, r3, #1
 8004790:	2030      	movs	r0, #48	; 0x30
 8004792:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004796:	4422      	add	r2, r4
 8004798:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800479c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80047a0:	3302      	adds	r3, #2
 80047a2:	e7c7      	b.n	8004734 <_printf_common+0x58>
 80047a4:	2301      	movs	r3, #1
 80047a6:	4622      	mov	r2, r4
 80047a8:	4649      	mov	r1, r9
 80047aa:	4638      	mov	r0, r7
 80047ac:	47c0      	blx	r8
 80047ae:	3001      	adds	r0, #1
 80047b0:	d0e6      	beq.n	8004780 <_printf_common+0xa4>
 80047b2:	3601      	adds	r6, #1
 80047b4:	e7d9      	b.n	800476a <_printf_common+0x8e>
	...

080047b8 <_printf_i>:
 80047b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047bc:	7e0f      	ldrb	r7, [r1, #24]
 80047be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80047c0:	2f78      	cmp	r7, #120	; 0x78
 80047c2:	4691      	mov	r9, r2
 80047c4:	4680      	mov	r8, r0
 80047c6:	460c      	mov	r4, r1
 80047c8:	469a      	mov	sl, r3
 80047ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80047ce:	d807      	bhi.n	80047e0 <_printf_i+0x28>
 80047d0:	2f62      	cmp	r7, #98	; 0x62
 80047d2:	d80a      	bhi.n	80047ea <_printf_i+0x32>
 80047d4:	2f00      	cmp	r7, #0
 80047d6:	f000 80d4 	beq.w	8004982 <_printf_i+0x1ca>
 80047da:	2f58      	cmp	r7, #88	; 0x58
 80047dc:	f000 80c0 	beq.w	8004960 <_printf_i+0x1a8>
 80047e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80047e8:	e03a      	b.n	8004860 <_printf_i+0xa8>
 80047ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80047ee:	2b15      	cmp	r3, #21
 80047f0:	d8f6      	bhi.n	80047e0 <_printf_i+0x28>
 80047f2:	a101      	add	r1, pc, #4	; (adr r1, 80047f8 <_printf_i+0x40>)
 80047f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047f8:	08004851 	.word	0x08004851
 80047fc:	08004865 	.word	0x08004865
 8004800:	080047e1 	.word	0x080047e1
 8004804:	080047e1 	.word	0x080047e1
 8004808:	080047e1 	.word	0x080047e1
 800480c:	080047e1 	.word	0x080047e1
 8004810:	08004865 	.word	0x08004865
 8004814:	080047e1 	.word	0x080047e1
 8004818:	080047e1 	.word	0x080047e1
 800481c:	080047e1 	.word	0x080047e1
 8004820:	080047e1 	.word	0x080047e1
 8004824:	08004969 	.word	0x08004969
 8004828:	08004891 	.word	0x08004891
 800482c:	08004923 	.word	0x08004923
 8004830:	080047e1 	.word	0x080047e1
 8004834:	080047e1 	.word	0x080047e1
 8004838:	0800498b 	.word	0x0800498b
 800483c:	080047e1 	.word	0x080047e1
 8004840:	08004891 	.word	0x08004891
 8004844:	080047e1 	.word	0x080047e1
 8004848:	080047e1 	.word	0x080047e1
 800484c:	0800492b 	.word	0x0800492b
 8004850:	682b      	ldr	r3, [r5, #0]
 8004852:	1d1a      	adds	r2, r3, #4
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	602a      	str	r2, [r5, #0]
 8004858:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800485c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004860:	2301      	movs	r3, #1
 8004862:	e09f      	b.n	80049a4 <_printf_i+0x1ec>
 8004864:	6820      	ldr	r0, [r4, #0]
 8004866:	682b      	ldr	r3, [r5, #0]
 8004868:	0607      	lsls	r7, r0, #24
 800486a:	f103 0104 	add.w	r1, r3, #4
 800486e:	6029      	str	r1, [r5, #0]
 8004870:	d501      	bpl.n	8004876 <_printf_i+0xbe>
 8004872:	681e      	ldr	r6, [r3, #0]
 8004874:	e003      	b.n	800487e <_printf_i+0xc6>
 8004876:	0646      	lsls	r6, r0, #25
 8004878:	d5fb      	bpl.n	8004872 <_printf_i+0xba>
 800487a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800487e:	2e00      	cmp	r6, #0
 8004880:	da03      	bge.n	800488a <_printf_i+0xd2>
 8004882:	232d      	movs	r3, #45	; 0x2d
 8004884:	4276      	negs	r6, r6
 8004886:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800488a:	485a      	ldr	r0, [pc, #360]	; (80049f4 <_printf_i+0x23c>)
 800488c:	230a      	movs	r3, #10
 800488e:	e012      	b.n	80048b6 <_printf_i+0xfe>
 8004890:	682b      	ldr	r3, [r5, #0]
 8004892:	6820      	ldr	r0, [r4, #0]
 8004894:	1d19      	adds	r1, r3, #4
 8004896:	6029      	str	r1, [r5, #0]
 8004898:	0605      	lsls	r5, r0, #24
 800489a:	d501      	bpl.n	80048a0 <_printf_i+0xe8>
 800489c:	681e      	ldr	r6, [r3, #0]
 800489e:	e002      	b.n	80048a6 <_printf_i+0xee>
 80048a0:	0641      	lsls	r1, r0, #25
 80048a2:	d5fb      	bpl.n	800489c <_printf_i+0xe4>
 80048a4:	881e      	ldrh	r6, [r3, #0]
 80048a6:	4853      	ldr	r0, [pc, #332]	; (80049f4 <_printf_i+0x23c>)
 80048a8:	2f6f      	cmp	r7, #111	; 0x6f
 80048aa:	bf0c      	ite	eq
 80048ac:	2308      	moveq	r3, #8
 80048ae:	230a      	movne	r3, #10
 80048b0:	2100      	movs	r1, #0
 80048b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048b6:	6865      	ldr	r5, [r4, #4]
 80048b8:	60a5      	str	r5, [r4, #8]
 80048ba:	2d00      	cmp	r5, #0
 80048bc:	bfa2      	ittt	ge
 80048be:	6821      	ldrge	r1, [r4, #0]
 80048c0:	f021 0104 	bicge.w	r1, r1, #4
 80048c4:	6021      	strge	r1, [r4, #0]
 80048c6:	b90e      	cbnz	r6, 80048cc <_printf_i+0x114>
 80048c8:	2d00      	cmp	r5, #0
 80048ca:	d04b      	beq.n	8004964 <_printf_i+0x1ac>
 80048cc:	4615      	mov	r5, r2
 80048ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80048d2:	fb03 6711 	mls	r7, r3, r1, r6
 80048d6:	5dc7      	ldrb	r7, [r0, r7]
 80048d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80048dc:	4637      	mov	r7, r6
 80048de:	42bb      	cmp	r3, r7
 80048e0:	460e      	mov	r6, r1
 80048e2:	d9f4      	bls.n	80048ce <_printf_i+0x116>
 80048e4:	2b08      	cmp	r3, #8
 80048e6:	d10b      	bne.n	8004900 <_printf_i+0x148>
 80048e8:	6823      	ldr	r3, [r4, #0]
 80048ea:	07de      	lsls	r6, r3, #31
 80048ec:	d508      	bpl.n	8004900 <_printf_i+0x148>
 80048ee:	6923      	ldr	r3, [r4, #16]
 80048f0:	6861      	ldr	r1, [r4, #4]
 80048f2:	4299      	cmp	r1, r3
 80048f4:	bfde      	ittt	le
 80048f6:	2330      	movle	r3, #48	; 0x30
 80048f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80048fc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004900:	1b52      	subs	r2, r2, r5
 8004902:	6122      	str	r2, [r4, #16]
 8004904:	f8cd a000 	str.w	sl, [sp]
 8004908:	464b      	mov	r3, r9
 800490a:	aa03      	add	r2, sp, #12
 800490c:	4621      	mov	r1, r4
 800490e:	4640      	mov	r0, r8
 8004910:	f7ff fee4 	bl	80046dc <_printf_common>
 8004914:	3001      	adds	r0, #1
 8004916:	d14a      	bne.n	80049ae <_printf_i+0x1f6>
 8004918:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800491c:	b004      	add	sp, #16
 800491e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004922:	6823      	ldr	r3, [r4, #0]
 8004924:	f043 0320 	orr.w	r3, r3, #32
 8004928:	6023      	str	r3, [r4, #0]
 800492a:	4833      	ldr	r0, [pc, #204]	; (80049f8 <_printf_i+0x240>)
 800492c:	2778      	movs	r7, #120	; 0x78
 800492e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004932:	6823      	ldr	r3, [r4, #0]
 8004934:	6829      	ldr	r1, [r5, #0]
 8004936:	061f      	lsls	r7, r3, #24
 8004938:	f851 6b04 	ldr.w	r6, [r1], #4
 800493c:	d402      	bmi.n	8004944 <_printf_i+0x18c>
 800493e:	065f      	lsls	r7, r3, #25
 8004940:	bf48      	it	mi
 8004942:	b2b6      	uxthmi	r6, r6
 8004944:	07df      	lsls	r7, r3, #31
 8004946:	bf48      	it	mi
 8004948:	f043 0320 	orrmi.w	r3, r3, #32
 800494c:	6029      	str	r1, [r5, #0]
 800494e:	bf48      	it	mi
 8004950:	6023      	strmi	r3, [r4, #0]
 8004952:	b91e      	cbnz	r6, 800495c <_printf_i+0x1a4>
 8004954:	6823      	ldr	r3, [r4, #0]
 8004956:	f023 0320 	bic.w	r3, r3, #32
 800495a:	6023      	str	r3, [r4, #0]
 800495c:	2310      	movs	r3, #16
 800495e:	e7a7      	b.n	80048b0 <_printf_i+0xf8>
 8004960:	4824      	ldr	r0, [pc, #144]	; (80049f4 <_printf_i+0x23c>)
 8004962:	e7e4      	b.n	800492e <_printf_i+0x176>
 8004964:	4615      	mov	r5, r2
 8004966:	e7bd      	b.n	80048e4 <_printf_i+0x12c>
 8004968:	682b      	ldr	r3, [r5, #0]
 800496a:	6826      	ldr	r6, [r4, #0]
 800496c:	6961      	ldr	r1, [r4, #20]
 800496e:	1d18      	adds	r0, r3, #4
 8004970:	6028      	str	r0, [r5, #0]
 8004972:	0635      	lsls	r5, r6, #24
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	d501      	bpl.n	800497c <_printf_i+0x1c4>
 8004978:	6019      	str	r1, [r3, #0]
 800497a:	e002      	b.n	8004982 <_printf_i+0x1ca>
 800497c:	0670      	lsls	r0, r6, #25
 800497e:	d5fb      	bpl.n	8004978 <_printf_i+0x1c0>
 8004980:	8019      	strh	r1, [r3, #0]
 8004982:	2300      	movs	r3, #0
 8004984:	6123      	str	r3, [r4, #16]
 8004986:	4615      	mov	r5, r2
 8004988:	e7bc      	b.n	8004904 <_printf_i+0x14c>
 800498a:	682b      	ldr	r3, [r5, #0]
 800498c:	1d1a      	adds	r2, r3, #4
 800498e:	602a      	str	r2, [r5, #0]
 8004990:	681d      	ldr	r5, [r3, #0]
 8004992:	6862      	ldr	r2, [r4, #4]
 8004994:	2100      	movs	r1, #0
 8004996:	4628      	mov	r0, r5
 8004998:	f7fb fc22 	bl	80001e0 <memchr>
 800499c:	b108      	cbz	r0, 80049a2 <_printf_i+0x1ea>
 800499e:	1b40      	subs	r0, r0, r5
 80049a0:	6060      	str	r0, [r4, #4]
 80049a2:	6863      	ldr	r3, [r4, #4]
 80049a4:	6123      	str	r3, [r4, #16]
 80049a6:	2300      	movs	r3, #0
 80049a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049ac:	e7aa      	b.n	8004904 <_printf_i+0x14c>
 80049ae:	6923      	ldr	r3, [r4, #16]
 80049b0:	462a      	mov	r2, r5
 80049b2:	4649      	mov	r1, r9
 80049b4:	4640      	mov	r0, r8
 80049b6:	47d0      	blx	sl
 80049b8:	3001      	adds	r0, #1
 80049ba:	d0ad      	beq.n	8004918 <_printf_i+0x160>
 80049bc:	6823      	ldr	r3, [r4, #0]
 80049be:	079b      	lsls	r3, r3, #30
 80049c0:	d413      	bmi.n	80049ea <_printf_i+0x232>
 80049c2:	68e0      	ldr	r0, [r4, #12]
 80049c4:	9b03      	ldr	r3, [sp, #12]
 80049c6:	4298      	cmp	r0, r3
 80049c8:	bfb8      	it	lt
 80049ca:	4618      	movlt	r0, r3
 80049cc:	e7a6      	b.n	800491c <_printf_i+0x164>
 80049ce:	2301      	movs	r3, #1
 80049d0:	4632      	mov	r2, r6
 80049d2:	4649      	mov	r1, r9
 80049d4:	4640      	mov	r0, r8
 80049d6:	47d0      	blx	sl
 80049d8:	3001      	adds	r0, #1
 80049da:	d09d      	beq.n	8004918 <_printf_i+0x160>
 80049dc:	3501      	adds	r5, #1
 80049de:	68e3      	ldr	r3, [r4, #12]
 80049e0:	9903      	ldr	r1, [sp, #12]
 80049e2:	1a5b      	subs	r3, r3, r1
 80049e4:	42ab      	cmp	r3, r5
 80049e6:	dcf2      	bgt.n	80049ce <_printf_i+0x216>
 80049e8:	e7eb      	b.n	80049c2 <_printf_i+0x20a>
 80049ea:	2500      	movs	r5, #0
 80049ec:	f104 0619 	add.w	r6, r4, #25
 80049f0:	e7f5      	b.n	80049de <_printf_i+0x226>
 80049f2:	bf00      	nop
 80049f4:	0800729a 	.word	0x0800729a
 80049f8:	080072ab 	.word	0x080072ab

080049fc <std>:
 80049fc:	2300      	movs	r3, #0
 80049fe:	b510      	push	{r4, lr}
 8004a00:	4604      	mov	r4, r0
 8004a02:	e9c0 3300 	strd	r3, r3, [r0]
 8004a06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a0a:	6083      	str	r3, [r0, #8]
 8004a0c:	8181      	strh	r1, [r0, #12]
 8004a0e:	6643      	str	r3, [r0, #100]	; 0x64
 8004a10:	81c2      	strh	r2, [r0, #14]
 8004a12:	6183      	str	r3, [r0, #24]
 8004a14:	4619      	mov	r1, r3
 8004a16:	2208      	movs	r2, #8
 8004a18:	305c      	adds	r0, #92	; 0x5c
 8004a1a:	f000 f8d1 	bl	8004bc0 <memset>
 8004a1e:	4b0d      	ldr	r3, [pc, #52]	; (8004a54 <std+0x58>)
 8004a20:	6263      	str	r3, [r4, #36]	; 0x24
 8004a22:	4b0d      	ldr	r3, [pc, #52]	; (8004a58 <std+0x5c>)
 8004a24:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a26:	4b0d      	ldr	r3, [pc, #52]	; (8004a5c <std+0x60>)
 8004a28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a2a:	4b0d      	ldr	r3, [pc, #52]	; (8004a60 <std+0x64>)
 8004a2c:	6323      	str	r3, [r4, #48]	; 0x30
 8004a2e:	4b0d      	ldr	r3, [pc, #52]	; (8004a64 <std+0x68>)
 8004a30:	6224      	str	r4, [r4, #32]
 8004a32:	429c      	cmp	r4, r3
 8004a34:	d006      	beq.n	8004a44 <std+0x48>
 8004a36:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004a3a:	4294      	cmp	r4, r2
 8004a3c:	d002      	beq.n	8004a44 <std+0x48>
 8004a3e:	33d0      	adds	r3, #208	; 0xd0
 8004a40:	429c      	cmp	r4, r3
 8004a42:	d105      	bne.n	8004a50 <std+0x54>
 8004a44:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a4c:	f000 b8ee 	b.w	8004c2c <__retarget_lock_init_recursive>
 8004a50:	bd10      	pop	{r4, pc}
 8004a52:	bf00      	nop
 8004a54:	08006599 	.word	0x08006599
 8004a58:	080065bb 	.word	0x080065bb
 8004a5c:	080065f3 	.word	0x080065f3
 8004a60:	08006617 	.word	0x08006617
 8004a64:	20001378 	.word	0x20001378

08004a68 <stdio_exit_handler>:
 8004a68:	4a02      	ldr	r2, [pc, #8]	; (8004a74 <stdio_exit_handler+0xc>)
 8004a6a:	4903      	ldr	r1, [pc, #12]	; (8004a78 <stdio_exit_handler+0x10>)
 8004a6c:	4803      	ldr	r0, [pc, #12]	; (8004a7c <stdio_exit_handler+0x14>)
 8004a6e:	f000 b869 	b.w	8004b44 <_fwalk_sglue>
 8004a72:	bf00      	nop
 8004a74:	20000008 	.word	0x20000008
 8004a78:	08005e39 	.word	0x08005e39
 8004a7c:	20000014 	.word	0x20000014

08004a80 <cleanup_stdio>:
 8004a80:	6841      	ldr	r1, [r0, #4]
 8004a82:	4b0c      	ldr	r3, [pc, #48]	; (8004ab4 <cleanup_stdio+0x34>)
 8004a84:	4299      	cmp	r1, r3
 8004a86:	b510      	push	{r4, lr}
 8004a88:	4604      	mov	r4, r0
 8004a8a:	d001      	beq.n	8004a90 <cleanup_stdio+0x10>
 8004a8c:	f001 f9d4 	bl	8005e38 <_fflush_r>
 8004a90:	68a1      	ldr	r1, [r4, #8]
 8004a92:	4b09      	ldr	r3, [pc, #36]	; (8004ab8 <cleanup_stdio+0x38>)
 8004a94:	4299      	cmp	r1, r3
 8004a96:	d002      	beq.n	8004a9e <cleanup_stdio+0x1e>
 8004a98:	4620      	mov	r0, r4
 8004a9a:	f001 f9cd 	bl	8005e38 <_fflush_r>
 8004a9e:	68e1      	ldr	r1, [r4, #12]
 8004aa0:	4b06      	ldr	r3, [pc, #24]	; (8004abc <cleanup_stdio+0x3c>)
 8004aa2:	4299      	cmp	r1, r3
 8004aa4:	d004      	beq.n	8004ab0 <cleanup_stdio+0x30>
 8004aa6:	4620      	mov	r0, r4
 8004aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004aac:	f001 b9c4 	b.w	8005e38 <_fflush_r>
 8004ab0:	bd10      	pop	{r4, pc}
 8004ab2:	bf00      	nop
 8004ab4:	20001378 	.word	0x20001378
 8004ab8:	200013e0 	.word	0x200013e0
 8004abc:	20001448 	.word	0x20001448

08004ac0 <global_stdio_init.part.0>:
 8004ac0:	b510      	push	{r4, lr}
 8004ac2:	4b0b      	ldr	r3, [pc, #44]	; (8004af0 <global_stdio_init.part.0+0x30>)
 8004ac4:	4c0b      	ldr	r4, [pc, #44]	; (8004af4 <global_stdio_init.part.0+0x34>)
 8004ac6:	4a0c      	ldr	r2, [pc, #48]	; (8004af8 <global_stdio_init.part.0+0x38>)
 8004ac8:	601a      	str	r2, [r3, #0]
 8004aca:	4620      	mov	r0, r4
 8004acc:	2200      	movs	r2, #0
 8004ace:	2104      	movs	r1, #4
 8004ad0:	f7ff ff94 	bl	80049fc <std>
 8004ad4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004ad8:	2201      	movs	r2, #1
 8004ada:	2109      	movs	r1, #9
 8004adc:	f7ff ff8e 	bl	80049fc <std>
 8004ae0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004ae4:	2202      	movs	r2, #2
 8004ae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004aea:	2112      	movs	r1, #18
 8004aec:	f7ff bf86 	b.w	80049fc <std>
 8004af0:	200014b0 	.word	0x200014b0
 8004af4:	20001378 	.word	0x20001378
 8004af8:	08004a69 	.word	0x08004a69

08004afc <__sfp_lock_acquire>:
 8004afc:	4801      	ldr	r0, [pc, #4]	; (8004b04 <__sfp_lock_acquire+0x8>)
 8004afe:	f000 b896 	b.w	8004c2e <__retarget_lock_acquire_recursive>
 8004b02:	bf00      	nop
 8004b04:	200014b5 	.word	0x200014b5

08004b08 <__sfp_lock_release>:
 8004b08:	4801      	ldr	r0, [pc, #4]	; (8004b10 <__sfp_lock_release+0x8>)
 8004b0a:	f000 b891 	b.w	8004c30 <__retarget_lock_release_recursive>
 8004b0e:	bf00      	nop
 8004b10:	200014b5 	.word	0x200014b5

08004b14 <__sinit>:
 8004b14:	b510      	push	{r4, lr}
 8004b16:	4604      	mov	r4, r0
 8004b18:	f7ff fff0 	bl	8004afc <__sfp_lock_acquire>
 8004b1c:	6a23      	ldr	r3, [r4, #32]
 8004b1e:	b11b      	cbz	r3, 8004b28 <__sinit+0x14>
 8004b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b24:	f7ff bff0 	b.w	8004b08 <__sfp_lock_release>
 8004b28:	4b04      	ldr	r3, [pc, #16]	; (8004b3c <__sinit+0x28>)
 8004b2a:	6223      	str	r3, [r4, #32]
 8004b2c:	4b04      	ldr	r3, [pc, #16]	; (8004b40 <__sinit+0x2c>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1f5      	bne.n	8004b20 <__sinit+0xc>
 8004b34:	f7ff ffc4 	bl	8004ac0 <global_stdio_init.part.0>
 8004b38:	e7f2      	b.n	8004b20 <__sinit+0xc>
 8004b3a:	bf00      	nop
 8004b3c:	08004a81 	.word	0x08004a81
 8004b40:	200014b0 	.word	0x200014b0

08004b44 <_fwalk_sglue>:
 8004b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b48:	4607      	mov	r7, r0
 8004b4a:	4688      	mov	r8, r1
 8004b4c:	4614      	mov	r4, r2
 8004b4e:	2600      	movs	r6, #0
 8004b50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b54:	f1b9 0901 	subs.w	r9, r9, #1
 8004b58:	d505      	bpl.n	8004b66 <_fwalk_sglue+0x22>
 8004b5a:	6824      	ldr	r4, [r4, #0]
 8004b5c:	2c00      	cmp	r4, #0
 8004b5e:	d1f7      	bne.n	8004b50 <_fwalk_sglue+0xc>
 8004b60:	4630      	mov	r0, r6
 8004b62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b66:	89ab      	ldrh	r3, [r5, #12]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d907      	bls.n	8004b7c <_fwalk_sglue+0x38>
 8004b6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b70:	3301      	adds	r3, #1
 8004b72:	d003      	beq.n	8004b7c <_fwalk_sglue+0x38>
 8004b74:	4629      	mov	r1, r5
 8004b76:	4638      	mov	r0, r7
 8004b78:	47c0      	blx	r8
 8004b7a:	4306      	orrs	r6, r0
 8004b7c:	3568      	adds	r5, #104	; 0x68
 8004b7e:	e7e9      	b.n	8004b54 <_fwalk_sglue+0x10>

08004b80 <_vsiprintf_r>:
 8004b80:	b500      	push	{lr}
 8004b82:	b09b      	sub	sp, #108	; 0x6c
 8004b84:	9100      	str	r1, [sp, #0]
 8004b86:	9104      	str	r1, [sp, #16]
 8004b88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b8c:	9105      	str	r1, [sp, #20]
 8004b8e:	9102      	str	r1, [sp, #8]
 8004b90:	4905      	ldr	r1, [pc, #20]	; (8004ba8 <_vsiprintf_r+0x28>)
 8004b92:	9103      	str	r1, [sp, #12]
 8004b94:	4669      	mov	r1, sp
 8004b96:	f000 ff23 	bl	80059e0 <_svfiprintf_r>
 8004b9a:	9b00      	ldr	r3, [sp, #0]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	701a      	strb	r2, [r3, #0]
 8004ba0:	b01b      	add	sp, #108	; 0x6c
 8004ba2:	f85d fb04 	ldr.w	pc, [sp], #4
 8004ba6:	bf00      	nop
 8004ba8:	ffff0208 	.word	0xffff0208

08004bac <vsiprintf>:
 8004bac:	4613      	mov	r3, r2
 8004bae:	460a      	mov	r2, r1
 8004bb0:	4601      	mov	r1, r0
 8004bb2:	4802      	ldr	r0, [pc, #8]	; (8004bbc <vsiprintf+0x10>)
 8004bb4:	6800      	ldr	r0, [r0, #0]
 8004bb6:	f7ff bfe3 	b.w	8004b80 <_vsiprintf_r>
 8004bba:	bf00      	nop
 8004bbc:	20000060 	.word	0x20000060

08004bc0 <memset>:
 8004bc0:	4402      	add	r2, r0
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d100      	bne.n	8004bca <memset+0xa>
 8004bc8:	4770      	bx	lr
 8004bca:	f803 1b01 	strb.w	r1, [r3], #1
 8004bce:	e7f9      	b.n	8004bc4 <memset+0x4>

08004bd0 <_localeconv_r>:
 8004bd0:	4800      	ldr	r0, [pc, #0]	; (8004bd4 <_localeconv_r+0x4>)
 8004bd2:	4770      	bx	lr
 8004bd4:	20000154 	.word	0x20000154

08004bd8 <__errno>:
 8004bd8:	4b01      	ldr	r3, [pc, #4]	; (8004be0 <__errno+0x8>)
 8004bda:	6818      	ldr	r0, [r3, #0]
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	20000060 	.word	0x20000060

08004be4 <__libc_init_array>:
 8004be4:	b570      	push	{r4, r5, r6, lr}
 8004be6:	4d0d      	ldr	r5, [pc, #52]	; (8004c1c <__libc_init_array+0x38>)
 8004be8:	4c0d      	ldr	r4, [pc, #52]	; (8004c20 <__libc_init_array+0x3c>)
 8004bea:	1b64      	subs	r4, r4, r5
 8004bec:	10a4      	asrs	r4, r4, #2
 8004bee:	2600      	movs	r6, #0
 8004bf0:	42a6      	cmp	r6, r4
 8004bf2:	d109      	bne.n	8004c08 <__libc_init_array+0x24>
 8004bf4:	4d0b      	ldr	r5, [pc, #44]	; (8004c24 <__libc_init_array+0x40>)
 8004bf6:	4c0c      	ldr	r4, [pc, #48]	; (8004c28 <__libc_init_array+0x44>)
 8004bf8:	f002 f920 	bl	8006e3c <_init>
 8004bfc:	1b64      	subs	r4, r4, r5
 8004bfe:	10a4      	asrs	r4, r4, #2
 8004c00:	2600      	movs	r6, #0
 8004c02:	42a6      	cmp	r6, r4
 8004c04:	d105      	bne.n	8004c12 <__libc_init_array+0x2e>
 8004c06:	bd70      	pop	{r4, r5, r6, pc}
 8004c08:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c0c:	4798      	blx	r3
 8004c0e:	3601      	adds	r6, #1
 8004c10:	e7ee      	b.n	8004bf0 <__libc_init_array+0xc>
 8004c12:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c16:	4798      	blx	r3
 8004c18:	3601      	adds	r6, #1
 8004c1a:	e7f2      	b.n	8004c02 <__libc_init_array+0x1e>
 8004c1c:	08007604 	.word	0x08007604
 8004c20:	08007604 	.word	0x08007604
 8004c24:	08007604 	.word	0x08007604
 8004c28:	08007608 	.word	0x08007608

08004c2c <__retarget_lock_init_recursive>:
 8004c2c:	4770      	bx	lr

08004c2e <__retarget_lock_acquire_recursive>:
 8004c2e:	4770      	bx	lr

08004c30 <__retarget_lock_release_recursive>:
 8004c30:	4770      	bx	lr

08004c32 <quorem>:
 8004c32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c36:	6903      	ldr	r3, [r0, #16]
 8004c38:	690c      	ldr	r4, [r1, #16]
 8004c3a:	42a3      	cmp	r3, r4
 8004c3c:	4607      	mov	r7, r0
 8004c3e:	db7e      	blt.n	8004d3e <quorem+0x10c>
 8004c40:	3c01      	subs	r4, #1
 8004c42:	f101 0814 	add.w	r8, r1, #20
 8004c46:	f100 0514 	add.w	r5, r0, #20
 8004c4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c4e:	9301      	str	r3, [sp, #4]
 8004c50:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004c54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c58:	3301      	adds	r3, #1
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004c60:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004c64:	fbb2 f6f3 	udiv	r6, r2, r3
 8004c68:	d331      	bcc.n	8004cce <quorem+0x9c>
 8004c6a:	f04f 0e00 	mov.w	lr, #0
 8004c6e:	4640      	mov	r0, r8
 8004c70:	46ac      	mov	ip, r5
 8004c72:	46f2      	mov	sl, lr
 8004c74:	f850 2b04 	ldr.w	r2, [r0], #4
 8004c78:	b293      	uxth	r3, r2
 8004c7a:	fb06 e303 	mla	r3, r6, r3, lr
 8004c7e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004c82:	0c1a      	lsrs	r2, r3, #16
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	ebaa 0303 	sub.w	r3, sl, r3
 8004c8a:	f8dc a000 	ldr.w	sl, [ip]
 8004c8e:	fa13 f38a 	uxtah	r3, r3, sl
 8004c92:	fb06 220e 	mla	r2, r6, lr, r2
 8004c96:	9300      	str	r3, [sp, #0]
 8004c98:	9b00      	ldr	r3, [sp, #0]
 8004c9a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004c9e:	b292      	uxth	r2, r2
 8004ca0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004ca4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ca8:	f8bd 3000 	ldrh.w	r3, [sp]
 8004cac:	4581      	cmp	r9, r0
 8004cae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004cb2:	f84c 3b04 	str.w	r3, [ip], #4
 8004cb6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004cba:	d2db      	bcs.n	8004c74 <quorem+0x42>
 8004cbc:	f855 300b 	ldr.w	r3, [r5, fp]
 8004cc0:	b92b      	cbnz	r3, 8004cce <quorem+0x9c>
 8004cc2:	9b01      	ldr	r3, [sp, #4]
 8004cc4:	3b04      	subs	r3, #4
 8004cc6:	429d      	cmp	r5, r3
 8004cc8:	461a      	mov	r2, r3
 8004cca:	d32c      	bcc.n	8004d26 <quorem+0xf4>
 8004ccc:	613c      	str	r4, [r7, #16]
 8004cce:	4638      	mov	r0, r7
 8004cd0:	f001 fb62 	bl	8006398 <__mcmp>
 8004cd4:	2800      	cmp	r0, #0
 8004cd6:	db22      	blt.n	8004d1e <quorem+0xec>
 8004cd8:	3601      	adds	r6, #1
 8004cda:	4629      	mov	r1, r5
 8004cdc:	2000      	movs	r0, #0
 8004cde:	f858 2b04 	ldr.w	r2, [r8], #4
 8004ce2:	f8d1 c000 	ldr.w	ip, [r1]
 8004ce6:	b293      	uxth	r3, r2
 8004ce8:	1ac3      	subs	r3, r0, r3
 8004cea:	0c12      	lsrs	r2, r2, #16
 8004cec:	fa13 f38c 	uxtah	r3, r3, ip
 8004cf0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004cf4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004cfe:	45c1      	cmp	r9, r8
 8004d00:	f841 3b04 	str.w	r3, [r1], #4
 8004d04:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004d08:	d2e9      	bcs.n	8004cde <quorem+0xac>
 8004d0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d12:	b922      	cbnz	r2, 8004d1e <quorem+0xec>
 8004d14:	3b04      	subs	r3, #4
 8004d16:	429d      	cmp	r5, r3
 8004d18:	461a      	mov	r2, r3
 8004d1a:	d30a      	bcc.n	8004d32 <quorem+0x100>
 8004d1c:	613c      	str	r4, [r7, #16]
 8004d1e:	4630      	mov	r0, r6
 8004d20:	b003      	add	sp, #12
 8004d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d26:	6812      	ldr	r2, [r2, #0]
 8004d28:	3b04      	subs	r3, #4
 8004d2a:	2a00      	cmp	r2, #0
 8004d2c:	d1ce      	bne.n	8004ccc <quorem+0x9a>
 8004d2e:	3c01      	subs	r4, #1
 8004d30:	e7c9      	b.n	8004cc6 <quorem+0x94>
 8004d32:	6812      	ldr	r2, [r2, #0]
 8004d34:	3b04      	subs	r3, #4
 8004d36:	2a00      	cmp	r2, #0
 8004d38:	d1f0      	bne.n	8004d1c <quorem+0xea>
 8004d3a:	3c01      	subs	r4, #1
 8004d3c:	e7eb      	b.n	8004d16 <quorem+0xe4>
 8004d3e:	2000      	movs	r0, #0
 8004d40:	e7ee      	b.n	8004d20 <quorem+0xee>
 8004d42:	0000      	movs	r0, r0
 8004d44:	0000      	movs	r0, r0
	...

08004d48 <_dtoa_r>:
 8004d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d4c:	ed2d 8b04 	vpush	{d8-d9}
 8004d50:	69c5      	ldr	r5, [r0, #28]
 8004d52:	b093      	sub	sp, #76	; 0x4c
 8004d54:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004d58:	ec57 6b10 	vmov	r6, r7, d0
 8004d5c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004d60:	9107      	str	r1, [sp, #28]
 8004d62:	4604      	mov	r4, r0
 8004d64:	920a      	str	r2, [sp, #40]	; 0x28
 8004d66:	930d      	str	r3, [sp, #52]	; 0x34
 8004d68:	b975      	cbnz	r5, 8004d88 <_dtoa_r+0x40>
 8004d6a:	2010      	movs	r0, #16
 8004d6c:	f000 ff36 	bl	8005bdc <malloc>
 8004d70:	4602      	mov	r2, r0
 8004d72:	61e0      	str	r0, [r4, #28]
 8004d74:	b920      	cbnz	r0, 8004d80 <_dtoa_r+0x38>
 8004d76:	4bae      	ldr	r3, [pc, #696]	; (8005030 <_dtoa_r+0x2e8>)
 8004d78:	21ef      	movs	r1, #239	; 0xef
 8004d7a:	48ae      	ldr	r0, [pc, #696]	; (8005034 <_dtoa_r+0x2ec>)
 8004d7c:	f001 fcfc 	bl	8006778 <__assert_func>
 8004d80:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004d84:	6005      	str	r5, [r0, #0]
 8004d86:	60c5      	str	r5, [r0, #12]
 8004d88:	69e3      	ldr	r3, [r4, #28]
 8004d8a:	6819      	ldr	r1, [r3, #0]
 8004d8c:	b151      	cbz	r1, 8004da4 <_dtoa_r+0x5c>
 8004d8e:	685a      	ldr	r2, [r3, #4]
 8004d90:	604a      	str	r2, [r1, #4]
 8004d92:	2301      	movs	r3, #1
 8004d94:	4093      	lsls	r3, r2
 8004d96:	608b      	str	r3, [r1, #8]
 8004d98:	4620      	mov	r0, r4
 8004d9a:	f001 f8c1 	bl	8005f20 <_Bfree>
 8004d9e:	69e3      	ldr	r3, [r4, #28]
 8004da0:	2200      	movs	r2, #0
 8004da2:	601a      	str	r2, [r3, #0]
 8004da4:	1e3b      	subs	r3, r7, #0
 8004da6:	bfbb      	ittet	lt
 8004da8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004dac:	9303      	strlt	r3, [sp, #12]
 8004dae:	2300      	movge	r3, #0
 8004db0:	2201      	movlt	r2, #1
 8004db2:	bfac      	ite	ge
 8004db4:	f8c8 3000 	strge.w	r3, [r8]
 8004db8:	f8c8 2000 	strlt.w	r2, [r8]
 8004dbc:	4b9e      	ldr	r3, [pc, #632]	; (8005038 <_dtoa_r+0x2f0>)
 8004dbe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004dc2:	ea33 0308 	bics.w	r3, r3, r8
 8004dc6:	d11b      	bne.n	8004e00 <_dtoa_r+0xb8>
 8004dc8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004dca:	f242 730f 	movw	r3, #9999	; 0x270f
 8004dce:	6013      	str	r3, [r2, #0]
 8004dd0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004dd4:	4333      	orrs	r3, r6
 8004dd6:	f000 8593 	beq.w	8005900 <_dtoa_r+0xbb8>
 8004dda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ddc:	b963      	cbnz	r3, 8004df8 <_dtoa_r+0xb0>
 8004dde:	4b97      	ldr	r3, [pc, #604]	; (800503c <_dtoa_r+0x2f4>)
 8004de0:	e027      	b.n	8004e32 <_dtoa_r+0xea>
 8004de2:	4b97      	ldr	r3, [pc, #604]	; (8005040 <_dtoa_r+0x2f8>)
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	3308      	adds	r3, #8
 8004de8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004dea:	6013      	str	r3, [r2, #0]
 8004dec:	9800      	ldr	r0, [sp, #0]
 8004dee:	b013      	add	sp, #76	; 0x4c
 8004df0:	ecbd 8b04 	vpop	{d8-d9}
 8004df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004df8:	4b90      	ldr	r3, [pc, #576]	; (800503c <_dtoa_r+0x2f4>)
 8004dfa:	9300      	str	r3, [sp, #0]
 8004dfc:	3303      	adds	r3, #3
 8004dfe:	e7f3      	b.n	8004de8 <_dtoa_r+0xa0>
 8004e00:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004e04:	2200      	movs	r2, #0
 8004e06:	ec51 0b17 	vmov	r0, r1, d7
 8004e0a:	eeb0 8a47 	vmov.f32	s16, s14
 8004e0e:	eef0 8a67 	vmov.f32	s17, s15
 8004e12:	2300      	movs	r3, #0
 8004e14:	f7fb fe60 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e18:	4681      	mov	r9, r0
 8004e1a:	b160      	cbz	r0, 8004e36 <_dtoa_r+0xee>
 8004e1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004e1e:	2301      	movs	r3, #1
 8004e20:	6013      	str	r3, [r2, #0]
 8004e22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f000 8568 	beq.w	80058fa <_dtoa_r+0xbb2>
 8004e2a:	4b86      	ldr	r3, [pc, #536]	; (8005044 <_dtoa_r+0x2fc>)
 8004e2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004e2e:	6013      	str	r3, [r2, #0]
 8004e30:	3b01      	subs	r3, #1
 8004e32:	9300      	str	r3, [sp, #0]
 8004e34:	e7da      	b.n	8004dec <_dtoa_r+0xa4>
 8004e36:	aa10      	add	r2, sp, #64	; 0x40
 8004e38:	a911      	add	r1, sp, #68	; 0x44
 8004e3a:	4620      	mov	r0, r4
 8004e3c:	eeb0 0a48 	vmov.f32	s0, s16
 8004e40:	eef0 0a68 	vmov.f32	s1, s17
 8004e44:	f001 fb4e 	bl	80064e4 <__d2b>
 8004e48:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004e4c:	4682      	mov	sl, r0
 8004e4e:	2d00      	cmp	r5, #0
 8004e50:	d07f      	beq.n	8004f52 <_dtoa_r+0x20a>
 8004e52:	ee18 3a90 	vmov	r3, s17
 8004e56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e5a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004e5e:	ec51 0b18 	vmov	r0, r1, d8
 8004e62:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004e66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004e6a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004e6e:	4619      	mov	r1, r3
 8004e70:	2200      	movs	r2, #0
 8004e72:	4b75      	ldr	r3, [pc, #468]	; (8005048 <_dtoa_r+0x300>)
 8004e74:	f7fb fa10 	bl	8000298 <__aeabi_dsub>
 8004e78:	a367      	add	r3, pc, #412	; (adr r3, 8005018 <_dtoa_r+0x2d0>)
 8004e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7e:	f7fb fbc3 	bl	8000608 <__aeabi_dmul>
 8004e82:	a367      	add	r3, pc, #412	; (adr r3, 8005020 <_dtoa_r+0x2d8>)
 8004e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e88:	f7fb fa08 	bl	800029c <__adddf3>
 8004e8c:	4606      	mov	r6, r0
 8004e8e:	4628      	mov	r0, r5
 8004e90:	460f      	mov	r7, r1
 8004e92:	f7fb fb4f 	bl	8000534 <__aeabi_i2d>
 8004e96:	a364      	add	r3, pc, #400	; (adr r3, 8005028 <_dtoa_r+0x2e0>)
 8004e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e9c:	f7fb fbb4 	bl	8000608 <__aeabi_dmul>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	4630      	mov	r0, r6
 8004ea6:	4639      	mov	r1, r7
 8004ea8:	f7fb f9f8 	bl	800029c <__adddf3>
 8004eac:	4606      	mov	r6, r0
 8004eae:	460f      	mov	r7, r1
 8004eb0:	f7fb fe5a 	bl	8000b68 <__aeabi_d2iz>
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	4683      	mov	fp, r0
 8004eb8:	2300      	movs	r3, #0
 8004eba:	4630      	mov	r0, r6
 8004ebc:	4639      	mov	r1, r7
 8004ebe:	f7fb fe15 	bl	8000aec <__aeabi_dcmplt>
 8004ec2:	b148      	cbz	r0, 8004ed8 <_dtoa_r+0x190>
 8004ec4:	4658      	mov	r0, fp
 8004ec6:	f7fb fb35 	bl	8000534 <__aeabi_i2d>
 8004eca:	4632      	mov	r2, r6
 8004ecc:	463b      	mov	r3, r7
 8004ece:	f7fb fe03 	bl	8000ad8 <__aeabi_dcmpeq>
 8004ed2:	b908      	cbnz	r0, 8004ed8 <_dtoa_r+0x190>
 8004ed4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8004ed8:	f1bb 0f16 	cmp.w	fp, #22
 8004edc:	d857      	bhi.n	8004f8e <_dtoa_r+0x246>
 8004ede:	4b5b      	ldr	r3, [pc, #364]	; (800504c <_dtoa_r+0x304>)
 8004ee0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee8:	ec51 0b18 	vmov	r0, r1, d8
 8004eec:	f7fb fdfe 	bl	8000aec <__aeabi_dcmplt>
 8004ef0:	2800      	cmp	r0, #0
 8004ef2:	d04e      	beq.n	8004f92 <_dtoa_r+0x24a>
 8004ef4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8004ef8:	2300      	movs	r3, #0
 8004efa:	930c      	str	r3, [sp, #48]	; 0x30
 8004efc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004efe:	1b5b      	subs	r3, r3, r5
 8004f00:	1e5a      	subs	r2, r3, #1
 8004f02:	bf45      	ittet	mi
 8004f04:	f1c3 0301 	rsbmi	r3, r3, #1
 8004f08:	9305      	strmi	r3, [sp, #20]
 8004f0a:	2300      	movpl	r3, #0
 8004f0c:	2300      	movmi	r3, #0
 8004f0e:	9206      	str	r2, [sp, #24]
 8004f10:	bf54      	ite	pl
 8004f12:	9305      	strpl	r3, [sp, #20]
 8004f14:	9306      	strmi	r3, [sp, #24]
 8004f16:	f1bb 0f00 	cmp.w	fp, #0
 8004f1a:	db3c      	blt.n	8004f96 <_dtoa_r+0x24e>
 8004f1c:	9b06      	ldr	r3, [sp, #24]
 8004f1e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8004f22:	445b      	add	r3, fp
 8004f24:	9306      	str	r3, [sp, #24]
 8004f26:	2300      	movs	r3, #0
 8004f28:	9308      	str	r3, [sp, #32]
 8004f2a:	9b07      	ldr	r3, [sp, #28]
 8004f2c:	2b09      	cmp	r3, #9
 8004f2e:	d868      	bhi.n	8005002 <_dtoa_r+0x2ba>
 8004f30:	2b05      	cmp	r3, #5
 8004f32:	bfc4      	itt	gt
 8004f34:	3b04      	subgt	r3, #4
 8004f36:	9307      	strgt	r3, [sp, #28]
 8004f38:	9b07      	ldr	r3, [sp, #28]
 8004f3a:	f1a3 0302 	sub.w	r3, r3, #2
 8004f3e:	bfcc      	ite	gt
 8004f40:	2500      	movgt	r5, #0
 8004f42:	2501      	movle	r5, #1
 8004f44:	2b03      	cmp	r3, #3
 8004f46:	f200 8085 	bhi.w	8005054 <_dtoa_r+0x30c>
 8004f4a:	e8df f003 	tbb	[pc, r3]
 8004f4e:	3b2e      	.short	0x3b2e
 8004f50:	5839      	.short	0x5839
 8004f52:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004f56:	441d      	add	r5, r3
 8004f58:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004f5c:	2b20      	cmp	r3, #32
 8004f5e:	bfc1      	itttt	gt
 8004f60:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004f64:	fa08 f803 	lslgt.w	r8, r8, r3
 8004f68:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8004f6c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8004f70:	bfd6      	itet	le
 8004f72:	f1c3 0320 	rsble	r3, r3, #32
 8004f76:	ea48 0003 	orrgt.w	r0, r8, r3
 8004f7a:	fa06 f003 	lslle.w	r0, r6, r3
 8004f7e:	f7fb fac9 	bl	8000514 <__aeabi_ui2d>
 8004f82:	2201      	movs	r2, #1
 8004f84:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8004f88:	3d01      	subs	r5, #1
 8004f8a:	920e      	str	r2, [sp, #56]	; 0x38
 8004f8c:	e76f      	b.n	8004e6e <_dtoa_r+0x126>
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e7b3      	b.n	8004efa <_dtoa_r+0x1b2>
 8004f92:	900c      	str	r0, [sp, #48]	; 0x30
 8004f94:	e7b2      	b.n	8004efc <_dtoa_r+0x1b4>
 8004f96:	9b05      	ldr	r3, [sp, #20]
 8004f98:	eba3 030b 	sub.w	r3, r3, fp
 8004f9c:	9305      	str	r3, [sp, #20]
 8004f9e:	f1cb 0300 	rsb	r3, fp, #0
 8004fa2:	9308      	str	r3, [sp, #32]
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	930b      	str	r3, [sp, #44]	; 0x2c
 8004fa8:	e7bf      	b.n	8004f2a <_dtoa_r+0x1e2>
 8004faa:	2300      	movs	r3, #0
 8004fac:	9309      	str	r3, [sp, #36]	; 0x24
 8004fae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	dc52      	bgt.n	800505a <_dtoa_r+0x312>
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	9301      	str	r3, [sp, #4]
 8004fb8:	9304      	str	r3, [sp, #16]
 8004fba:	461a      	mov	r2, r3
 8004fbc:	920a      	str	r2, [sp, #40]	; 0x28
 8004fbe:	e00b      	b.n	8004fd8 <_dtoa_r+0x290>
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e7f3      	b.n	8004fac <_dtoa_r+0x264>
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	9309      	str	r3, [sp, #36]	; 0x24
 8004fc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fca:	445b      	add	r3, fp
 8004fcc:	9301      	str	r3, [sp, #4]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	9304      	str	r3, [sp, #16]
 8004fd4:	bfb8      	it	lt
 8004fd6:	2301      	movlt	r3, #1
 8004fd8:	69e0      	ldr	r0, [r4, #28]
 8004fda:	2100      	movs	r1, #0
 8004fdc:	2204      	movs	r2, #4
 8004fde:	f102 0614 	add.w	r6, r2, #20
 8004fe2:	429e      	cmp	r6, r3
 8004fe4:	d93d      	bls.n	8005062 <_dtoa_r+0x31a>
 8004fe6:	6041      	str	r1, [r0, #4]
 8004fe8:	4620      	mov	r0, r4
 8004fea:	f000 ff59 	bl	8005ea0 <_Balloc>
 8004fee:	9000      	str	r0, [sp, #0]
 8004ff0:	2800      	cmp	r0, #0
 8004ff2:	d139      	bne.n	8005068 <_dtoa_r+0x320>
 8004ff4:	4b16      	ldr	r3, [pc, #88]	; (8005050 <_dtoa_r+0x308>)
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	f240 11af 	movw	r1, #431	; 0x1af
 8004ffc:	e6bd      	b.n	8004d7a <_dtoa_r+0x32>
 8004ffe:	2301      	movs	r3, #1
 8005000:	e7e1      	b.n	8004fc6 <_dtoa_r+0x27e>
 8005002:	2501      	movs	r5, #1
 8005004:	2300      	movs	r3, #0
 8005006:	9307      	str	r3, [sp, #28]
 8005008:	9509      	str	r5, [sp, #36]	; 0x24
 800500a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800500e:	9301      	str	r3, [sp, #4]
 8005010:	9304      	str	r3, [sp, #16]
 8005012:	2200      	movs	r2, #0
 8005014:	2312      	movs	r3, #18
 8005016:	e7d1      	b.n	8004fbc <_dtoa_r+0x274>
 8005018:	636f4361 	.word	0x636f4361
 800501c:	3fd287a7 	.word	0x3fd287a7
 8005020:	8b60c8b3 	.word	0x8b60c8b3
 8005024:	3fc68a28 	.word	0x3fc68a28
 8005028:	509f79fb 	.word	0x509f79fb
 800502c:	3fd34413 	.word	0x3fd34413
 8005030:	080072c9 	.word	0x080072c9
 8005034:	080072e0 	.word	0x080072e0
 8005038:	7ff00000 	.word	0x7ff00000
 800503c:	080072c5 	.word	0x080072c5
 8005040:	080072bc 	.word	0x080072bc
 8005044:	08007299 	.word	0x08007299
 8005048:	3ff80000 	.word	0x3ff80000
 800504c:	080073e0 	.word	0x080073e0
 8005050:	08007338 	.word	0x08007338
 8005054:	2301      	movs	r3, #1
 8005056:	9309      	str	r3, [sp, #36]	; 0x24
 8005058:	e7d7      	b.n	800500a <_dtoa_r+0x2c2>
 800505a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800505c:	9301      	str	r3, [sp, #4]
 800505e:	9304      	str	r3, [sp, #16]
 8005060:	e7ba      	b.n	8004fd8 <_dtoa_r+0x290>
 8005062:	3101      	adds	r1, #1
 8005064:	0052      	lsls	r2, r2, #1
 8005066:	e7ba      	b.n	8004fde <_dtoa_r+0x296>
 8005068:	69e3      	ldr	r3, [r4, #28]
 800506a:	9a00      	ldr	r2, [sp, #0]
 800506c:	601a      	str	r2, [r3, #0]
 800506e:	9b04      	ldr	r3, [sp, #16]
 8005070:	2b0e      	cmp	r3, #14
 8005072:	f200 80a8 	bhi.w	80051c6 <_dtoa_r+0x47e>
 8005076:	2d00      	cmp	r5, #0
 8005078:	f000 80a5 	beq.w	80051c6 <_dtoa_r+0x47e>
 800507c:	f1bb 0f00 	cmp.w	fp, #0
 8005080:	dd38      	ble.n	80050f4 <_dtoa_r+0x3ac>
 8005082:	4bc0      	ldr	r3, [pc, #768]	; (8005384 <_dtoa_r+0x63c>)
 8005084:	f00b 020f 	and.w	r2, fp, #15
 8005088:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800508c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005090:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005094:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005098:	d019      	beq.n	80050ce <_dtoa_r+0x386>
 800509a:	4bbb      	ldr	r3, [pc, #748]	; (8005388 <_dtoa_r+0x640>)
 800509c:	ec51 0b18 	vmov	r0, r1, d8
 80050a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80050a4:	f7fb fbda 	bl	800085c <__aeabi_ddiv>
 80050a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050ac:	f008 080f 	and.w	r8, r8, #15
 80050b0:	2503      	movs	r5, #3
 80050b2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005388 <_dtoa_r+0x640>
 80050b6:	f1b8 0f00 	cmp.w	r8, #0
 80050ba:	d10a      	bne.n	80050d2 <_dtoa_r+0x38a>
 80050bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050c0:	4632      	mov	r2, r6
 80050c2:	463b      	mov	r3, r7
 80050c4:	f7fb fbca 	bl	800085c <__aeabi_ddiv>
 80050c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050cc:	e02b      	b.n	8005126 <_dtoa_r+0x3de>
 80050ce:	2502      	movs	r5, #2
 80050d0:	e7ef      	b.n	80050b2 <_dtoa_r+0x36a>
 80050d2:	f018 0f01 	tst.w	r8, #1
 80050d6:	d008      	beq.n	80050ea <_dtoa_r+0x3a2>
 80050d8:	4630      	mov	r0, r6
 80050da:	4639      	mov	r1, r7
 80050dc:	e9d9 2300 	ldrd	r2, r3, [r9]
 80050e0:	f7fb fa92 	bl	8000608 <__aeabi_dmul>
 80050e4:	3501      	adds	r5, #1
 80050e6:	4606      	mov	r6, r0
 80050e8:	460f      	mov	r7, r1
 80050ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 80050ee:	f109 0908 	add.w	r9, r9, #8
 80050f2:	e7e0      	b.n	80050b6 <_dtoa_r+0x36e>
 80050f4:	f000 809f 	beq.w	8005236 <_dtoa_r+0x4ee>
 80050f8:	f1cb 0600 	rsb	r6, fp, #0
 80050fc:	4ba1      	ldr	r3, [pc, #644]	; (8005384 <_dtoa_r+0x63c>)
 80050fe:	4fa2      	ldr	r7, [pc, #648]	; (8005388 <_dtoa_r+0x640>)
 8005100:	f006 020f 	and.w	r2, r6, #15
 8005104:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800510c:	ec51 0b18 	vmov	r0, r1, d8
 8005110:	f7fb fa7a 	bl	8000608 <__aeabi_dmul>
 8005114:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005118:	1136      	asrs	r6, r6, #4
 800511a:	2300      	movs	r3, #0
 800511c:	2502      	movs	r5, #2
 800511e:	2e00      	cmp	r6, #0
 8005120:	d17e      	bne.n	8005220 <_dtoa_r+0x4d8>
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1d0      	bne.n	80050c8 <_dtoa_r+0x380>
 8005126:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005128:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800512c:	2b00      	cmp	r3, #0
 800512e:	f000 8084 	beq.w	800523a <_dtoa_r+0x4f2>
 8005132:	4b96      	ldr	r3, [pc, #600]	; (800538c <_dtoa_r+0x644>)
 8005134:	2200      	movs	r2, #0
 8005136:	4640      	mov	r0, r8
 8005138:	4649      	mov	r1, r9
 800513a:	f7fb fcd7 	bl	8000aec <__aeabi_dcmplt>
 800513e:	2800      	cmp	r0, #0
 8005140:	d07b      	beq.n	800523a <_dtoa_r+0x4f2>
 8005142:	9b04      	ldr	r3, [sp, #16]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d078      	beq.n	800523a <_dtoa_r+0x4f2>
 8005148:	9b01      	ldr	r3, [sp, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	dd39      	ble.n	80051c2 <_dtoa_r+0x47a>
 800514e:	4b90      	ldr	r3, [pc, #576]	; (8005390 <_dtoa_r+0x648>)
 8005150:	2200      	movs	r2, #0
 8005152:	4640      	mov	r0, r8
 8005154:	4649      	mov	r1, r9
 8005156:	f7fb fa57 	bl	8000608 <__aeabi_dmul>
 800515a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800515e:	9e01      	ldr	r6, [sp, #4]
 8005160:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8005164:	3501      	adds	r5, #1
 8005166:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800516a:	4628      	mov	r0, r5
 800516c:	f7fb f9e2 	bl	8000534 <__aeabi_i2d>
 8005170:	4642      	mov	r2, r8
 8005172:	464b      	mov	r3, r9
 8005174:	f7fb fa48 	bl	8000608 <__aeabi_dmul>
 8005178:	4b86      	ldr	r3, [pc, #536]	; (8005394 <_dtoa_r+0x64c>)
 800517a:	2200      	movs	r2, #0
 800517c:	f7fb f88e 	bl	800029c <__adddf3>
 8005180:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005184:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005188:	9303      	str	r3, [sp, #12]
 800518a:	2e00      	cmp	r6, #0
 800518c:	d158      	bne.n	8005240 <_dtoa_r+0x4f8>
 800518e:	4b82      	ldr	r3, [pc, #520]	; (8005398 <_dtoa_r+0x650>)
 8005190:	2200      	movs	r2, #0
 8005192:	4640      	mov	r0, r8
 8005194:	4649      	mov	r1, r9
 8005196:	f7fb f87f 	bl	8000298 <__aeabi_dsub>
 800519a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800519e:	4680      	mov	r8, r0
 80051a0:	4689      	mov	r9, r1
 80051a2:	f7fb fcc1 	bl	8000b28 <__aeabi_dcmpgt>
 80051a6:	2800      	cmp	r0, #0
 80051a8:	f040 8296 	bne.w	80056d8 <_dtoa_r+0x990>
 80051ac:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80051b0:	4640      	mov	r0, r8
 80051b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80051b6:	4649      	mov	r1, r9
 80051b8:	f7fb fc98 	bl	8000aec <__aeabi_dcmplt>
 80051bc:	2800      	cmp	r0, #0
 80051be:	f040 8289 	bne.w	80056d4 <_dtoa_r+0x98c>
 80051c2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80051c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f2c0 814e 	blt.w	800546a <_dtoa_r+0x722>
 80051ce:	f1bb 0f0e 	cmp.w	fp, #14
 80051d2:	f300 814a 	bgt.w	800546a <_dtoa_r+0x722>
 80051d6:	4b6b      	ldr	r3, [pc, #428]	; (8005384 <_dtoa_r+0x63c>)
 80051d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80051dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80051e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	f280 80dc 	bge.w	80053a0 <_dtoa_r+0x658>
 80051e8:	9b04      	ldr	r3, [sp, #16]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	f300 80d8 	bgt.w	80053a0 <_dtoa_r+0x658>
 80051f0:	f040 826f 	bne.w	80056d2 <_dtoa_r+0x98a>
 80051f4:	4b68      	ldr	r3, [pc, #416]	; (8005398 <_dtoa_r+0x650>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	4640      	mov	r0, r8
 80051fa:	4649      	mov	r1, r9
 80051fc:	f7fb fa04 	bl	8000608 <__aeabi_dmul>
 8005200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005204:	f7fb fc86 	bl	8000b14 <__aeabi_dcmpge>
 8005208:	9e04      	ldr	r6, [sp, #16]
 800520a:	4637      	mov	r7, r6
 800520c:	2800      	cmp	r0, #0
 800520e:	f040 8245 	bne.w	800569c <_dtoa_r+0x954>
 8005212:	9d00      	ldr	r5, [sp, #0]
 8005214:	2331      	movs	r3, #49	; 0x31
 8005216:	f805 3b01 	strb.w	r3, [r5], #1
 800521a:	f10b 0b01 	add.w	fp, fp, #1
 800521e:	e241      	b.n	80056a4 <_dtoa_r+0x95c>
 8005220:	07f2      	lsls	r2, r6, #31
 8005222:	d505      	bpl.n	8005230 <_dtoa_r+0x4e8>
 8005224:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005228:	f7fb f9ee 	bl	8000608 <__aeabi_dmul>
 800522c:	3501      	adds	r5, #1
 800522e:	2301      	movs	r3, #1
 8005230:	1076      	asrs	r6, r6, #1
 8005232:	3708      	adds	r7, #8
 8005234:	e773      	b.n	800511e <_dtoa_r+0x3d6>
 8005236:	2502      	movs	r5, #2
 8005238:	e775      	b.n	8005126 <_dtoa_r+0x3de>
 800523a:	9e04      	ldr	r6, [sp, #16]
 800523c:	465f      	mov	r7, fp
 800523e:	e792      	b.n	8005166 <_dtoa_r+0x41e>
 8005240:	9900      	ldr	r1, [sp, #0]
 8005242:	4b50      	ldr	r3, [pc, #320]	; (8005384 <_dtoa_r+0x63c>)
 8005244:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005248:	4431      	add	r1, r6
 800524a:	9102      	str	r1, [sp, #8]
 800524c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800524e:	eeb0 9a47 	vmov.f32	s18, s14
 8005252:	eef0 9a67 	vmov.f32	s19, s15
 8005256:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800525a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800525e:	2900      	cmp	r1, #0
 8005260:	d044      	beq.n	80052ec <_dtoa_r+0x5a4>
 8005262:	494e      	ldr	r1, [pc, #312]	; (800539c <_dtoa_r+0x654>)
 8005264:	2000      	movs	r0, #0
 8005266:	f7fb faf9 	bl	800085c <__aeabi_ddiv>
 800526a:	ec53 2b19 	vmov	r2, r3, d9
 800526e:	f7fb f813 	bl	8000298 <__aeabi_dsub>
 8005272:	9d00      	ldr	r5, [sp, #0]
 8005274:	ec41 0b19 	vmov	d9, r0, r1
 8005278:	4649      	mov	r1, r9
 800527a:	4640      	mov	r0, r8
 800527c:	f7fb fc74 	bl	8000b68 <__aeabi_d2iz>
 8005280:	4606      	mov	r6, r0
 8005282:	f7fb f957 	bl	8000534 <__aeabi_i2d>
 8005286:	4602      	mov	r2, r0
 8005288:	460b      	mov	r3, r1
 800528a:	4640      	mov	r0, r8
 800528c:	4649      	mov	r1, r9
 800528e:	f7fb f803 	bl	8000298 <__aeabi_dsub>
 8005292:	3630      	adds	r6, #48	; 0x30
 8005294:	f805 6b01 	strb.w	r6, [r5], #1
 8005298:	ec53 2b19 	vmov	r2, r3, d9
 800529c:	4680      	mov	r8, r0
 800529e:	4689      	mov	r9, r1
 80052a0:	f7fb fc24 	bl	8000aec <__aeabi_dcmplt>
 80052a4:	2800      	cmp	r0, #0
 80052a6:	d164      	bne.n	8005372 <_dtoa_r+0x62a>
 80052a8:	4642      	mov	r2, r8
 80052aa:	464b      	mov	r3, r9
 80052ac:	4937      	ldr	r1, [pc, #220]	; (800538c <_dtoa_r+0x644>)
 80052ae:	2000      	movs	r0, #0
 80052b0:	f7fa fff2 	bl	8000298 <__aeabi_dsub>
 80052b4:	ec53 2b19 	vmov	r2, r3, d9
 80052b8:	f7fb fc18 	bl	8000aec <__aeabi_dcmplt>
 80052bc:	2800      	cmp	r0, #0
 80052be:	f040 80b6 	bne.w	800542e <_dtoa_r+0x6e6>
 80052c2:	9b02      	ldr	r3, [sp, #8]
 80052c4:	429d      	cmp	r5, r3
 80052c6:	f43f af7c 	beq.w	80051c2 <_dtoa_r+0x47a>
 80052ca:	4b31      	ldr	r3, [pc, #196]	; (8005390 <_dtoa_r+0x648>)
 80052cc:	ec51 0b19 	vmov	r0, r1, d9
 80052d0:	2200      	movs	r2, #0
 80052d2:	f7fb f999 	bl	8000608 <__aeabi_dmul>
 80052d6:	4b2e      	ldr	r3, [pc, #184]	; (8005390 <_dtoa_r+0x648>)
 80052d8:	ec41 0b19 	vmov	d9, r0, r1
 80052dc:	2200      	movs	r2, #0
 80052de:	4640      	mov	r0, r8
 80052e0:	4649      	mov	r1, r9
 80052e2:	f7fb f991 	bl	8000608 <__aeabi_dmul>
 80052e6:	4680      	mov	r8, r0
 80052e8:	4689      	mov	r9, r1
 80052ea:	e7c5      	b.n	8005278 <_dtoa_r+0x530>
 80052ec:	ec51 0b17 	vmov	r0, r1, d7
 80052f0:	f7fb f98a 	bl	8000608 <__aeabi_dmul>
 80052f4:	9b02      	ldr	r3, [sp, #8]
 80052f6:	9d00      	ldr	r5, [sp, #0]
 80052f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80052fa:	ec41 0b19 	vmov	d9, r0, r1
 80052fe:	4649      	mov	r1, r9
 8005300:	4640      	mov	r0, r8
 8005302:	f7fb fc31 	bl	8000b68 <__aeabi_d2iz>
 8005306:	4606      	mov	r6, r0
 8005308:	f7fb f914 	bl	8000534 <__aeabi_i2d>
 800530c:	3630      	adds	r6, #48	; 0x30
 800530e:	4602      	mov	r2, r0
 8005310:	460b      	mov	r3, r1
 8005312:	4640      	mov	r0, r8
 8005314:	4649      	mov	r1, r9
 8005316:	f7fa ffbf 	bl	8000298 <__aeabi_dsub>
 800531a:	f805 6b01 	strb.w	r6, [r5], #1
 800531e:	9b02      	ldr	r3, [sp, #8]
 8005320:	429d      	cmp	r5, r3
 8005322:	4680      	mov	r8, r0
 8005324:	4689      	mov	r9, r1
 8005326:	f04f 0200 	mov.w	r2, #0
 800532a:	d124      	bne.n	8005376 <_dtoa_r+0x62e>
 800532c:	4b1b      	ldr	r3, [pc, #108]	; (800539c <_dtoa_r+0x654>)
 800532e:	ec51 0b19 	vmov	r0, r1, d9
 8005332:	f7fa ffb3 	bl	800029c <__adddf3>
 8005336:	4602      	mov	r2, r0
 8005338:	460b      	mov	r3, r1
 800533a:	4640      	mov	r0, r8
 800533c:	4649      	mov	r1, r9
 800533e:	f7fb fbf3 	bl	8000b28 <__aeabi_dcmpgt>
 8005342:	2800      	cmp	r0, #0
 8005344:	d173      	bne.n	800542e <_dtoa_r+0x6e6>
 8005346:	ec53 2b19 	vmov	r2, r3, d9
 800534a:	4914      	ldr	r1, [pc, #80]	; (800539c <_dtoa_r+0x654>)
 800534c:	2000      	movs	r0, #0
 800534e:	f7fa ffa3 	bl	8000298 <__aeabi_dsub>
 8005352:	4602      	mov	r2, r0
 8005354:	460b      	mov	r3, r1
 8005356:	4640      	mov	r0, r8
 8005358:	4649      	mov	r1, r9
 800535a:	f7fb fbc7 	bl	8000aec <__aeabi_dcmplt>
 800535e:	2800      	cmp	r0, #0
 8005360:	f43f af2f 	beq.w	80051c2 <_dtoa_r+0x47a>
 8005364:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005366:	1e6b      	subs	r3, r5, #1
 8005368:	930f      	str	r3, [sp, #60]	; 0x3c
 800536a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800536e:	2b30      	cmp	r3, #48	; 0x30
 8005370:	d0f8      	beq.n	8005364 <_dtoa_r+0x61c>
 8005372:	46bb      	mov	fp, r7
 8005374:	e04a      	b.n	800540c <_dtoa_r+0x6c4>
 8005376:	4b06      	ldr	r3, [pc, #24]	; (8005390 <_dtoa_r+0x648>)
 8005378:	f7fb f946 	bl	8000608 <__aeabi_dmul>
 800537c:	4680      	mov	r8, r0
 800537e:	4689      	mov	r9, r1
 8005380:	e7bd      	b.n	80052fe <_dtoa_r+0x5b6>
 8005382:	bf00      	nop
 8005384:	080073e0 	.word	0x080073e0
 8005388:	080073b8 	.word	0x080073b8
 800538c:	3ff00000 	.word	0x3ff00000
 8005390:	40240000 	.word	0x40240000
 8005394:	401c0000 	.word	0x401c0000
 8005398:	40140000 	.word	0x40140000
 800539c:	3fe00000 	.word	0x3fe00000
 80053a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80053a4:	9d00      	ldr	r5, [sp, #0]
 80053a6:	4642      	mov	r2, r8
 80053a8:	464b      	mov	r3, r9
 80053aa:	4630      	mov	r0, r6
 80053ac:	4639      	mov	r1, r7
 80053ae:	f7fb fa55 	bl	800085c <__aeabi_ddiv>
 80053b2:	f7fb fbd9 	bl	8000b68 <__aeabi_d2iz>
 80053b6:	9001      	str	r0, [sp, #4]
 80053b8:	f7fb f8bc 	bl	8000534 <__aeabi_i2d>
 80053bc:	4642      	mov	r2, r8
 80053be:	464b      	mov	r3, r9
 80053c0:	f7fb f922 	bl	8000608 <__aeabi_dmul>
 80053c4:	4602      	mov	r2, r0
 80053c6:	460b      	mov	r3, r1
 80053c8:	4630      	mov	r0, r6
 80053ca:	4639      	mov	r1, r7
 80053cc:	f7fa ff64 	bl	8000298 <__aeabi_dsub>
 80053d0:	9e01      	ldr	r6, [sp, #4]
 80053d2:	9f04      	ldr	r7, [sp, #16]
 80053d4:	3630      	adds	r6, #48	; 0x30
 80053d6:	f805 6b01 	strb.w	r6, [r5], #1
 80053da:	9e00      	ldr	r6, [sp, #0]
 80053dc:	1bae      	subs	r6, r5, r6
 80053de:	42b7      	cmp	r7, r6
 80053e0:	4602      	mov	r2, r0
 80053e2:	460b      	mov	r3, r1
 80053e4:	d134      	bne.n	8005450 <_dtoa_r+0x708>
 80053e6:	f7fa ff59 	bl	800029c <__adddf3>
 80053ea:	4642      	mov	r2, r8
 80053ec:	464b      	mov	r3, r9
 80053ee:	4606      	mov	r6, r0
 80053f0:	460f      	mov	r7, r1
 80053f2:	f7fb fb99 	bl	8000b28 <__aeabi_dcmpgt>
 80053f6:	b9c8      	cbnz	r0, 800542c <_dtoa_r+0x6e4>
 80053f8:	4642      	mov	r2, r8
 80053fa:	464b      	mov	r3, r9
 80053fc:	4630      	mov	r0, r6
 80053fe:	4639      	mov	r1, r7
 8005400:	f7fb fb6a 	bl	8000ad8 <__aeabi_dcmpeq>
 8005404:	b110      	cbz	r0, 800540c <_dtoa_r+0x6c4>
 8005406:	9b01      	ldr	r3, [sp, #4]
 8005408:	07db      	lsls	r3, r3, #31
 800540a:	d40f      	bmi.n	800542c <_dtoa_r+0x6e4>
 800540c:	4651      	mov	r1, sl
 800540e:	4620      	mov	r0, r4
 8005410:	f000 fd86 	bl	8005f20 <_Bfree>
 8005414:	2300      	movs	r3, #0
 8005416:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005418:	702b      	strb	r3, [r5, #0]
 800541a:	f10b 0301 	add.w	r3, fp, #1
 800541e:	6013      	str	r3, [r2, #0]
 8005420:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005422:	2b00      	cmp	r3, #0
 8005424:	f43f ace2 	beq.w	8004dec <_dtoa_r+0xa4>
 8005428:	601d      	str	r5, [r3, #0]
 800542a:	e4df      	b.n	8004dec <_dtoa_r+0xa4>
 800542c:	465f      	mov	r7, fp
 800542e:	462b      	mov	r3, r5
 8005430:	461d      	mov	r5, r3
 8005432:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005436:	2a39      	cmp	r2, #57	; 0x39
 8005438:	d106      	bne.n	8005448 <_dtoa_r+0x700>
 800543a:	9a00      	ldr	r2, [sp, #0]
 800543c:	429a      	cmp	r2, r3
 800543e:	d1f7      	bne.n	8005430 <_dtoa_r+0x6e8>
 8005440:	9900      	ldr	r1, [sp, #0]
 8005442:	2230      	movs	r2, #48	; 0x30
 8005444:	3701      	adds	r7, #1
 8005446:	700a      	strb	r2, [r1, #0]
 8005448:	781a      	ldrb	r2, [r3, #0]
 800544a:	3201      	adds	r2, #1
 800544c:	701a      	strb	r2, [r3, #0]
 800544e:	e790      	b.n	8005372 <_dtoa_r+0x62a>
 8005450:	4ba3      	ldr	r3, [pc, #652]	; (80056e0 <_dtoa_r+0x998>)
 8005452:	2200      	movs	r2, #0
 8005454:	f7fb f8d8 	bl	8000608 <__aeabi_dmul>
 8005458:	2200      	movs	r2, #0
 800545a:	2300      	movs	r3, #0
 800545c:	4606      	mov	r6, r0
 800545e:	460f      	mov	r7, r1
 8005460:	f7fb fb3a 	bl	8000ad8 <__aeabi_dcmpeq>
 8005464:	2800      	cmp	r0, #0
 8005466:	d09e      	beq.n	80053a6 <_dtoa_r+0x65e>
 8005468:	e7d0      	b.n	800540c <_dtoa_r+0x6c4>
 800546a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800546c:	2a00      	cmp	r2, #0
 800546e:	f000 80ca 	beq.w	8005606 <_dtoa_r+0x8be>
 8005472:	9a07      	ldr	r2, [sp, #28]
 8005474:	2a01      	cmp	r2, #1
 8005476:	f300 80ad 	bgt.w	80055d4 <_dtoa_r+0x88c>
 800547a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800547c:	2a00      	cmp	r2, #0
 800547e:	f000 80a5 	beq.w	80055cc <_dtoa_r+0x884>
 8005482:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005486:	9e08      	ldr	r6, [sp, #32]
 8005488:	9d05      	ldr	r5, [sp, #20]
 800548a:	9a05      	ldr	r2, [sp, #20]
 800548c:	441a      	add	r2, r3
 800548e:	9205      	str	r2, [sp, #20]
 8005490:	9a06      	ldr	r2, [sp, #24]
 8005492:	2101      	movs	r1, #1
 8005494:	441a      	add	r2, r3
 8005496:	4620      	mov	r0, r4
 8005498:	9206      	str	r2, [sp, #24]
 800549a:	f000 fdf7 	bl	800608c <__i2b>
 800549e:	4607      	mov	r7, r0
 80054a0:	b165      	cbz	r5, 80054bc <_dtoa_r+0x774>
 80054a2:	9b06      	ldr	r3, [sp, #24]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	dd09      	ble.n	80054bc <_dtoa_r+0x774>
 80054a8:	42ab      	cmp	r3, r5
 80054aa:	9a05      	ldr	r2, [sp, #20]
 80054ac:	bfa8      	it	ge
 80054ae:	462b      	movge	r3, r5
 80054b0:	1ad2      	subs	r2, r2, r3
 80054b2:	9205      	str	r2, [sp, #20]
 80054b4:	9a06      	ldr	r2, [sp, #24]
 80054b6:	1aed      	subs	r5, r5, r3
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	9306      	str	r3, [sp, #24]
 80054bc:	9b08      	ldr	r3, [sp, #32]
 80054be:	b1f3      	cbz	r3, 80054fe <_dtoa_r+0x7b6>
 80054c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	f000 80a3 	beq.w	800560e <_dtoa_r+0x8c6>
 80054c8:	2e00      	cmp	r6, #0
 80054ca:	dd10      	ble.n	80054ee <_dtoa_r+0x7a6>
 80054cc:	4639      	mov	r1, r7
 80054ce:	4632      	mov	r2, r6
 80054d0:	4620      	mov	r0, r4
 80054d2:	f000 fe9b 	bl	800620c <__pow5mult>
 80054d6:	4652      	mov	r2, sl
 80054d8:	4601      	mov	r1, r0
 80054da:	4607      	mov	r7, r0
 80054dc:	4620      	mov	r0, r4
 80054de:	f000 fdeb 	bl	80060b8 <__multiply>
 80054e2:	4651      	mov	r1, sl
 80054e4:	4680      	mov	r8, r0
 80054e6:	4620      	mov	r0, r4
 80054e8:	f000 fd1a 	bl	8005f20 <_Bfree>
 80054ec:	46c2      	mov	sl, r8
 80054ee:	9b08      	ldr	r3, [sp, #32]
 80054f0:	1b9a      	subs	r2, r3, r6
 80054f2:	d004      	beq.n	80054fe <_dtoa_r+0x7b6>
 80054f4:	4651      	mov	r1, sl
 80054f6:	4620      	mov	r0, r4
 80054f8:	f000 fe88 	bl	800620c <__pow5mult>
 80054fc:	4682      	mov	sl, r0
 80054fe:	2101      	movs	r1, #1
 8005500:	4620      	mov	r0, r4
 8005502:	f000 fdc3 	bl	800608c <__i2b>
 8005506:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005508:	2b00      	cmp	r3, #0
 800550a:	4606      	mov	r6, r0
 800550c:	f340 8081 	ble.w	8005612 <_dtoa_r+0x8ca>
 8005510:	461a      	mov	r2, r3
 8005512:	4601      	mov	r1, r0
 8005514:	4620      	mov	r0, r4
 8005516:	f000 fe79 	bl	800620c <__pow5mult>
 800551a:	9b07      	ldr	r3, [sp, #28]
 800551c:	2b01      	cmp	r3, #1
 800551e:	4606      	mov	r6, r0
 8005520:	dd7a      	ble.n	8005618 <_dtoa_r+0x8d0>
 8005522:	f04f 0800 	mov.w	r8, #0
 8005526:	6933      	ldr	r3, [r6, #16]
 8005528:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800552c:	6918      	ldr	r0, [r3, #16]
 800552e:	f000 fd5f 	bl	8005ff0 <__hi0bits>
 8005532:	f1c0 0020 	rsb	r0, r0, #32
 8005536:	9b06      	ldr	r3, [sp, #24]
 8005538:	4418      	add	r0, r3
 800553a:	f010 001f 	ands.w	r0, r0, #31
 800553e:	f000 8094 	beq.w	800566a <_dtoa_r+0x922>
 8005542:	f1c0 0320 	rsb	r3, r0, #32
 8005546:	2b04      	cmp	r3, #4
 8005548:	f340 8085 	ble.w	8005656 <_dtoa_r+0x90e>
 800554c:	9b05      	ldr	r3, [sp, #20]
 800554e:	f1c0 001c 	rsb	r0, r0, #28
 8005552:	4403      	add	r3, r0
 8005554:	9305      	str	r3, [sp, #20]
 8005556:	9b06      	ldr	r3, [sp, #24]
 8005558:	4403      	add	r3, r0
 800555a:	4405      	add	r5, r0
 800555c:	9306      	str	r3, [sp, #24]
 800555e:	9b05      	ldr	r3, [sp, #20]
 8005560:	2b00      	cmp	r3, #0
 8005562:	dd05      	ble.n	8005570 <_dtoa_r+0x828>
 8005564:	4651      	mov	r1, sl
 8005566:	461a      	mov	r2, r3
 8005568:	4620      	mov	r0, r4
 800556a:	f000 fea9 	bl	80062c0 <__lshift>
 800556e:	4682      	mov	sl, r0
 8005570:	9b06      	ldr	r3, [sp, #24]
 8005572:	2b00      	cmp	r3, #0
 8005574:	dd05      	ble.n	8005582 <_dtoa_r+0x83a>
 8005576:	4631      	mov	r1, r6
 8005578:	461a      	mov	r2, r3
 800557a:	4620      	mov	r0, r4
 800557c:	f000 fea0 	bl	80062c0 <__lshift>
 8005580:	4606      	mov	r6, r0
 8005582:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005584:	2b00      	cmp	r3, #0
 8005586:	d072      	beq.n	800566e <_dtoa_r+0x926>
 8005588:	4631      	mov	r1, r6
 800558a:	4650      	mov	r0, sl
 800558c:	f000 ff04 	bl	8006398 <__mcmp>
 8005590:	2800      	cmp	r0, #0
 8005592:	da6c      	bge.n	800566e <_dtoa_r+0x926>
 8005594:	2300      	movs	r3, #0
 8005596:	4651      	mov	r1, sl
 8005598:	220a      	movs	r2, #10
 800559a:	4620      	mov	r0, r4
 800559c:	f000 fce2 	bl	8005f64 <__multadd>
 80055a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055a2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80055a6:	4682      	mov	sl, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	f000 81b0 	beq.w	800590e <_dtoa_r+0xbc6>
 80055ae:	2300      	movs	r3, #0
 80055b0:	4639      	mov	r1, r7
 80055b2:	220a      	movs	r2, #10
 80055b4:	4620      	mov	r0, r4
 80055b6:	f000 fcd5 	bl	8005f64 <__multadd>
 80055ba:	9b01      	ldr	r3, [sp, #4]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	4607      	mov	r7, r0
 80055c0:	f300 8096 	bgt.w	80056f0 <_dtoa_r+0x9a8>
 80055c4:	9b07      	ldr	r3, [sp, #28]
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	dc59      	bgt.n	800567e <_dtoa_r+0x936>
 80055ca:	e091      	b.n	80056f0 <_dtoa_r+0x9a8>
 80055cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80055ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80055d2:	e758      	b.n	8005486 <_dtoa_r+0x73e>
 80055d4:	9b04      	ldr	r3, [sp, #16]
 80055d6:	1e5e      	subs	r6, r3, #1
 80055d8:	9b08      	ldr	r3, [sp, #32]
 80055da:	42b3      	cmp	r3, r6
 80055dc:	bfbf      	itttt	lt
 80055de:	9b08      	ldrlt	r3, [sp, #32]
 80055e0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80055e2:	9608      	strlt	r6, [sp, #32]
 80055e4:	1af3      	sublt	r3, r6, r3
 80055e6:	bfb4      	ite	lt
 80055e8:	18d2      	addlt	r2, r2, r3
 80055ea:	1b9e      	subge	r6, r3, r6
 80055ec:	9b04      	ldr	r3, [sp, #16]
 80055ee:	bfbc      	itt	lt
 80055f0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80055f2:	2600      	movlt	r6, #0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	bfb7      	itett	lt
 80055f8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80055fc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005600:	1a9d      	sublt	r5, r3, r2
 8005602:	2300      	movlt	r3, #0
 8005604:	e741      	b.n	800548a <_dtoa_r+0x742>
 8005606:	9e08      	ldr	r6, [sp, #32]
 8005608:	9d05      	ldr	r5, [sp, #20]
 800560a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800560c:	e748      	b.n	80054a0 <_dtoa_r+0x758>
 800560e:	9a08      	ldr	r2, [sp, #32]
 8005610:	e770      	b.n	80054f4 <_dtoa_r+0x7ac>
 8005612:	9b07      	ldr	r3, [sp, #28]
 8005614:	2b01      	cmp	r3, #1
 8005616:	dc19      	bgt.n	800564c <_dtoa_r+0x904>
 8005618:	9b02      	ldr	r3, [sp, #8]
 800561a:	b9bb      	cbnz	r3, 800564c <_dtoa_r+0x904>
 800561c:	9b03      	ldr	r3, [sp, #12]
 800561e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005622:	b99b      	cbnz	r3, 800564c <_dtoa_r+0x904>
 8005624:	9b03      	ldr	r3, [sp, #12]
 8005626:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800562a:	0d1b      	lsrs	r3, r3, #20
 800562c:	051b      	lsls	r3, r3, #20
 800562e:	b183      	cbz	r3, 8005652 <_dtoa_r+0x90a>
 8005630:	9b05      	ldr	r3, [sp, #20]
 8005632:	3301      	adds	r3, #1
 8005634:	9305      	str	r3, [sp, #20]
 8005636:	9b06      	ldr	r3, [sp, #24]
 8005638:	3301      	adds	r3, #1
 800563a:	9306      	str	r3, [sp, #24]
 800563c:	f04f 0801 	mov.w	r8, #1
 8005640:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005642:	2b00      	cmp	r3, #0
 8005644:	f47f af6f 	bne.w	8005526 <_dtoa_r+0x7de>
 8005648:	2001      	movs	r0, #1
 800564a:	e774      	b.n	8005536 <_dtoa_r+0x7ee>
 800564c:	f04f 0800 	mov.w	r8, #0
 8005650:	e7f6      	b.n	8005640 <_dtoa_r+0x8f8>
 8005652:	4698      	mov	r8, r3
 8005654:	e7f4      	b.n	8005640 <_dtoa_r+0x8f8>
 8005656:	d082      	beq.n	800555e <_dtoa_r+0x816>
 8005658:	9a05      	ldr	r2, [sp, #20]
 800565a:	331c      	adds	r3, #28
 800565c:	441a      	add	r2, r3
 800565e:	9205      	str	r2, [sp, #20]
 8005660:	9a06      	ldr	r2, [sp, #24]
 8005662:	441a      	add	r2, r3
 8005664:	441d      	add	r5, r3
 8005666:	9206      	str	r2, [sp, #24]
 8005668:	e779      	b.n	800555e <_dtoa_r+0x816>
 800566a:	4603      	mov	r3, r0
 800566c:	e7f4      	b.n	8005658 <_dtoa_r+0x910>
 800566e:	9b04      	ldr	r3, [sp, #16]
 8005670:	2b00      	cmp	r3, #0
 8005672:	dc37      	bgt.n	80056e4 <_dtoa_r+0x99c>
 8005674:	9b07      	ldr	r3, [sp, #28]
 8005676:	2b02      	cmp	r3, #2
 8005678:	dd34      	ble.n	80056e4 <_dtoa_r+0x99c>
 800567a:	9b04      	ldr	r3, [sp, #16]
 800567c:	9301      	str	r3, [sp, #4]
 800567e:	9b01      	ldr	r3, [sp, #4]
 8005680:	b963      	cbnz	r3, 800569c <_dtoa_r+0x954>
 8005682:	4631      	mov	r1, r6
 8005684:	2205      	movs	r2, #5
 8005686:	4620      	mov	r0, r4
 8005688:	f000 fc6c 	bl	8005f64 <__multadd>
 800568c:	4601      	mov	r1, r0
 800568e:	4606      	mov	r6, r0
 8005690:	4650      	mov	r0, sl
 8005692:	f000 fe81 	bl	8006398 <__mcmp>
 8005696:	2800      	cmp	r0, #0
 8005698:	f73f adbb 	bgt.w	8005212 <_dtoa_r+0x4ca>
 800569c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800569e:	9d00      	ldr	r5, [sp, #0]
 80056a0:	ea6f 0b03 	mvn.w	fp, r3
 80056a4:	f04f 0800 	mov.w	r8, #0
 80056a8:	4631      	mov	r1, r6
 80056aa:	4620      	mov	r0, r4
 80056ac:	f000 fc38 	bl	8005f20 <_Bfree>
 80056b0:	2f00      	cmp	r7, #0
 80056b2:	f43f aeab 	beq.w	800540c <_dtoa_r+0x6c4>
 80056b6:	f1b8 0f00 	cmp.w	r8, #0
 80056ba:	d005      	beq.n	80056c8 <_dtoa_r+0x980>
 80056bc:	45b8      	cmp	r8, r7
 80056be:	d003      	beq.n	80056c8 <_dtoa_r+0x980>
 80056c0:	4641      	mov	r1, r8
 80056c2:	4620      	mov	r0, r4
 80056c4:	f000 fc2c 	bl	8005f20 <_Bfree>
 80056c8:	4639      	mov	r1, r7
 80056ca:	4620      	mov	r0, r4
 80056cc:	f000 fc28 	bl	8005f20 <_Bfree>
 80056d0:	e69c      	b.n	800540c <_dtoa_r+0x6c4>
 80056d2:	2600      	movs	r6, #0
 80056d4:	4637      	mov	r7, r6
 80056d6:	e7e1      	b.n	800569c <_dtoa_r+0x954>
 80056d8:	46bb      	mov	fp, r7
 80056da:	4637      	mov	r7, r6
 80056dc:	e599      	b.n	8005212 <_dtoa_r+0x4ca>
 80056de:	bf00      	nop
 80056e0:	40240000 	.word	0x40240000
 80056e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	f000 80c8 	beq.w	800587c <_dtoa_r+0xb34>
 80056ec:	9b04      	ldr	r3, [sp, #16]
 80056ee:	9301      	str	r3, [sp, #4]
 80056f0:	2d00      	cmp	r5, #0
 80056f2:	dd05      	ble.n	8005700 <_dtoa_r+0x9b8>
 80056f4:	4639      	mov	r1, r7
 80056f6:	462a      	mov	r2, r5
 80056f8:	4620      	mov	r0, r4
 80056fa:	f000 fde1 	bl	80062c0 <__lshift>
 80056fe:	4607      	mov	r7, r0
 8005700:	f1b8 0f00 	cmp.w	r8, #0
 8005704:	d05b      	beq.n	80057be <_dtoa_r+0xa76>
 8005706:	6879      	ldr	r1, [r7, #4]
 8005708:	4620      	mov	r0, r4
 800570a:	f000 fbc9 	bl	8005ea0 <_Balloc>
 800570e:	4605      	mov	r5, r0
 8005710:	b928      	cbnz	r0, 800571e <_dtoa_r+0x9d6>
 8005712:	4b83      	ldr	r3, [pc, #524]	; (8005920 <_dtoa_r+0xbd8>)
 8005714:	4602      	mov	r2, r0
 8005716:	f240 21ef 	movw	r1, #751	; 0x2ef
 800571a:	f7ff bb2e 	b.w	8004d7a <_dtoa_r+0x32>
 800571e:	693a      	ldr	r2, [r7, #16]
 8005720:	3202      	adds	r2, #2
 8005722:	0092      	lsls	r2, r2, #2
 8005724:	f107 010c 	add.w	r1, r7, #12
 8005728:	300c      	adds	r0, #12
 800572a:	f001 f817 	bl	800675c <memcpy>
 800572e:	2201      	movs	r2, #1
 8005730:	4629      	mov	r1, r5
 8005732:	4620      	mov	r0, r4
 8005734:	f000 fdc4 	bl	80062c0 <__lshift>
 8005738:	9b00      	ldr	r3, [sp, #0]
 800573a:	3301      	adds	r3, #1
 800573c:	9304      	str	r3, [sp, #16]
 800573e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005742:	4413      	add	r3, r2
 8005744:	9308      	str	r3, [sp, #32]
 8005746:	9b02      	ldr	r3, [sp, #8]
 8005748:	f003 0301 	and.w	r3, r3, #1
 800574c:	46b8      	mov	r8, r7
 800574e:	9306      	str	r3, [sp, #24]
 8005750:	4607      	mov	r7, r0
 8005752:	9b04      	ldr	r3, [sp, #16]
 8005754:	4631      	mov	r1, r6
 8005756:	3b01      	subs	r3, #1
 8005758:	4650      	mov	r0, sl
 800575a:	9301      	str	r3, [sp, #4]
 800575c:	f7ff fa69 	bl	8004c32 <quorem>
 8005760:	4641      	mov	r1, r8
 8005762:	9002      	str	r0, [sp, #8]
 8005764:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005768:	4650      	mov	r0, sl
 800576a:	f000 fe15 	bl	8006398 <__mcmp>
 800576e:	463a      	mov	r2, r7
 8005770:	9005      	str	r0, [sp, #20]
 8005772:	4631      	mov	r1, r6
 8005774:	4620      	mov	r0, r4
 8005776:	f000 fe2b 	bl	80063d0 <__mdiff>
 800577a:	68c2      	ldr	r2, [r0, #12]
 800577c:	4605      	mov	r5, r0
 800577e:	bb02      	cbnz	r2, 80057c2 <_dtoa_r+0xa7a>
 8005780:	4601      	mov	r1, r0
 8005782:	4650      	mov	r0, sl
 8005784:	f000 fe08 	bl	8006398 <__mcmp>
 8005788:	4602      	mov	r2, r0
 800578a:	4629      	mov	r1, r5
 800578c:	4620      	mov	r0, r4
 800578e:	9209      	str	r2, [sp, #36]	; 0x24
 8005790:	f000 fbc6 	bl	8005f20 <_Bfree>
 8005794:	9b07      	ldr	r3, [sp, #28]
 8005796:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005798:	9d04      	ldr	r5, [sp, #16]
 800579a:	ea43 0102 	orr.w	r1, r3, r2
 800579e:	9b06      	ldr	r3, [sp, #24]
 80057a0:	4319      	orrs	r1, r3
 80057a2:	d110      	bne.n	80057c6 <_dtoa_r+0xa7e>
 80057a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80057a8:	d029      	beq.n	80057fe <_dtoa_r+0xab6>
 80057aa:	9b05      	ldr	r3, [sp, #20]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	dd02      	ble.n	80057b6 <_dtoa_r+0xa6e>
 80057b0:	9b02      	ldr	r3, [sp, #8]
 80057b2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80057b6:	9b01      	ldr	r3, [sp, #4]
 80057b8:	f883 9000 	strb.w	r9, [r3]
 80057bc:	e774      	b.n	80056a8 <_dtoa_r+0x960>
 80057be:	4638      	mov	r0, r7
 80057c0:	e7ba      	b.n	8005738 <_dtoa_r+0x9f0>
 80057c2:	2201      	movs	r2, #1
 80057c4:	e7e1      	b.n	800578a <_dtoa_r+0xa42>
 80057c6:	9b05      	ldr	r3, [sp, #20]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	db04      	blt.n	80057d6 <_dtoa_r+0xa8e>
 80057cc:	9907      	ldr	r1, [sp, #28]
 80057ce:	430b      	orrs	r3, r1
 80057d0:	9906      	ldr	r1, [sp, #24]
 80057d2:	430b      	orrs	r3, r1
 80057d4:	d120      	bne.n	8005818 <_dtoa_r+0xad0>
 80057d6:	2a00      	cmp	r2, #0
 80057d8:	dded      	ble.n	80057b6 <_dtoa_r+0xa6e>
 80057da:	4651      	mov	r1, sl
 80057dc:	2201      	movs	r2, #1
 80057de:	4620      	mov	r0, r4
 80057e0:	f000 fd6e 	bl	80062c0 <__lshift>
 80057e4:	4631      	mov	r1, r6
 80057e6:	4682      	mov	sl, r0
 80057e8:	f000 fdd6 	bl	8006398 <__mcmp>
 80057ec:	2800      	cmp	r0, #0
 80057ee:	dc03      	bgt.n	80057f8 <_dtoa_r+0xab0>
 80057f0:	d1e1      	bne.n	80057b6 <_dtoa_r+0xa6e>
 80057f2:	f019 0f01 	tst.w	r9, #1
 80057f6:	d0de      	beq.n	80057b6 <_dtoa_r+0xa6e>
 80057f8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80057fc:	d1d8      	bne.n	80057b0 <_dtoa_r+0xa68>
 80057fe:	9a01      	ldr	r2, [sp, #4]
 8005800:	2339      	movs	r3, #57	; 0x39
 8005802:	7013      	strb	r3, [r2, #0]
 8005804:	462b      	mov	r3, r5
 8005806:	461d      	mov	r5, r3
 8005808:	3b01      	subs	r3, #1
 800580a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800580e:	2a39      	cmp	r2, #57	; 0x39
 8005810:	d06c      	beq.n	80058ec <_dtoa_r+0xba4>
 8005812:	3201      	adds	r2, #1
 8005814:	701a      	strb	r2, [r3, #0]
 8005816:	e747      	b.n	80056a8 <_dtoa_r+0x960>
 8005818:	2a00      	cmp	r2, #0
 800581a:	dd07      	ble.n	800582c <_dtoa_r+0xae4>
 800581c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005820:	d0ed      	beq.n	80057fe <_dtoa_r+0xab6>
 8005822:	9a01      	ldr	r2, [sp, #4]
 8005824:	f109 0301 	add.w	r3, r9, #1
 8005828:	7013      	strb	r3, [r2, #0]
 800582a:	e73d      	b.n	80056a8 <_dtoa_r+0x960>
 800582c:	9b04      	ldr	r3, [sp, #16]
 800582e:	9a08      	ldr	r2, [sp, #32]
 8005830:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005834:	4293      	cmp	r3, r2
 8005836:	d043      	beq.n	80058c0 <_dtoa_r+0xb78>
 8005838:	4651      	mov	r1, sl
 800583a:	2300      	movs	r3, #0
 800583c:	220a      	movs	r2, #10
 800583e:	4620      	mov	r0, r4
 8005840:	f000 fb90 	bl	8005f64 <__multadd>
 8005844:	45b8      	cmp	r8, r7
 8005846:	4682      	mov	sl, r0
 8005848:	f04f 0300 	mov.w	r3, #0
 800584c:	f04f 020a 	mov.w	r2, #10
 8005850:	4641      	mov	r1, r8
 8005852:	4620      	mov	r0, r4
 8005854:	d107      	bne.n	8005866 <_dtoa_r+0xb1e>
 8005856:	f000 fb85 	bl	8005f64 <__multadd>
 800585a:	4680      	mov	r8, r0
 800585c:	4607      	mov	r7, r0
 800585e:	9b04      	ldr	r3, [sp, #16]
 8005860:	3301      	adds	r3, #1
 8005862:	9304      	str	r3, [sp, #16]
 8005864:	e775      	b.n	8005752 <_dtoa_r+0xa0a>
 8005866:	f000 fb7d 	bl	8005f64 <__multadd>
 800586a:	4639      	mov	r1, r7
 800586c:	4680      	mov	r8, r0
 800586e:	2300      	movs	r3, #0
 8005870:	220a      	movs	r2, #10
 8005872:	4620      	mov	r0, r4
 8005874:	f000 fb76 	bl	8005f64 <__multadd>
 8005878:	4607      	mov	r7, r0
 800587a:	e7f0      	b.n	800585e <_dtoa_r+0xb16>
 800587c:	9b04      	ldr	r3, [sp, #16]
 800587e:	9301      	str	r3, [sp, #4]
 8005880:	9d00      	ldr	r5, [sp, #0]
 8005882:	4631      	mov	r1, r6
 8005884:	4650      	mov	r0, sl
 8005886:	f7ff f9d4 	bl	8004c32 <quorem>
 800588a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800588e:	9b00      	ldr	r3, [sp, #0]
 8005890:	f805 9b01 	strb.w	r9, [r5], #1
 8005894:	1aea      	subs	r2, r5, r3
 8005896:	9b01      	ldr	r3, [sp, #4]
 8005898:	4293      	cmp	r3, r2
 800589a:	dd07      	ble.n	80058ac <_dtoa_r+0xb64>
 800589c:	4651      	mov	r1, sl
 800589e:	2300      	movs	r3, #0
 80058a0:	220a      	movs	r2, #10
 80058a2:	4620      	mov	r0, r4
 80058a4:	f000 fb5e 	bl	8005f64 <__multadd>
 80058a8:	4682      	mov	sl, r0
 80058aa:	e7ea      	b.n	8005882 <_dtoa_r+0xb3a>
 80058ac:	9b01      	ldr	r3, [sp, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	bfc8      	it	gt
 80058b2:	461d      	movgt	r5, r3
 80058b4:	9b00      	ldr	r3, [sp, #0]
 80058b6:	bfd8      	it	le
 80058b8:	2501      	movle	r5, #1
 80058ba:	441d      	add	r5, r3
 80058bc:	f04f 0800 	mov.w	r8, #0
 80058c0:	4651      	mov	r1, sl
 80058c2:	2201      	movs	r2, #1
 80058c4:	4620      	mov	r0, r4
 80058c6:	f000 fcfb 	bl	80062c0 <__lshift>
 80058ca:	4631      	mov	r1, r6
 80058cc:	4682      	mov	sl, r0
 80058ce:	f000 fd63 	bl	8006398 <__mcmp>
 80058d2:	2800      	cmp	r0, #0
 80058d4:	dc96      	bgt.n	8005804 <_dtoa_r+0xabc>
 80058d6:	d102      	bne.n	80058de <_dtoa_r+0xb96>
 80058d8:	f019 0f01 	tst.w	r9, #1
 80058dc:	d192      	bne.n	8005804 <_dtoa_r+0xabc>
 80058de:	462b      	mov	r3, r5
 80058e0:	461d      	mov	r5, r3
 80058e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80058e6:	2a30      	cmp	r2, #48	; 0x30
 80058e8:	d0fa      	beq.n	80058e0 <_dtoa_r+0xb98>
 80058ea:	e6dd      	b.n	80056a8 <_dtoa_r+0x960>
 80058ec:	9a00      	ldr	r2, [sp, #0]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d189      	bne.n	8005806 <_dtoa_r+0xabe>
 80058f2:	f10b 0b01 	add.w	fp, fp, #1
 80058f6:	2331      	movs	r3, #49	; 0x31
 80058f8:	e796      	b.n	8005828 <_dtoa_r+0xae0>
 80058fa:	4b0a      	ldr	r3, [pc, #40]	; (8005924 <_dtoa_r+0xbdc>)
 80058fc:	f7ff ba99 	b.w	8004e32 <_dtoa_r+0xea>
 8005900:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005902:	2b00      	cmp	r3, #0
 8005904:	f47f aa6d 	bne.w	8004de2 <_dtoa_r+0x9a>
 8005908:	4b07      	ldr	r3, [pc, #28]	; (8005928 <_dtoa_r+0xbe0>)
 800590a:	f7ff ba92 	b.w	8004e32 <_dtoa_r+0xea>
 800590e:	9b01      	ldr	r3, [sp, #4]
 8005910:	2b00      	cmp	r3, #0
 8005912:	dcb5      	bgt.n	8005880 <_dtoa_r+0xb38>
 8005914:	9b07      	ldr	r3, [sp, #28]
 8005916:	2b02      	cmp	r3, #2
 8005918:	f73f aeb1 	bgt.w	800567e <_dtoa_r+0x936>
 800591c:	e7b0      	b.n	8005880 <_dtoa_r+0xb38>
 800591e:	bf00      	nop
 8005920:	08007338 	.word	0x08007338
 8005924:	08007298 	.word	0x08007298
 8005928:	080072bc 	.word	0x080072bc

0800592c <__ssputs_r>:
 800592c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005930:	688e      	ldr	r6, [r1, #8]
 8005932:	461f      	mov	r7, r3
 8005934:	42be      	cmp	r6, r7
 8005936:	680b      	ldr	r3, [r1, #0]
 8005938:	4682      	mov	sl, r0
 800593a:	460c      	mov	r4, r1
 800593c:	4690      	mov	r8, r2
 800593e:	d82c      	bhi.n	800599a <__ssputs_r+0x6e>
 8005940:	898a      	ldrh	r2, [r1, #12]
 8005942:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005946:	d026      	beq.n	8005996 <__ssputs_r+0x6a>
 8005948:	6965      	ldr	r5, [r4, #20]
 800594a:	6909      	ldr	r1, [r1, #16]
 800594c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005950:	eba3 0901 	sub.w	r9, r3, r1
 8005954:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005958:	1c7b      	adds	r3, r7, #1
 800595a:	444b      	add	r3, r9
 800595c:	106d      	asrs	r5, r5, #1
 800595e:	429d      	cmp	r5, r3
 8005960:	bf38      	it	cc
 8005962:	461d      	movcc	r5, r3
 8005964:	0553      	lsls	r3, r2, #21
 8005966:	d527      	bpl.n	80059b8 <__ssputs_r+0x8c>
 8005968:	4629      	mov	r1, r5
 800596a:	f000 f95f 	bl	8005c2c <_malloc_r>
 800596e:	4606      	mov	r6, r0
 8005970:	b360      	cbz	r0, 80059cc <__ssputs_r+0xa0>
 8005972:	6921      	ldr	r1, [r4, #16]
 8005974:	464a      	mov	r2, r9
 8005976:	f000 fef1 	bl	800675c <memcpy>
 800597a:	89a3      	ldrh	r3, [r4, #12]
 800597c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005984:	81a3      	strh	r3, [r4, #12]
 8005986:	6126      	str	r6, [r4, #16]
 8005988:	6165      	str	r5, [r4, #20]
 800598a:	444e      	add	r6, r9
 800598c:	eba5 0509 	sub.w	r5, r5, r9
 8005990:	6026      	str	r6, [r4, #0]
 8005992:	60a5      	str	r5, [r4, #8]
 8005994:	463e      	mov	r6, r7
 8005996:	42be      	cmp	r6, r7
 8005998:	d900      	bls.n	800599c <__ssputs_r+0x70>
 800599a:	463e      	mov	r6, r7
 800599c:	6820      	ldr	r0, [r4, #0]
 800599e:	4632      	mov	r2, r6
 80059a0:	4641      	mov	r1, r8
 80059a2:	f000 fe6b 	bl	800667c <memmove>
 80059a6:	68a3      	ldr	r3, [r4, #8]
 80059a8:	1b9b      	subs	r3, r3, r6
 80059aa:	60a3      	str	r3, [r4, #8]
 80059ac:	6823      	ldr	r3, [r4, #0]
 80059ae:	4433      	add	r3, r6
 80059b0:	6023      	str	r3, [r4, #0]
 80059b2:	2000      	movs	r0, #0
 80059b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059b8:	462a      	mov	r2, r5
 80059ba:	f000 fe30 	bl	800661e <_realloc_r>
 80059be:	4606      	mov	r6, r0
 80059c0:	2800      	cmp	r0, #0
 80059c2:	d1e0      	bne.n	8005986 <__ssputs_r+0x5a>
 80059c4:	6921      	ldr	r1, [r4, #16]
 80059c6:	4650      	mov	r0, sl
 80059c8:	f000 ff0a 	bl	80067e0 <_free_r>
 80059cc:	230c      	movs	r3, #12
 80059ce:	f8ca 3000 	str.w	r3, [sl]
 80059d2:	89a3      	ldrh	r3, [r4, #12]
 80059d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059d8:	81a3      	strh	r3, [r4, #12]
 80059da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059de:	e7e9      	b.n	80059b4 <__ssputs_r+0x88>

080059e0 <_svfiprintf_r>:
 80059e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059e4:	4698      	mov	r8, r3
 80059e6:	898b      	ldrh	r3, [r1, #12]
 80059e8:	061b      	lsls	r3, r3, #24
 80059ea:	b09d      	sub	sp, #116	; 0x74
 80059ec:	4607      	mov	r7, r0
 80059ee:	460d      	mov	r5, r1
 80059f0:	4614      	mov	r4, r2
 80059f2:	d50e      	bpl.n	8005a12 <_svfiprintf_r+0x32>
 80059f4:	690b      	ldr	r3, [r1, #16]
 80059f6:	b963      	cbnz	r3, 8005a12 <_svfiprintf_r+0x32>
 80059f8:	2140      	movs	r1, #64	; 0x40
 80059fa:	f000 f917 	bl	8005c2c <_malloc_r>
 80059fe:	6028      	str	r0, [r5, #0]
 8005a00:	6128      	str	r0, [r5, #16]
 8005a02:	b920      	cbnz	r0, 8005a0e <_svfiprintf_r+0x2e>
 8005a04:	230c      	movs	r3, #12
 8005a06:	603b      	str	r3, [r7, #0]
 8005a08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a0c:	e0d0      	b.n	8005bb0 <_svfiprintf_r+0x1d0>
 8005a0e:	2340      	movs	r3, #64	; 0x40
 8005a10:	616b      	str	r3, [r5, #20]
 8005a12:	2300      	movs	r3, #0
 8005a14:	9309      	str	r3, [sp, #36]	; 0x24
 8005a16:	2320      	movs	r3, #32
 8005a18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a20:	2330      	movs	r3, #48	; 0x30
 8005a22:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005bc8 <_svfiprintf_r+0x1e8>
 8005a26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a2a:	f04f 0901 	mov.w	r9, #1
 8005a2e:	4623      	mov	r3, r4
 8005a30:	469a      	mov	sl, r3
 8005a32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a36:	b10a      	cbz	r2, 8005a3c <_svfiprintf_r+0x5c>
 8005a38:	2a25      	cmp	r2, #37	; 0x25
 8005a3a:	d1f9      	bne.n	8005a30 <_svfiprintf_r+0x50>
 8005a3c:	ebba 0b04 	subs.w	fp, sl, r4
 8005a40:	d00b      	beq.n	8005a5a <_svfiprintf_r+0x7a>
 8005a42:	465b      	mov	r3, fp
 8005a44:	4622      	mov	r2, r4
 8005a46:	4629      	mov	r1, r5
 8005a48:	4638      	mov	r0, r7
 8005a4a:	f7ff ff6f 	bl	800592c <__ssputs_r>
 8005a4e:	3001      	adds	r0, #1
 8005a50:	f000 80a9 	beq.w	8005ba6 <_svfiprintf_r+0x1c6>
 8005a54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a56:	445a      	add	r2, fp
 8005a58:	9209      	str	r2, [sp, #36]	; 0x24
 8005a5a:	f89a 3000 	ldrb.w	r3, [sl]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f000 80a1 	beq.w	8005ba6 <_svfiprintf_r+0x1c6>
 8005a64:	2300      	movs	r3, #0
 8005a66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a6e:	f10a 0a01 	add.w	sl, sl, #1
 8005a72:	9304      	str	r3, [sp, #16]
 8005a74:	9307      	str	r3, [sp, #28]
 8005a76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a7a:	931a      	str	r3, [sp, #104]	; 0x68
 8005a7c:	4654      	mov	r4, sl
 8005a7e:	2205      	movs	r2, #5
 8005a80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a84:	4850      	ldr	r0, [pc, #320]	; (8005bc8 <_svfiprintf_r+0x1e8>)
 8005a86:	f7fa fbab 	bl	80001e0 <memchr>
 8005a8a:	9a04      	ldr	r2, [sp, #16]
 8005a8c:	b9d8      	cbnz	r0, 8005ac6 <_svfiprintf_r+0xe6>
 8005a8e:	06d0      	lsls	r0, r2, #27
 8005a90:	bf44      	itt	mi
 8005a92:	2320      	movmi	r3, #32
 8005a94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a98:	0711      	lsls	r1, r2, #28
 8005a9a:	bf44      	itt	mi
 8005a9c:	232b      	movmi	r3, #43	; 0x2b
 8005a9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005aa2:	f89a 3000 	ldrb.w	r3, [sl]
 8005aa6:	2b2a      	cmp	r3, #42	; 0x2a
 8005aa8:	d015      	beq.n	8005ad6 <_svfiprintf_r+0xf6>
 8005aaa:	9a07      	ldr	r2, [sp, #28]
 8005aac:	4654      	mov	r4, sl
 8005aae:	2000      	movs	r0, #0
 8005ab0:	f04f 0c0a 	mov.w	ip, #10
 8005ab4:	4621      	mov	r1, r4
 8005ab6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005aba:	3b30      	subs	r3, #48	; 0x30
 8005abc:	2b09      	cmp	r3, #9
 8005abe:	d94d      	bls.n	8005b5c <_svfiprintf_r+0x17c>
 8005ac0:	b1b0      	cbz	r0, 8005af0 <_svfiprintf_r+0x110>
 8005ac2:	9207      	str	r2, [sp, #28]
 8005ac4:	e014      	b.n	8005af0 <_svfiprintf_r+0x110>
 8005ac6:	eba0 0308 	sub.w	r3, r0, r8
 8005aca:	fa09 f303 	lsl.w	r3, r9, r3
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	9304      	str	r3, [sp, #16]
 8005ad2:	46a2      	mov	sl, r4
 8005ad4:	e7d2      	b.n	8005a7c <_svfiprintf_r+0x9c>
 8005ad6:	9b03      	ldr	r3, [sp, #12]
 8005ad8:	1d19      	adds	r1, r3, #4
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	9103      	str	r1, [sp, #12]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	bfbb      	ittet	lt
 8005ae2:	425b      	neglt	r3, r3
 8005ae4:	f042 0202 	orrlt.w	r2, r2, #2
 8005ae8:	9307      	strge	r3, [sp, #28]
 8005aea:	9307      	strlt	r3, [sp, #28]
 8005aec:	bfb8      	it	lt
 8005aee:	9204      	strlt	r2, [sp, #16]
 8005af0:	7823      	ldrb	r3, [r4, #0]
 8005af2:	2b2e      	cmp	r3, #46	; 0x2e
 8005af4:	d10c      	bne.n	8005b10 <_svfiprintf_r+0x130>
 8005af6:	7863      	ldrb	r3, [r4, #1]
 8005af8:	2b2a      	cmp	r3, #42	; 0x2a
 8005afa:	d134      	bne.n	8005b66 <_svfiprintf_r+0x186>
 8005afc:	9b03      	ldr	r3, [sp, #12]
 8005afe:	1d1a      	adds	r2, r3, #4
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	9203      	str	r2, [sp, #12]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	bfb8      	it	lt
 8005b08:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005b0c:	3402      	adds	r4, #2
 8005b0e:	9305      	str	r3, [sp, #20]
 8005b10:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005bd8 <_svfiprintf_r+0x1f8>
 8005b14:	7821      	ldrb	r1, [r4, #0]
 8005b16:	2203      	movs	r2, #3
 8005b18:	4650      	mov	r0, sl
 8005b1a:	f7fa fb61 	bl	80001e0 <memchr>
 8005b1e:	b138      	cbz	r0, 8005b30 <_svfiprintf_r+0x150>
 8005b20:	9b04      	ldr	r3, [sp, #16]
 8005b22:	eba0 000a 	sub.w	r0, r0, sl
 8005b26:	2240      	movs	r2, #64	; 0x40
 8005b28:	4082      	lsls	r2, r0
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	3401      	adds	r4, #1
 8005b2e:	9304      	str	r3, [sp, #16]
 8005b30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b34:	4825      	ldr	r0, [pc, #148]	; (8005bcc <_svfiprintf_r+0x1ec>)
 8005b36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b3a:	2206      	movs	r2, #6
 8005b3c:	f7fa fb50 	bl	80001e0 <memchr>
 8005b40:	2800      	cmp	r0, #0
 8005b42:	d038      	beq.n	8005bb6 <_svfiprintf_r+0x1d6>
 8005b44:	4b22      	ldr	r3, [pc, #136]	; (8005bd0 <_svfiprintf_r+0x1f0>)
 8005b46:	bb1b      	cbnz	r3, 8005b90 <_svfiprintf_r+0x1b0>
 8005b48:	9b03      	ldr	r3, [sp, #12]
 8005b4a:	3307      	adds	r3, #7
 8005b4c:	f023 0307 	bic.w	r3, r3, #7
 8005b50:	3308      	adds	r3, #8
 8005b52:	9303      	str	r3, [sp, #12]
 8005b54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b56:	4433      	add	r3, r6
 8005b58:	9309      	str	r3, [sp, #36]	; 0x24
 8005b5a:	e768      	b.n	8005a2e <_svfiprintf_r+0x4e>
 8005b5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b60:	460c      	mov	r4, r1
 8005b62:	2001      	movs	r0, #1
 8005b64:	e7a6      	b.n	8005ab4 <_svfiprintf_r+0xd4>
 8005b66:	2300      	movs	r3, #0
 8005b68:	3401      	adds	r4, #1
 8005b6a:	9305      	str	r3, [sp, #20]
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	f04f 0c0a 	mov.w	ip, #10
 8005b72:	4620      	mov	r0, r4
 8005b74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b78:	3a30      	subs	r2, #48	; 0x30
 8005b7a:	2a09      	cmp	r2, #9
 8005b7c:	d903      	bls.n	8005b86 <_svfiprintf_r+0x1a6>
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d0c6      	beq.n	8005b10 <_svfiprintf_r+0x130>
 8005b82:	9105      	str	r1, [sp, #20]
 8005b84:	e7c4      	b.n	8005b10 <_svfiprintf_r+0x130>
 8005b86:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b8a:	4604      	mov	r4, r0
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e7f0      	b.n	8005b72 <_svfiprintf_r+0x192>
 8005b90:	ab03      	add	r3, sp, #12
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	462a      	mov	r2, r5
 8005b96:	4b0f      	ldr	r3, [pc, #60]	; (8005bd4 <_svfiprintf_r+0x1f4>)
 8005b98:	a904      	add	r1, sp, #16
 8005b9a:	4638      	mov	r0, r7
 8005b9c:	f7fe fb68 	bl	8004270 <_printf_float>
 8005ba0:	1c42      	adds	r2, r0, #1
 8005ba2:	4606      	mov	r6, r0
 8005ba4:	d1d6      	bne.n	8005b54 <_svfiprintf_r+0x174>
 8005ba6:	89ab      	ldrh	r3, [r5, #12]
 8005ba8:	065b      	lsls	r3, r3, #25
 8005baa:	f53f af2d 	bmi.w	8005a08 <_svfiprintf_r+0x28>
 8005bae:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005bb0:	b01d      	add	sp, #116	; 0x74
 8005bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bb6:	ab03      	add	r3, sp, #12
 8005bb8:	9300      	str	r3, [sp, #0]
 8005bba:	462a      	mov	r2, r5
 8005bbc:	4b05      	ldr	r3, [pc, #20]	; (8005bd4 <_svfiprintf_r+0x1f4>)
 8005bbe:	a904      	add	r1, sp, #16
 8005bc0:	4638      	mov	r0, r7
 8005bc2:	f7fe fdf9 	bl	80047b8 <_printf_i>
 8005bc6:	e7eb      	b.n	8005ba0 <_svfiprintf_r+0x1c0>
 8005bc8:	08007349 	.word	0x08007349
 8005bcc:	08007353 	.word	0x08007353
 8005bd0:	08004271 	.word	0x08004271
 8005bd4:	0800592d 	.word	0x0800592d
 8005bd8:	0800734f 	.word	0x0800734f

08005bdc <malloc>:
 8005bdc:	4b02      	ldr	r3, [pc, #8]	; (8005be8 <malloc+0xc>)
 8005bde:	4601      	mov	r1, r0
 8005be0:	6818      	ldr	r0, [r3, #0]
 8005be2:	f000 b823 	b.w	8005c2c <_malloc_r>
 8005be6:	bf00      	nop
 8005be8:	20000060 	.word	0x20000060

08005bec <sbrk_aligned>:
 8005bec:	b570      	push	{r4, r5, r6, lr}
 8005bee:	4e0e      	ldr	r6, [pc, #56]	; (8005c28 <sbrk_aligned+0x3c>)
 8005bf0:	460c      	mov	r4, r1
 8005bf2:	6831      	ldr	r1, [r6, #0]
 8005bf4:	4605      	mov	r5, r0
 8005bf6:	b911      	cbnz	r1, 8005bfe <sbrk_aligned+0x12>
 8005bf8:	f000 fd8e 	bl	8006718 <_sbrk_r>
 8005bfc:	6030      	str	r0, [r6, #0]
 8005bfe:	4621      	mov	r1, r4
 8005c00:	4628      	mov	r0, r5
 8005c02:	f000 fd89 	bl	8006718 <_sbrk_r>
 8005c06:	1c43      	adds	r3, r0, #1
 8005c08:	d00a      	beq.n	8005c20 <sbrk_aligned+0x34>
 8005c0a:	1cc4      	adds	r4, r0, #3
 8005c0c:	f024 0403 	bic.w	r4, r4, #3
 8005c10:	42a0      	cmp	r0, r4
 8005c12:	d007      	beq.n	8005c24 <sbrk_aligned+0x38>
 8005c14:	1a21      	subs	r1, r4, r0
 8005c16:	4628      	mov	r0, r5
 8005c18:	f000 fd7e 	bl	8006718 <_sbrk_r>
 8005c1c:	3001      	adds	r0, #1
 8005c1e:	d101      	bne.n	8005c24 <sbrk_aligned+0x38>
 8005c20:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005c24:	4620      	mov	r0, r4
 8005c26:	bd70      	pop	{r4, r5, r6, pc}
 8005c28:	200014bc 	.word	0x200014bc

08005c2c <_malloc_r>:
 8005c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c30:	1ccd      	adds	r5, r1, #3
 8005c32:	f025 0503 	bic.w	r5, r5, #3
 8005c36:	3508      	adds	r5, #8
 8005c38:	2d0c      	cmp	r5, #12
 8005c3a:	bf38      	it	cc
 8005c3c:	250c      	movcc	r5, #12
 8005c3e:	2d00      	cmp	r5, #0
 8005c40:	4607      	mov	r7, r0
 8005c42:	db01      	blt.n	8005c48 <_malloc_r+0x1c>
 8005c44:	42a9      	cmp	r1, r5
 8005c46:	d905      	bls.n	8005c54 <_malloc_r+0x28>
 8005c48:	230c      	movs	r3, #12
 8005c4a:	603b      	str	r3, [r7, #0]
 8005c4c:	2600      	movs	r6, #0
 8005c4e:	4630      	mov	r0, r6
 8005c50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c54:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005d28 <_malloc_r+0xfc>
 8005c58:	f000 f916 	bl	8005e88 <__malloc_lock>
 8005c5c:	f8d8 3000 	ldr.w	r3, [r8]
 8005c60:	461c      	mov	r4, r3
 8005c62:	bb5c      	cbnz	r4, 8005cbc <_malloc_r+0x90>
 8005c64:	4629      	mov	r1, r5
 8005c66:	4638      	mov	r0, r7
 8005c68:	f7ff ffc0 	bl	8005bec <sbrk_aligned>
 8005c6c:	1c43      	adds	r3, r0, #1
 8005c6e:	4604      	mov	r4, r0
 8005c70:	d155      	bne.n	8005d1e <_malloc_r+0xf2>
 8005c72:	f8d8 4000 	ldr.w	r4, [r8]
 8005c76:	4626      	mov	r6, r4
 8005c78:	2e00      	cmp	r6, #0
 8005c7a:	d145      	bne.n	8005d08 <_malloc_r+0xdc>
 8005c7c:	2c00      	cmp	r4, #0
 8005c7e:	d048      	beq.n	8005d12 <_malloc_r+0xe6>
 8005c80:	6823      	ldr	r3, [r4, #0]
 8005c82:	4631      	mov	r1, r6
 8005c84:	4638      	mov	r0, r7
 8005c86:	eb04 0903 	add.w	r9, r4, r3
 8005c8a:	f000 fd45 	bl	8006718 <_sbrk_r>
 8005c8e:	4581      	cmp	r9, r0
 8005c90:	d13f      	bne.n	8005d12 <_malloc_r+0xe6>
 8005c92:	6821      	ldr	r1, [r4, #0]
 8005c94:	1a6d      	subs	r5, r5, r1
 8005c96:	4629      	mov	r1, r5
 8005c98:	4638      	mov	r0, r7
 8005c9a:	f7ff ffa7 	bl	8005bec <sbrk_aligned>
 8005c9e:	3001      	adds	r0, #1
 8005ca0:	d037      	beq.n	8005d12 <_malloc_r+0xe6>
 8005ca2:	6823      	ldr	r3, [r4, #0]
 8005ca4:	442b      	add	r3, r5
 8005ca6:	6023      	str	r3, [r4, #0]
 8005ca8:	f8d8 3000 	ldr.w	r3, [r8]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d038      	beq.n	8005d22 <_malloc_r+0xf6>
 8005cb0:	685a      	ldr	r2, [r3, #4]
 8005cb2:	42a2      	cmp	r2, r4
 8005cb4:	d12b      	bne.n	8005d0e <_malloc_r+0xe2>
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	605a      	str	r2, [r3, #4]
 8005cba:	e00f      	b.n	8005cdc <_malloc_r+0xb0>
 8005cbc:	6822      	ldr	r2, [r4, #0]
 8005cbe:	1b52      	subs	r2, r2, r5
 8005cc0:	d41f      	bmi.n	8005d02 <_malloc_r+0xd6>
 8005cc2:	2a0b      	cmp	r2, #11
 8005cc4:	d917      	bls.n	8005cf6 <_malloc_r+0xca>
 8005cc6:	1961      	adds	r1, r4, r5
 8005cc8:	42a3      	cmp	r3, r4
 8005cca:	6025      	str	r5, [r4, #0]
 8005ccc:	bf18      	it	ne
 8005cce:	6059      	strne	r1, [r3, #4]
 8005cd0:	6863      	ldr	r3, [r4, #4]
 8005cd2:	bf08      	it	eq
 8005cd4:	f8c8 1000 	streq.w	r1, [r8]
 8005cd8:	5162      	str	r2, [r4, r5]
 8005cda:	604b      	str	r3, [r1, #4]
 8005cdc:	4638      	mov	r0, r7
 8005cde:	f104 060b 	add.w	r6, r4, #11
 8005ce2:	f000 f8d7 	bl	8005e94 <__malloc_unlock>
 8005ce6:	f026 0607 	bic.w	r6, r6, #7
 8005cea:	1d23      	adds	r3, r4, #4
 8005cec:	1af2      	subs	r2, r6, r3
 8005cee:	d0ae      	beq.n	8005c4e <_malloc_r+0x22>
 8005cf0:	1b9b      	subs	r3, r3, r6
 8005cf2:	50a3      	str	r3, [r4, r2]
 8005cf4:	e7ab      	b.n	8005c4e <_malloc_r+0x22>
 8005cf6:	42a3      	cmp	r3, r4
 8005cf8:	6862      	ldr	r2, [r4, #4]
 8005cfa:	d1dd      	bne.n	8005cb8 <_malloc_r+0x8c>
 8005cfc:	f8c8 2000 	str.w	r2, [r8]
 8005d00:	e7ec      	b.n	8005cdc <_malloc_r+0xb0>
 8005d02:	4623      	mov	r3, r4
 8005d04:	6864      	ldr	r4, [r4, #4]
 8005d06:	e7ac      	b.n	8005c62 <_malloc_r+0x36>
 8005d08:	4634      	mov	r4, r6
 8005d0a:	6876      	ldr	r6, [r6, #4]
 8005d0c:	e7b4      	b.n	8005c78 <_malloc_r+0x4c>
 8005d0e:	4613      	mov	r3, r2
 8005d10:	e7cc      	b.n	8005cac <_malloc_r+0x80>
 8005d12:	230c      	movs	r3, #12
 8005d14:	603b      	str	r3, [r7, #0]
 8005d16:	4638      	mov	r0, r7
 8005d18:	f000 f8bc 	bl	8005e94 <__malloc_unlock>
 8005d1c:	e797      	b.n	8005c4e <_malloc_r+0x22>
 8005d1e:	6025      	str	r5, [r4, #0]
 8005d20:	e7dc      	b.n	8005cdc <_malloc_r+0xb0>
 8005d22:	605b      	str	r3, [r3, #4]
 8005d24:	deff      	udf	#255	; 0xff
 8005d26:	bf00      	nop
 8005d28:	200014b8 	.word	0x200014b8

08005d2c <__sflush_r>:
 8005d2c:	898a      	ldrh	r2, [r1, #12]
 8005d2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d32:	4605      	mov	r5, r0
 8005d34:	0710      	lsls	r0, r2, #28
 8005d36:	460c      	mov	r4, r1
 8005d38:	d458      	bmi.n	8005dec <__sflush_r+0xc0>
 8005d3a:	684b      	ldr	r3, [r1, #4]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	dc05      	bgt.n	8005d4c <__sflush_r+0x20>
 8005d40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	dc02      	bgt.n	8005d4c <__sflush_r+0x20>
 8005d46:	2000      	movs	r0, #0
 8005d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d4e:	2e00      	cmp	r6, #0
 8005d50:	d0f9      	beq.n	8005d46 <__sflush_r+0x1a>
 8005d52:	2300      	movs	r3, #0
 8005d54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005d58:	682f      	ldr	r7, [r5, #0]
 8005d5a:	6a21      	ldr	r1, [r4, #32]
 8005d5c:	602b      	str	r3, [r5, #0]
 8005d5e:	d032      	beq.n	8005dc6 <__sflush_r+0x9a>
 8005d60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005d62:	89a3      	ldrh	r3, [r4, #12]
 8005d64:	075a      	lsls	r2, r3, #29
 8005d66:	d505      	bpl.n	8005d74 <__sflush_r+0x48>
 8005d68:	6863      	ldr	r3, [r4, #4]
 8005d6a:	1ac0      	subs	r0, r0, r3
 8005d6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d6e:	b10b      	cbz	r3, 8005d74 <__sflush_r+0x48>
 8005d70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d72:	1ac0      	subs	r0, r0, r3
 8005d74:	2300      	movs	r3, #0
 8005d76:	4602      	mov	r2, r0
 8005d78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d7a:	6a21      	ldr	r1, [r4, #32]
 8005d7c:	4628      	mov	r0, r5
 8005d7e:	47b0      	blx	r6
 8005d80:	1c43      	adds	r3, r0, #1
 8005d82:	89a3      	ldrh	r3, [r4, #12]
 8005d84:	d106      	bne.n	8005d94 <__sflush_r+0x68>
 8005d86:	6829      	ldr	r1, [r5, #0]
 8005d88:	291d      	cmp	r1, #29
 8005d8a:	d82b      	bhi.n	8005de4 <__sflush_r+0xb8>
 8005d8c:	4a29      	ldr	r2, [pc, #164]	; (8005e34 <__sflush_r+0x108>)
 8005d8e:	410a      	asrs	r2, r1
 8005d90:	07d6      	lsls	r6, r2, #31
 8005d92:	d427      	bmi.n	8005de4 <__sflush_r+0xb8>
 8005d94:	2200      	movs	r2, #0
 8005d96:	6062      	str	r2, [r4, #4]
 8005d98:	04d9      	lsls	r1, r3, #19
 8005d9a:	6922      	ldr	r2, [r4, #16]
 8005d9c:	6022      	str	r2, [r4, #0]
 8005d9e:	d504      	bpl.n	8005daa <__sflush_r+0x7e>
 8005da0:	1c42      	adds	r2, r0, #1
 8005da2:	d101      	bne.n	8005da8 <__sflush_r+0x7c>
 8005da4:	682b      	ldr	r3, [r5, #0]
 8005da6:	b903      	cbnz	r3, 8005daa <__sflush_r+0x7e>
 8005da8:	6560      	str	r0, [r4, #84]	; 0x54
 8005daa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005dac:	602f      	str	r7, [r5, #0]
 8005dae:	2900      	cmp	r1, #0
 8005db0:	d0c9      	beq.n	8005d46 <__sflush_r+0x1a>
 8005db2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005db6:	4299      	cmp	r1, r3
 8005db8:	d002      	beq.n	8005dc0 <__sflush_r+0x94>
 8005dba:	4628      	mov	r0, r5
 8005dbc:	f000 fd10 	bl	80067e0 <_free_r>
 8005dc0:	2000      	movs	r0, #0
 8005dc2:	6360      	str	r0, [r4, #52]	; 0x34
 8005dc4:	e7c0      	b.n	8005d48 <__sflush_r+0x1c>
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	4628      	mov	r0, r5
 8005dca:	47b0      	blx	r6
 8005dcc:	1c41      	adds	r1, r0, #1
 8005dce:	d1c8      	bne.n	8005d62 <__sflush_r+0x36>
 8005dd0:	682b      	ldr	r3, [r5, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d0c5      	beq.n	8005d62 <__sflush_r+0x36>
 8005dd6:	2b1d      	cmp	r3, #29
 8005dd8:	d001      	beq.n	8005dde <__sflush_r+0xb2>
 8005dda:	2b16      	cmp	r3, #22
 8005ddc:	d101      	bne.n	8005de2 <__sflush_r+0xb6>
 8005dde:	602f      	str	r7, [r5, #0]
 8005de0:	e7b1      	b.n	8005d46 <__sflush_r+0x1a>
 8005de2:	89a3      	ldrh	r3, [r4, #12]
 8005de4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005de8:	81a3      	strh	r3, [r4, #12]
 8005dea:	e7ad      	b.n	8005d48 <__sflush_r+0x1c>
 8005dec:	690f      	ldr	r7, [r1, #16]
 8005dee:	2f00      	cmp	r7, #0
 8005df0:	d0a9      	beq.n	8005d46 <__sflush_r+0x1a>
 8005df2:	0793      	lsls	r3, r2, #30
 8005df4:	680e      	ldr	r6, [r1, #0]
 8005df6:	bf08      	it	eq
 8005df8:	694b      	ldreq	r3, [r1, #20]
 8005dfa:	600f      	str	r7, [r1, #0]
 8005dfc:	bf18      	it	ne
 8005dfe:	2300      	movne	r3, #0
 8005e00:	eba6 0807 	sub.w	r8, r6, r7
 8005e04:	608b      	str	r3, [r1, #8]
 8005e06:	f1b8 0f00 	cmp.w	r8, #0
 8005e0a:	dd9c      	ble.n	8005d46 <__sflush_r+0x1a>
 8005e0c:	6a21      	ldr	r1, [r4, #32]
 8005e0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005e10:	4643      	mov	r3, r8
 8005e12:	463a      	mov	r2, r7
 8005e14:	4628      	mov	r0, r5
 8005e16:	47b0      	blx	r6
 8005e18:	2800      	cmp	r0, #0
 8005e1a:	dc06      	bgt.n	8005e2a <__sflush_r+0xfe>
 8005e1c:	89a3      	ldrh	r3, [r4, #12]
 8005e1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e22:	81a3      	strh	r3, [r4, #12]
 8005e24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e28:	e78e      	b.n	8005d48 <__sflush_r+0x1c>
 8005e2a:	4407      	add	r7, r0
 8005e2c:	eba8 0800 	sub.w	r8, r8, r0
 8005e30:	e7e9      	b.n	8005e06 <__sflush_r+0xda>
 8005e32:	bf00      	nop
 8005e34:	dfbffffe 	.word	0xdfbffffe

08005e38 <_fflush_r>:
 8005e38:	b538      	push	{r3, r4, r5, lr}
 8005e3a:	690b      	ldr	r3, [r1, #16]
 8005e3c:	4605      	mov	r5, r0
 8005e3e:	460c      	mov	r4, r1
 8005e40:	b913      	cbnz	r3, 8005e48 <_fflush_r+0x10>
 8005e42:	2500      	movs	r5, #0
 8005e44:	4628      	mov	r0, r5
 8005e46:	bd38      	pop	{r3, r4, r5, pc}
 8005e48:	b118      	cbz	r0, 8005e52 <_fflush_r+0x1a>
 8005e4a:	6a03      	ldr	r3, [r0, #32]
 8005e4c:	b90b      	cbnz	r3, 8005e52 <_fflush_r+0x1a>
 8005e4e:	f7fe fe61 	bl	8004b14 <__sinit>
 8005e52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d0f3      	beq.n	8005e42 <_fflush_r+0xa>
 8005e5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005e5c:	07d0      	lsls	r0, r2, #31
 8005e5e:	d404      	bmi.n	8005e6a <_fflush_r+0x32>
 8005e60:	0599      	lsls	r1, r3, #22
 8005e62:	d402      	bmi.n	8005e6a <_fflush_r+0x32>
 8005e64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e66:	f7fe fee2 	bl	8004c2e <__retarget_lock_acquire_recursive>
 8005e6a:	4628      	mov	r0, r5
 8005e6c:	4621      	mov	r1, r4
 8005e6e:	f7ff ff5d 	bl	8005d2c <__sflush_r>
 8005e72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e74:	07da      	lsls	r2, r3, #31
 8005e76:	4605      	mov	r5, r0
 8005e78:	d4e4      	bmi.n	8005e44 <_fflush_r+0xc>
 8005e7a:	89a3      	ldrh	r3, [r4, #12]
 8005e7c:	059b      	lsls	r3, r3, #22
 8005e7e:	d4e1      	bmi.n	8005e44 <_fflush_r+0xc>
 8005e80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e82:	f7fe fed5 	bl	8004c30 <__retarget_lock_release_recursive>
 8005e86:	e7dd      	b.n	8005e44 <_fflush_r+0xc>

08005e88 <__malloc_lock>:
 8005e88:	4801      	ldr	r0, [pc, #4]	; (8005e90 <__malloc_lock+0x8>)
 8005e8a:	f7fe bed0 	b.w	8004c2e <__retarget_lock_acquire_recursive>
 8005e8e:	bf00      	nop
 8005e90:	200014b4 	.word	0x200014b4

08005e94 <__malloc_unlock>:
 8005e94:	4801      	ldr	r0, [pc, #4]	; (8005e9c <__malloc_unlock+0x8>)
 8005e96:	f7fe becb 	b.w	8004c30 <__retarget_lock_release_recursive>
 8005e9a:	bf00      	nop
 8005e9c:	200014b4 	.word	0x200014b4

08005ea0 <_Balloc>:
 8005ea0:	b570      	push	{r4, r5, r6, lr}
 8005ea2:	69c6      	ldr	r6, [r0, #28]
 8005ea4:	4604      	mov	r4, r0
 8005ea6:	460d      	mov	r5, r1
 8005ea8:	b976      	cbnz	r6, 8005ec8 <_Balloc+0x28>
 8005eaa:	2010      	movs	r0, #16
 8005eac:	f7ff fe96 	bl	8005bdc <malloc>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	61e0      	str	r0, [r4, #28]
 8005eb4:	b920      	cbnz	r0, 8005ec0 <_Balloc+0x20>
 8005eb6:	4b18      	ldr	r3, [pc, #96]	; (8005f18 <_Balloc+0x78>)
 8005eb8:	4818      	ldr	r0, [pc, #96]	; (8005f1c <_Balloc+0x7c>)
 8005eba:	216b      	movs	r1, #107	; 0x6b
 8005ebc:	f000 fc5c 	bl	8006778 <__assert_func>
 8005ec0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ec4:	6006      	str	r6, [r0, #0]
 8005ec6:	60c6      	str	r6, [r0, #12]
 8005ec8:	69e6      	ldr	r6, [r4, #28]
 8005eca:	68f3      	ldr	r3, [r6, #12]
 8005ecc:	b183      	cbz	r3, 8005ef0 <_Balloc+0x50>
 8005ece:	69e3      	ldr	r3, [r4, #28]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005ed6:	b9b8      	cbnz	r0, 8005f08 <_Balloc+0x68>
 8005ed8:	2101      	movs	r1, #1
 8005eda:	fa01 f605 	lsl.w	r6, r1, r5
 8005ede:	1d72      	adds	r2, r6, #5
 8005ee0:	0092      	lsls	r2, r2, #2
 8005ee2:	4620      	mov	r0, r4
 8005ee4:	f000 fc66 	bl	80067b4 <_calloc_r>
 8005ee8:	b160      	cbz	r0, 8005f04 <_Balloc+0x64>
 8005eea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005eee:	e00e      	b.n	8005f0e <_Balloc+0x6e>
 8005ef0:	2221      	movs	r2, #33	; 0x21
 8005ef2:	2104      	movs	r1, #4
 8005ef4:	4620      	mov	r0, r4
 8005ef6:	f000 fc5d 	bl	80067b4 <_calloc_r>
 8005efa:	69e3      	ldr	r3, [r4, #28]
 8005efc:	60f0      	str	r0, [r6, #12]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d1e4      	bne.n	8005ece <_Balloc+0x2e>
 8005f04:	2000      	movs	r0, #0
 8005f06:	bd70      	pop	{r4, r5, r6, pc}
 8005f08:	6802      	ldr	r2, [r0, #0]
 8005f0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005f0e:	2300      	movs	r3, #0
 8005f10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005f14:	e7f7      	b.n	8005f06 <_Balloc+0x66>
 8005f16:	bf00      	nop
 8005f18:	080072c9 	.word	0x080072c9
 8005f1c:	0800735a 	.word	0x0800735a

08005f20 <_Bfree>:
 8005f20:	b570      	push	{r4, r5, r6, lr}
 8005f22:	69c6      	ldr	r6, [r0, #28]
 8005f24:	4605      	mov	r5, r0
 8005f26:	460c      	mov	r4, r1
 8005f28:	b976      	cbnz	r6, 8005f48 <_Bfree+0x28>
 8005f2a:	2010      	movs	r0, #16
 8005f2c:	f7ff fe56 	bl	8005bdc <malloc>
 8005f30:	4602      	mov	r2, r0
 8005f32:	61e8      	str	r0, [r5, #28]
 8005f34:	b920      	cbnz	r0, 8005f40 <_Bfree+0x20>
 8005f36:	4b09      	ldr	r3, [pc, #36]	; (8005f5c <_Bfree+0x3c>)
 8005f38:	4809      	ldr	r0, [pc, #36]	; (8005f60 <_Bfree+0x40>)
 8005f3a:	218f      	movs	r1, #143	; 0x8f
 8005f3c:	f000 fc1c 	bl	8006778 <__assert_func>
 8005f40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f44:	6006      	str	r6, [r0, #0]
 8005f46:	60c6      	str	r6, [r0, #12]
 8005f48:	b13c      	cbz	r4, 8005f5a <_Bfree+0x3a>
 8005f4a:	69eb      	ldr	r3, [r5, #28]
 8005f4c:	6862      	ldr	r2, [r4, #4]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f54:	6021      	str	r1, [r4, #0]
 8005f56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005f5a:	bd70      	pop	{r4, r5, r6, pc}
 8005f5c:	080072c9 	.word	0x080072c9
 8005f60:	0800735a 	.word	0x0800735a

08005f64 <__multadd>:
 8005f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f68:	690d      	ldr	r5, [r1, #16]
 8005f6a:	4607      	mov	r7, r0
 8005f6c:	460c      	mov	r4, r1
 8005f6e:	461e      	mov	r6, r3
 8005f70:	f101 0c14 	add.w	ip, r1, #20
 8005f74:	2000      	movs	r0, #0
 8005f76:	f8dc 3000 	ldr.w	r3, [ip]
 8005f7a:	b299      	uxth	r1, r3
 8005f7c:	fb02 6101 	mla	r1, r2, r1, r6
 8005f80:	0c1e      	lsrs	r6, r3, #16
 8005f82:	0c0b      	lsrs	r3, r1, #16
 8005f84:	fb02 3306 	mla	r3, r2, r6, r3
 8005f88:	b289      	uxth	r1, r1
 8005f8a:	3001      	adds	r0, #1
 8005f8c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005f90:	4285      	cmp	r5, r0
 8005f92:	f84c 1b04 	str.w	r1, [ip], #4
 8005f96:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005f9a:	dcec      	bgt.n	8005f76 <__multadd+0x12>
 8005f9c:	b30e      	cbz	r6, 8005fe2 <__multadd+0x7e>
 8005f9e:	68a3      	ldr	r3, [r4, #8]
 8005fa0:	42ab      	cmp	r3, r5
 8005fa2:	dc19      	bgt.n	8005fd8 <__multadd+0x74>
 8005fa4:	6861      	ldr	r1, [r4, #4]
 8005fa6:	4638      	mov	r0, r7
 8005fa8:	3101      	adds	r1, #1
 8005faa:	f7ff ff79 	bl	8005ea0 <_Balloc>
 8005fae:	4680      	mov	r8, r0
 8005fb0:	b928      	cbnz	r0, 8005fbe <__multadd+0x5a>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	4b0c      	ldr	r3, [pc, #48]	; (8005fe8 <__multadd+0x84>)
 8005fb6:	480d      	ldr	r0, [pc, #52]	; (8005fec <__multadd+0x88>)
 8005fb8:	21ba      	movs	r1, #186	; 0xba
 8005fba:	f000 fbdd 	bl	8006778 <__assert_func>
 8005fbe:	6922      	ldr	r2, [r4, #16]
 8005fc0:	3202      	adds	r2, #2
 8005fc2:	f104 010c 	add.w	r1, r4, #12
 8005fc6:	0092      	lsls	r2, r2, #2
 8005fc8:	300c      	adds	r0, #12
 8005fca:	f000 fbc7 	bl	800675c <memcpy>
 8005fce:	4621      	mov	r1, r4
 8005fd0:	4638      	mov	r0, r7
 8005fd2:	f7ff ffa5 	bl	8005f20 <_Bfree>
 8005fd6:	4644      	mov	r4, r8
 8005fd8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005fdc:	3501      	adds	r5, #1
 8005fde:	615e      	str	r6, [r3, #20]
 8005fe0:	6125      	str	r5, [r4, #16]
 8005fe2:	4620      	mov	r0, r4
 8005fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fe8:	08007338 	.word	0x08007338
 8005fec:	0800735a 	.word	0x0800735a

08005ff0 <__hi0bits>:
 8005ff0:	0c03      	lsrs	r3, r0, #16
 8005ff2:	041b      	lsls	r3, r3, #16
 8005ff4:	b9d3      	cbnz	r3, 800602c <__hi0bits+0x3c>
 8005ff6:	0400      	lsls	r0, r0, #16
 8005ff8:	2310      	movs	r3, #16
 8005ffa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005ffe:	bf04      	itt	eq
 8006000:	0200      	lsleq	r0, r0, #8
 8006002:	3308      	addeq	r3, #8
 8006004:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006008:	bf04      	itt	eq
 800600a:	0100      	lsleq	r0, r0, #4
 800600c:	3304      	addeq	r3, #4
 800600e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006012:	bf04      	itt	eq
 8006014:	0080      	lsleq	r0, r0, #2
 8006016:	3302      	addeq	r3, #2
 8006018:	2800      	cmp	r0, #0
 800601a:	db05      	blt.n	8006028 <__hi0bits+0x38>
 800601c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006020:	f103 0301 	add.w	r3, r3, #1
 8006024:	bf08      	it	eq
 8006026:	2320      	moveq	r3, #32
 8006028:	4618      	mov	r0, r3
 800602a:	4770      	bx	lr
 800602c:	2300      	movs	r3, #0
 800602e:	e7e4      	b.n	8005ffa <__hi0bits+0xa>

08006030 <__lo0bits>:
 8006030:	6803      	ldr	r3, [r0, #0]
 8006032:	f013 0207 	ands.w	r2, r3, #7
 8006036:	d00c      	beq.n	8006052 <__lo0bits+0x22>
 8006038:	07d9      	lsls	r1, r3, #31
 800603a:	d422      	bmi.n	8006082 <__lo0bits+0x52>
 800603c:	079a      	lsls	r2, r3, #30
 800603e:	bf49      	itett	mi
 8006040:	085b      	lsrmi	r3, r3, #1
 8006042:	089b      	lsrpl	r3, r3, #2
 8006044:	6003      	strmi	r3, [r0, #0]
 8006046:	2201      	movmi	r2, #1
 8006048:	bf5c      	itt	pl
 800604a:	6003      	strpl	r3, [r0, #0]
 800604c:	2202      	movpl	r2, #2
 800604e:	4610      	mov	r0, r2
 8006050:	4770      	bx	lr
 8006052:	b299      	uxth	r1, r3
 8006054:	b909      	cbnz	r1, 800605a <__lo0bits+0x2a>
 8006056:	0c1b      	lsrs	r3, r3, #16
 8006058:	2210      	movs	r2, #16
 800605a:	b2d9      	uxtb	r1, r3
 800605c:	b909      	cbnz	r1, 8006062 <__lo0bits+0x32>
 800605e:	3208      	adds	r2, #8
 8006060:	0a1b      	lsrs	r3, r3, #8
 8006062:	0719      	lsls	r1, r3, #28
 8006064:	bf04      	itt	eq
 8006066:	091b      	lsreq	r3, r3, #4
 8006068:	3204      	addeq	r2, #4
 800606a:	0799      	lsls	r1, r3, #30
 800606c:	bf04      	itt	eq
 800606e:	089b      	lsreq	r3, r3, #2
 8006070:	3202      	addeq	r2, #2
 8006072:	07d9      	lsls	r1, r3, #31
 8006074:	d403      	bmi.n	800607e <__lo0bits+0x4e>
 8006076:	085b      	lsrs	r3, r3, #1
 8006078:	f102 0201 	add.w	r2, r2, #1
 800607c:	d003      	beq.n	8006086 <__lo0bits+0x56>
 800607e:	6003      	str	r3, [r0, #0]
 8006080:	e7e5      	b.n	800604e <__lo0bits+0x1e>
 8006082:	2200      	movs	r2, #0
 8006084:	e7e3      	b.n	800604e <__lo0bits+0x1e>
 8006086:	2220      	movs	r2, #32
 8006088:	e7e1      	b.n	800604e <__lo0bits+0x1e>
	...

0800608c <__i2b>:
 800608c:	b510      	push	{r4, lr}
 800608e:	460c      	mov	r4, r1
 8006090:	2101      	movs	r1, #1
 8006092:	f7ff ff05 	bl	8005ea0 <_Balloc>
 8006096:	4602      	mov	r2, r0
 8006098:	b928      	cbnz	r0, 80060a6 <__i2b+0x1a>
 800609a:	4b05      	ldr	r3, [pc, #20]	; (80060b0 <__i2b+0x24>)
 800609c:	4805      	ldr	r0, [pc, #20]	; (80060b4 <__i2b+0x28>)
 800609e:	f240 1145 	movw	r1, #325	; 0x145
 80060a2:	f000 fb69 	bl	8006778 <__assert_func>
 80060a6:	2301      	movs	r3, #1
 80060a8:	6144      	str	r4, [r0, #20]
 80060aa:	6103      	str	r3, [r0, #16]
 80060ac:	bd10      	pop	{r4, pc}
 80060ae:	bf00      	nop
 80060b0:	08007338 	.word	0x08007338
 80060b4:	0800735a 	.word	0x0800735a

080060b8 <__multiply>:
 80060b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060bc:	4691      	mov	r9, r2
 80060be:	690a      	ldr	r2, [r1, #16]
 80060c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	bfb8      	it	lt
 80060c8:	460b      	movlt	r3, r1
 80060ca:	460c      	mov	r4, r1
 80060cc:	bfbc      	itt	lt
 80060ce:	464c      	movlt	r4, r9
 80060d0:	4699      	movlt	r9, r3
 80060d2:	6927      	ldr	r7, [r4, #16]
 80060d4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80060d8:	68a3      	ldr	r3, [r4, #8]
 80060da:	6861      	ldr	r1, [r4, #4]
 80060dc:	eb07 060a 	add.w	r6, r7, sl
 80060e0:	42b3      	cmp	r3, r6
 80060e2:	b085      	sub	sp, #20
 80060e4:	bfb8      	it	lt
 80060e6:	3101      	addlt	r1, #1
 80060e8:	f7ff feda 	bl	8005ea0 <_Balloc>
 80060ec:	b930      	cbnz	r0, 80060fc <__multiply+0x44>
 80060ee:	4602      	mov	r2, r0
 80060f0:	4b44      	ldr	r3, [pc, #272]	; (8006204 <__multiply+0x14c>)
 80060f2:	4845      	ldr	r0, [pc, #276]	; (8006208 <__multiply+0x150>)
 80060f4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80060f8:	f000 fb3e 	bl	8006778 <__assert_func>
 80060fc:	f100 0514 	add.w	r5, r0, #20
 8006100:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006104:	462b      	mov	r3, r5
 8006106:	2200      	movs	r2, #0
 8006108:	4543      	cmp	r3, r8
 800610a:	d321      	bcc.n	8006150 <__multiply+0x98>
 800610c:	f104 0314 	add.w	r3, r4, #20
 8006110:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006114:	f109 0314 	add.w	r3, r9, #20
 8006118:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800611c:	9202      	str	r2, [sp, #8]
 800611e:	1b3a      	subs	r2, r7, r4
 8006120:	3a15      	subs	r2, #21
 8006122:	f022 0203 	bic.w	r2, r2, #3
 8006126:	3204      	adds	r2, #4
 8006128:	f104 0115 	add.w	r1, r4, #21
 800612c:	428f      	cmp	r7, r1
 800612e:	bf38      	it	cc
 8006130:	2204      	movcc	r2, #4
 8006132:	9201      	str	r2, [sp, #4]
 8006134:	9a02      	ldr	r2, [sp, #8]
 8006136:	9303      	str	r3, [sp, #12]
 8006138:	429a      	cmp	r2, r3
 800613a:	d80c      	bhi.n	8006156 <__multiply+0x9e>
 800613c:	2e00      	cmp	r6, #0
 800613e:	dd03      	ble.n	8006148 <__multiply+0x90>
 8006140:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006144:	2b00      	cmp	r3, #0
 8006146:	d05b      	beq.n	8006200 <__multiply+0x148>
 8006148:	6106      	str	r6, [r0, #16]
 800614a:	b005      	add	sp, #20
 800614c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006150:	f843 2b04 	str.w	r2, [r3], #4
 8006154:	e7d8      	b.n	8006108 <__multiply+0x50>
 8006156:	f8b3 a000 	ldrh.w	sl, [r3]
 800615a:	f1ba 0f00 	cmp.w	sl, #0
 800615e:	d024      	beq.n	80061aa <__multiply+0xf2>
 8006160:	f104 0e14 	add.w	lr, r4, #20
 8006164:	46a9      	mov	r9, r5
 8006166:	f04f 0c00 	mov.w	ip, #0
 800616a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800616e:	f8d9 1000 	ldr.w	r1, [r9]
 8006172:	fa1f fb82 	uxth.w	fp, r2
 8006176:	b289      	uxth	r1, r1
 8006178:	fb0a 110b 	mla	r1, sl, fp, r1
 800617c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006180:	f8d9 2000 	ldr.w	r2, [r9]
 8006184:	4461      	add	r1, ip
 8006186:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800618a:	fb0a c20b 	mla	r2, sl, fp, ip
 800618e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006192:	b289      	uxth	r1, r1
 8006194:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006198:	4577      	cmp	r7, lr
 800619a:	f849 1b04 	str.w	r1, [r9], #4
 800619e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80061a2:	d8e2      	bhi.n	800616a <__multiply+0xb2>
 80061a4:	9a01      	ldr	r2, [sp, #4]
 80061a6:	f845 c002 	str.w	ip, [r5, r2]
 80061aa:	9a03      	ldr	r2, [sp, #12]
 80061ac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80061b0:	3304      	adds	r3, #4
 80061b2:	f1b9 0f00 	cmp.w	r9, #0
 80061b6:	d021      	beq.n	80061fc <__multiply+0x144>
 80061b8:	6829      	ldr	r1, [r5, #0]
 80061ba:	f104 0c14 	add.w	ip, r4, #20
 80061be:	46ae      	mov	lr, r5
 80061c0:	f04f 0a00 	mov.w	sl, #0
 80061c4:	f8bc b000 	ldrh.w	fp, [ip]
 80061c8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80061cc:	fb09 220b 	mla	r2, r9, fp, r2
 80061d0:	4452      	add	r2, sl
 80061d2:	b289      	uxth	r1, r1
 80061d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80061d8:	f84e 1b04 	str.w	r1, [lr], #4
 80061dc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80061e0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80061e4:	f8be 1000 	ldrh.w	r1, [lr]
 80061e8:	fb09 110a 	mla	r1, r9, sl, r1
 80061ec:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80061f0:	4567      	cmp	r7, ip
 80061f2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80061f6:	d8e5      	bhi.n	80061c4 <__multiply+0x10c>
 80061f8:	9a01      	ldr	r2, [sp, #4]
 80061fa:	50a9      	str	r1, [r5, r2]
 80061fc:	3504      	adds	r5, #4
 80061fe:	e799      	b.n	8006134 <__multiply+0x7c>
 8006200:	3e01      	subs	r6, #1
 8006202:	e79b      	b.n	800613c <__multiply+0x84>
 8006204:	08007338 	.word	0x08007338
 8006208:	0800735a 	.word	0x0800735a

0800620c <__pow5mult>:
 800620c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006210:	4615      	mov	r5, r2
 8006212:	f012 0203 	ands.w	r2, r2, #3
 8006216:	4606      	mov	r6, r0
 8006218:	460f      	mov	r7, r1
 800621a:	d007      	beq.n	800622c <__pow5mult+0x20>
 800621c:	4c25      	ldr	r4, [pc, #148]	; (80062b4 <__pow5mult+0xa8>)
 800621e:	3a01      	subs	r2, #1
 8006220:	2300      	movs	r3, #0
 8006222:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006226:	f7ff fe9d 	bl	8005f64 <__multadd>
 800622a:	4607      	mov	r7, r0
 800622c:	10ad      	asrs	r5, r5, #2
 800622e:	d03d      	beq.n	80062ac <__pow5mult+0xa0>
 8006230:	69f4      	ldr	r4, [r6, #28]
 8006232:	b97c      	cbnz	r4, 8006254 <__pow5mult+0x48>
 8006234:	2010      	movs	r0, #16
 8006236:	f7ff fcd1 	bl	8005bdc <malloc>
 800623a:	4602      	mov	r2, r0
 800623c:	61f0      	str	r0, [r6, #28]
 800623e:	b928      	cbnz	r0, 800624c <__pow5mult+0x40>
 8006240:	4b1d      	ldr	r3, [pc, #116]	; (80062b8 <__pow5mult+0xac>)
 8006242:	481e      	ldr	r0, [pc, #120]	; (80062bc <__pow5mult+0xb0>)
 8006244:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006248:	f000 fa96 	bl	8006778 <__assert_func>
 800624c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006250:	6004      	str	r4, [r0, #0]
 8006252:	60c4      	str	r4, [r0, #12]
 8006254:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006258:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800625c:	b94c      	cbnz	r4, 8006272 <__pow5mult+0x66>
 800625e:	f240 2171 	movw	r1, #625	; 0x271
 8006262:	4630      	mov	r0, r6
 8006264:	f7ff ff12 	bl	800608c <__i2b>
 8006268:	2300      	movs	r3, #0
 800626a:	f8c8 0008 	str.w	r0, [r8, #8]
 800626e:	4604      	mov	r4, r0
 8006270:	6003      	str	r3, [r0, #0]
 8006272:	f04f 0900 	mov.w	r9, #0
 8006276:	07eb      	lsls	r3, r5, #31
 8006278:	d50a      	bpl.n	8006290 <__pow5mult+0x84>
 800627a:	4639      	mov	r1, r7
 800627c:	4622      	mov	r2, r4
 800627e:	4630      	mov	r0, r6
 8006280:	f7ff ff1a 	bl	80060b8 <__multiply>
 8006284:	4639      	mov	r1, r7
 8006286:	4680      	mov	r8, r0
 8006288:	4630      	mov	r0, r6
 800628a:	f7ff fe49 	bl	8005f20 <_Bfree>
 800628e:	4647      	mov	r7, r8
 8006290:	106d      	asrs	r5, r5, #1
 8006292:	d00b      	beq.n	80062ac <__pow5mult+0xa0>
 8006294:	6820      	ldr	r0, [r4, #0]
 8006296:	b938      	cbnz	r0, 80062a8 <__pow5mult+0x9c>
 8006298:	4622      	mov	r2, r4
 800629a:	4621      	mov	r1, r4
 800629c:	4630      	mov	r0, r6
 800629e:	f7ff ff0b 	bl	80060b8 <__multiply>
 80062a2:	6020      	str	r0, [r4, #0]
 80062a4:	f8c0 9000 	str.w	r9, [r0]
 80062a8:	4604      	mov	r4, r0
 80062aa:	e7e4      	b.n	8006276 <__pow5mult+0x6a>
 80062ac:	4638      	mov	r0, r7
 80062ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062b2:	bf00      	nop
 80062b4:	080074a8 	.word	0x080074a8
 80062b8:	080072c9 	.word	0x080072c9
 80062bc:	0800735a 	.word	0x0800735a

080062c0 <__lshift>:
 80062c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062c4:	460c      	mov	r4, r1
 80062c6:	6849      	ldr	r1, [r1, #4]
 80062c8:	6923      	ldr	r3, [r4, #16]
 80062ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80062ce:	68a3      	ldr	r3, [r4, #8]
 80062d0:	4607      	mov	r7, r0
 80062d2:	4691      	mov	r9, r2
 80062d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80062d8:	f108 0601 	add.w	r6, r8, #1
 80062dc:	42b3      	cmp	r3, r6
 80062de:	db0b      	blt.n	80062f8 <__lshift+0x38>
 80062e0:	4638      	mov	r0, r7
 80062e2:	f7ff fddd 	bl	8005ea0 <_Balloc>
 80062e6:	4605      	mov	r5, r0
 80062e8:	b948      	cbnz	r0, 80062fe <__lshift+0x3e>
 80062ea:	4602      	mov	r2, r0
 80062ec:	4b28      	ldr	r3, [pc, #160]	; (8006390 <__lshift+0xd0>)
 80062ee:	4829      	ldr	r0, [pc, #164]	; (8006394 <__lshift+0xd4>)
 80062f0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80062f4:	f000 fa40 	bl	8006778 <__assert_func>
 80062f8:	3101      	adds	r1, #1
 80062fa:	005b      	lsls	r3, r3, #1
 80062fc:	e7ee      	b.n	80062dc <__lshift+0x1c>
 80062fe:	2300      	movs	r3, #0
 8006300:	f100 0114 	add.w	r1, r0, #20
 8006304:	f100 0210 	add.w	r2, r0, #16
 8006308:	4618      	mov	r0, r3
 800630a:	4553      	cmp	r3, sl
 800630c:	db33      	blt.n	8006376 <__lshift+0xb6>
 800630e:	6920      	ldr	r0, [r4, #16]
 8006310:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006314:	f104 0314 	add.w	r3, r4, #20
 8006318:	f019 091f 	ands.w	r9, r9, #31
 800631c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006320:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006324:	d02b      	beq.n	800637e <__lshift+0xbe>
 8006326:	f1c9 0e20 	rsb	lr, r9, #32
 800632a:	468a      	mov	sl, r1
 800632c:	2200      	movs	r2, #0
 800632e:	6818      	ldr	r0, [r3, #0]
 8006330:	fa00 f009 	lsl.w	r0, r0, r9
 8006334:	4310      	orrs	r0, r2
 8006336:	f84a 0b04 	str.w	r0, [sl], #4
 800633a:	f853 2b04 	ldr.w	r2, [r3], #4
 800633e:	459c      	cmp	ip, r3
 8006340:	fa22 f20e 	lsr.w	r2, r2, lr
 8006344:	d8f3      	bhi.n	800632e <__lshift+0x6e>
 8006346:	ebac 0304 	sub.w	r3, ip, r4
 800634a:	3b15      	subs	r3, #21
 800634c:	f023 0303 	bic.w	r3, r3, #3
 8006350:	3304      	adds	r3, #4
 8006352:	f104 0015 	add.w	r0, r4, #21
 8006356:	4584      	cmp	ip, r0
 8006358:	bf38      	it	cc
 800635a:	2304      	movcc	r3, #4
 800635c:	50ca      	str	r2, [r1, r3]
 800635e:	b10a      	cbz	r2, 8006364 <__lshift+0xa4>
 8006360:	f108 0602 	add.w	r6, r8, #2
 8006364:	3e01      	subs	r6, #1
 8006366:	4638      	mov	r0, r7
 8006368:	612e      	str	r6, [r5, #16]
 800636a:	4621      	mov	r1, r4
 800636c:	f7ff fdd8 	bl	8005f20 <_Bfree>
 8006370:	4628      	mov	r0, r5
 8006372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006376:	f842 0f04 	str.w	r0, [r2, #4]!
 800637a:	3301      	adds	r3, #1
 800637c:	e7c5      	b.n	800630a <__lshift+0x4a>
 800637e:	3904      	subs	r1, #4
 8006380:	f853 2b04 	ldr.w	r2, [r3], #4
 8006384:	f841 2f04 	str.w	r2, [r1, #4]!
 8006388:	459c      	cmp	ip, r3
 800638a:	d8f9      	bhi.n	8006380 <__lshift+0xc0>
 800638c:	e7ea      	b.n	8006364 <__lshift+0xa4>
 800638e:	bf00      	nop
 8006390:	08007338 	.word	0x08007338
 8006394:	0800735a 	.word	0x0800735a

08006398 <__mcmp>:
 8006398:	b530      	push	{r4, r5, lr}
 800639a:	6902      	ldr	r2, [r0, #16]
 800639c:	690c      	ldr	r4, [r1, #16]
 800639e:	1b12      	subs	r2, r2, r4
 80063a0:	d10e      	bne.n	80063c0 <__mcmp+0x28>
 80063a2:	f100 0314 	add.w	r3, r0, #20
 80063a6:	3114      	adds	r1, #20
 80063a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80063ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80063b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80063b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80063b8:	42a5      	cmp	r5, r4
 80063ba:	d003      	beq.n	80063c4 <__mcmp+0x2c>
 80063bc:	d305      	bcc.n	80063ca <__mcmp+0x32>
 80063be:	2201      	movs	r2, #1
 80063c0:	4610      	mov	r0, r2
 80063c2:	bd30      	pop	{r4, r5, pc}
 80063c4:	4283      	cmp	r3, r0
 80063c6:	d3f3      	bcc.n	80063b0 <__mcmp+0x18>
 80063c8:	e7fa      	b.n	80063c0 <__mcmp+0x28>
 80063ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80063ce:	e7f7      	b.n	80063c0 <__mcmp+0x28>

080063d0 <__mdiff>:
 80063d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063d4:	460c      	mov	r4, r1
 80063d6:	4606      	mov	r6, r0
 80063d8:	4611      	mov	r1, r2
 80063da:	4620      	mov	r0, r4
 80063dc:	4690      	mov	r8, r2
 80063de:	f7ff ffdb 	bl	8006398 <__mcmp>
 80063e2:	1e05      	subs	r5, r0, #0
 80063e4:	d110      	bne.n	8006408 <__mdiff+0x38>
 80063e6:	4629      	mov	r1, r5
 80063e8:	4630      	mov	r0, r6
 80063ea:	f7ff fd59 	bl	8005ea0 <_Balloc>
 80063ee:	b930      	cbnz	r0, 80063fe <__mdiff+0x2e>
 80063f0:	4b3a      	ldr	r3, [pc, #232]	; (80064dc <__mdiff+0x10c>)
 80063f2:	4602      	mov	r2, r0
 80063f4:	f240 2137 	movw	r1, #567	; 0x237
 80063f8:	4839      	ldr	r0, [pc, #228]	; (80064e0 <__mdiff+0x110>)
 80063fa:	f000 f9bd 	bl	8006778 <__assert_func>
 80063fe:	2301      	movs	r3, #1
 8006400:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006404:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006408:	bfa4      	itt	ge
 800640a:	4643      	movge	r3, r8
 800640c:	46a0      	movge	r8, r4
 800640e:	4630      	mov	r0, r6
 8006410:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006414:	bfa6      	itte	ge
 8006416:	461c      	movge	r4, r3
 8006418:	2500      	movge	r5, #0
 800641a:	2501      	movlt	r5, #1
 800641c:	f7ff fd40 	bl	8005ea0 <_Balloc>
 8006420:	b920      	cbnz	r0, 800642c <__mdiff+0x5c>
 8006422:	4b2e      	ldr	r3, [pc, #184]	; (80064dc <__mdiff+0x10c>)
 8006424:	4602      	mov	r2, r0
 8006426:	f240 2145 	movw	r1, #581	; 0x245
 800642a:	e7e5      	b.n	80063f8 <__mdiff+0x28>
 800642c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006430:	6926      	ldr	r6, [r4, #16]
 8006432:	60c5      	str	r5, [r0, #12]
 8006434:	f104 0914 	add.w	r9, r4, #20
 8006438:	f108 0514 	add.w	r5, r8, #20
 800643c:	f100 0e14 	add.w	lr, r0, #20
 8006440:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006444:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006448:	f108 0210 	add.w	r2, r8, #16
 800644c:	46f2      	mov	sl, lr
 800644e:	2100      	movs	r1, #0
 8006450:	f859 3b04 	ldr.w	r3, [r9], #4
 8006454:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006458:	fa11 f88b 	uxtah	r8, r1, fp
 800645c:	b299      	uxth	r1, r3
 800645e:	0c1b      	lsrs	r3, r3, #16
 8006460:	eba8 0801 	sub.w	r8, r8, r1
 8006464:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006468:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800646c:	fa1f f888 	uxth.w	r8, r8
 8006470:	1419      	asrs	r1, r3, #16
 8006472:	454e      	cmp	r6, r9
 8006474:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006478:	f84a 3b04 	str.w	r3, [sl], #4
 800647c:	d8e8      	bhi.n	8006450 <__mdiff+0x80>
 800647e:	1b33      	subs	r3, r6, r4
 8006480:	3b15      	subs	r3, #21
 8006482:	f023 0303 	bic.w	r3, r3, #3
 8006486:	3304      	adds	r3, #4
 8006488:	3415      	adds	r4, #21
 800648a:	42a6      	cmp	r6, r4
 800648c:	bf38      	it	cc
 800648e:	2304      	movcc	r3, #4
 8006490:	441d      	add	r5, r3
 8006492:	4473      	add	r3, lr
 8006494:	469e      	mov	lr, r3
 8006496:	462e      	mov	r6, r5
 8006498:	4566      	cmp	r6, ip
 800649a:	d30e      	bcc.n	80064ba <__mdiff+0xea>
 800649c:	f10c 0203 	add.w	r2, ip, #3
 80064a0:	1b52      	subs	r2, r2, r5
 80064a2:	f022 0203 	bic.w	r2, r2, #3
 80064a6:	3d03      	subs	r5, #3
 80064a8:	45ac      	cmp	ip, r5
 80064aa:	bf38      	it	cc
 80064ac:	2200      	movcc	r2, #0
 80064ae:	4413      	add	r3, r2
 80064b0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80064b4:	b17a      	cbz	r2, 80064d6 <__mdiff+0x106>
 80064b6:	6107      	str	r7, [r0, #16]
 80064b8:	e7a4      	b.n	8006404 <__mdiff+0x34>
 80064ba:	f856 8b04 	ldr.w	r8, [r6], #4
 80064be:	fa11 f288 	uxtah	r2, r1, r8
 80064c2:	1414      	asrs	r4, r2, #16
 80064c4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80064c8:	b292      	uxth	r2, r2
 80064ca:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80064ce:	f84e 2b04 	str.w	r2, [lr], #4
 80064d2:	1421      	asrs	r1, r4, #16
 80064d4:	e7e0      	b.n	8006498 <__mdiff+0xc8>
 80064d6:	3f01      	subs	r7, #1
 80064d8:	e7ea      	b.n	80064b0 <__mdiff+0xe0>
 80064da:	bf00      	nop
 80064dc:	08007338 	.word	0x08007338
 80064e0:	0800735a 	.word	0x0800735a

080064e4 <__d2b>:
 80064e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80064e8:	460f      	mov	r7, r1
 80064ea:	2101      	movs	r1, #1
 80064ec:	ec59 8b10 	vmov	r8, r9, d0
 80064f0:	4616      	mov	r6, r2
 80064f2:	f7ff fcd5 	bl	8005ea0 <_Balloc>
 80064f6:	4604      	mov	r4, r0
 80064f8:	b930      	cbnz	r0, 8006508 <__d2b+0x24>
 80064fa:	4602      	mov	r2, r0
 80064fc:	4b24      	ldr	r3, [pc, #144]	; (8006590 <__d2b+0xac>)
 80064fe:	4825      	ldr	r0, [pc, #148]	; (8006594 <__d2b+0xb0>)
 8006500:	f240 310f 	movw	r1, #783	; 0x30f
 8006504:	f000 f938 	bl	8006778 <__assert_func>
 8006508:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800650c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006510:	bb2d      	cbnz	r5, 800655e <__d2b+0x7a>
 8006512:	9301      	str	r3, [sp, #4]
 8006514:	f1b8 0300 	subs.w	r3, r8, #0
 8006518:	d026      	beq.n	8006568 <__d2b+0x84>
 800651a:	4668      	mov	r0, sp
 800651c:	9300      	str	r3, [sp, #0]
 800651e:	f7ff fd87 	bl	8006030 <__lo0bits>
 8006522:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006526:	b1e8      	cbz	r0, 8006564 <__d2b+0x80>
 8006528:	f1c0 0320 	rsb	r3, r0, #32
 800652c:	fa02 f303 	lsl.w	r3, r2, r3
 8006530:	430b      	orrs	r3, r1
 8006532:	40c2      	lsrs	r2, r0
 8006534:	6163      	str	r3, [r4, #20]
 8006536:	9201      	str	r2, [sp, #4]
 8006538:	9b01      	ldr	r3, [sp, #4]
 800653a:	61a3      	str	r3, [r4, #24]
 800653c:	2b00      	cmp	r3, #0
 800653e:	bf14      	ite	ne
 8006540:	2202      	movne	r2, #2
 8006542:	2201      	moveq	r2, #1
 8006544:	6122      	str	r2, [r4, #16]
 8006546:	b1bd      	cbz	r5, 8006578 <__d2b+0x94>
 8006548:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800654c:	4405      	add	r5, r0
 800654e:	603d      	str	r5, [r7, #0]
 8006550:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006554:	6030      	str	r0, [r6, #0]
 8006556:	4620      	mov	r0, r4
 8006558:	b003      	add	sp, #12
 800655a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800655e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006562:	e7d6      	b.n	8006512 <__d2b+0x2e>
 8006564:	6161      	str	r1, [r4, #20]
 8006566:	e7e7      	b.n	8006538 <__d2b+0x54>
 8006568:	a801      	add	r0, sp, #4
 800656a:	f7ff fd61 	bl	8006030 <__lo0bits>
 800656e:	9b01      	ldr	r3, [sp, #4]
 8006570:	6163      	str	r3, [r4, #20]
 8006572:	3020      	adds	r0, #32
 8006574:	2201      	movs	r2, #1
 8006576:	e7e5      	b.n	8006544 <__d2b+0x60>
 8006578:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800657c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006580:	6038      	str	r0, [r7, #0]
 8006582:	6918      	ldr	r0, [r3, #16]
 8006584:	f7ff fd34 	bl	8005ff0 <__hi0bits>
 8006588:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800658c:	e7e2      	b.n	8006554 <__d2b+0x70>
 800658e:	bf00      	nop
 8006590:	08007338 	.word	0x08007338
 8006594:	0800735a 	.word	0x0800735a

08006598 <__sread>:
 8006598:	b510      	push	{r4, lr}
 800659a:	460c      	mov	r4, r1
 800659c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065a0:	f000 f8a8 	bl	80066f4 <_read_r>
 80065a4:	2800      	cmp	r0, #0
 80065a6:	bfab      	itete	ge
 80065a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80065aa:	89a3      	ldrhlt	r3, [r4, #12]
 80065ac:	181b      	addge	r3, r3, r0
 80065ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80065b2:	bfac      	ite	ge
 80065b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80065b6:	81a3      	strhlt	r3, [r4, #12]
 80065b8:	bd10      	pop	{r4, pc}

080065ba <__swrite>:
 80065ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065be:	461f      	mov	r7, r3
 80065c0:	898b      	ldrh	r3, [r1, #12]
 80065c2:	05db      	lsls	r3, r3, #23
 80065c4:	4605      	mov	r5, r0
 80065c6:	460c      	mov	r4, r1
 80065c8:	4616      	mov	r6, r2
 80065ca:	d505      	bpl.n	80065d8 <__swrite+0x1e>
 80065cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065d0:	2302      	movs	r3, #2
 80065d2:	2200      	movs	r2, #0
 80065d4:	f000 f87c 	bl	80066d0 <_lseek_r>
 80065d8:	89a3      	ldrh	r3, [r4, #12]
 80065da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065e2:	81a3      	strh	r3, [r4, #12]
 80065e4:	4632      	mov	r2, r6
 80065e6:	463b      	mov	r3, r7
 80065e8:	4628      	mov	r0, r5
 80065ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065ee:	f000 b8a3 	b.w	8006738 <_write_r>

080065f2 <__sseek>:
 80065f2:	b510      	push	{r4, lr}
 80065f4:	460c      	mov	r4, r1
 80065f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065fa:	f000 f869 	bl	80066d0 <_lseek_r>
 80065fe:	1c43      	adds	r3, r0, #1
 8006600:	89a3      	ldrh	r3, [r4, #12]
 8006602:	bf15      	itete	ne
 8006604:	6560      	strne	r0, [r4, #84]	; 0x54
 8006606:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800660a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800660e:	81a3      	strheq	r3, [r4, #12]
 8006610:	bf18      	it	ne
 8006612:	81a3      	strhne	r3, [r4, #12]
 8006614:	bd10      	pop	{r4, pc}

08006616 <__sclose>:
 8006616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800661a:	f000 b849 	b.w	80066b0 <_close_r>

0800661e <_realloc_r>:
 800661e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006622:	4680      	mov	r8, r0
 8006624:	4614      	mov	r4, r2
 8006626:	460e      	mov	r6, r1
 8006628:	b921      	cbnz	r1, 8006634 <_realloc_r+0x16>
 800662a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800662e:	4611      	mov	r1, r2
 8006630:	f7ff bafc 	b.w	8005c2c <_malloc_r>
 8006634:	b92a      	cbnz	r2, 8006642 <_realloc_r+0x24>
 8006636:	f000 f8d3 	bl	80067e0 <_free_r>
 800663a:	4625      	mov	r5, r4
 800663c:	4628      	mov	r0, r5
 800663e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006642:	f000 f92b 	bl	800689c <_malloc_usable_size_r>
 8006646:	4284      	cmp	r4, r0
 8006648:	4607      	mov	r7, r0
 800664a:	d802      	bhi.n	8006652 <_realloc_r+0x34>
 800664c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006650:	d812      	bhi.n	8006678 <_realloc_r+0x5a>
 8006652:	4621      	mov	r1, r4
 8006654:	4640      	mov	r0, r8
 8006656:	f7ff fae9 	bl	8005c2c <_malloc_r>
 800665a:	4605      	mov	r5, r0
 800665c:	2800      	cmp	r0, #0
 800665e:	d0ed      	beq.n	800663c <_realloc_r+0x1e>
 8006660:	42bc      	cmp	r4, r7
 8006662:	4622      	mov	r2, r4
 8006664:	4631      	mov	r1, r6
 8006666:	bf28      	it	cs
 8006668:	463a      	movcs	r2, r7
 800666a:	f000 f877 	bl	800675c <memcpy>
 800666e:	4631      	mov	r1, r6
 8006670:	4640      	mov	r0, r8
 8006672:	f000 f8b5 	bl	80067e0 <_free_r>
 8006676:	e7e1      	b.n	800663c <_realloc_r+0x1e>
 8006678:	4635      	mov	r5, r6
 800667a:	e7df      	b.n	800663c <_realloc_r+0x1e>

0800667c <memmove>:
 800667c:	4288      	cmp	r0, r1
 800667e:	b510      	push	{r4, lr}
 8006680:	eb01 0402 	add.w	r4, r1, r2
 8006684:	d902      	bls.n	800668c <memmove+0x10>
 8006686:	4284      	cmp	r4, r0
 8006688:	4623      	mov	r3, r4
 800668a:	d807      	bhi.n	800669c <memmove+0x20>
 800668c:	1e43      	subs	r3, r0, #1
 800668e:	42a1      	cmp	r1, r4
 8006690:	d008      	beq.n	80066a4 <memmove+0x28>
 8006692:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006696:	f803 2f01 	strb.w	r2, [r3, #1]!
 800669a:	e7f8      	b.n	800668e <memmove+0x12>
 800669c:	4402      	add	r2, r0
 800669e:	4601      	mov	r1, r0
 80066a0:	428a      	cmp	r2, r1
 80066a2:	d100      	bne.n	80066a6 <memmove+0x2a>
 80066a4:	bd10      	pop	{r4, pc}
 80066a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80066ae:	e7f7      	b.n	80066a0 <memmove+0x24>

080066b0 <_close_r>:
 80066b0:	b538      	push	{r3, r4, r5, lr}
 80066b2:	4d06      	ldr	r5, [pc, #24]	; (80066cc <_close_r+0x1c>)
 80066b4:	2300      	movs	r3, #0
 80066b6:	4604      	mov	r4, r0
 80066b8:	4608      	mov	r0, r1
 80066ba:	602b      	str	r3, [r5, #0]
 80066bc:	f7fb fb4e 	bl	8001d5c <_close>
 80066c0:	1c43      	adds	r3, r0, #1
 80066c2:	d102      	bne.n	80066ca <_close_r+0x1a>
 80066c4:	682b      	ldr	r3, [r5, #0]
 80066c6:	b103      	cbz	r3, 80066ca <_close_r+0x1a>
 80066c8:	6023      	str	r3, [r4, #0]
 80066ca:	bd38      	pop	{r3, r4, r5, pc}
 80066cc:	200014c0 	.word	0x200014c0

080066d0 <_lseek_r>:
 80066d0:	b538      	push	{r3, r4, r5, lr}
 80066d2:	4d07      	ldr	r5, [pc, #28]	; (80066f0 <_lseek_r+0x20>)
 80066d4:	4604      	mov	r4, r0
 80066d6:	4608      	mov	r0, r1
 80066d8:	4611      	mov	r1, r2
 80066da:	2200      	movs	r2, #0
 80066dc:	602a      	str	r2, [r5, #0]
 80066de:	461a      	mov	r2, r3
 80066e0:	f7fb fb63 	bl	8001daa <_lseek>
 80066e4:	1c43      	adds	r3, r0, #1
 80066e6:	d102      	bne.n	80066ee <_lseek_r+0x1e>
 80066e8:	682b      	ldr	r3, [r5, #0]
 80066ea:	b103      	cbz	r3, 80066ee <_lseek_r+0x1e>
 80066ec:	6023      	str	r3, [r4, #0]
 80066ee:	bd38      	pop	{r3, r4, r5, pc}
 80066f0:	200014c0 	.word	0x200014c0

080066f4 <_read_r>:
 80066f4:	b538      	push	{r3, r4, r5, lr}
 80066f6:	4d07      	ldr	r5, [pc, #28]	; (8006714 <_read_r+0x20>)
 80066f8:	4604      	mov	r4, r0
 80066fa:	4608      	mov	r0, r1
 80066fc:	4611      	mov	r1, r2
 80066fe:	2200      	movs	r2, #0
 8006700:	602a      	str	r2, [r5, #0]
 8006702:	461a      	mov	r2, r3
 8006704:	f7fb faf1 	bl	8001cea <_read>
 8006708:	1c43      	adds	r3, r0, #1
 800670a:	d102      	bne.n	8006712 <_read_r+0x1e>
 800670c:	682b      	ldr	r3, [r5, #0]
 800670e:	b103      	cbz	r3, 8006712 <_read_r+0x1e>
 8006710:	6023      	str	r3, [r4, #0]
 8006712:	bd38      	pop	{r3, r4, r5, pc}
 8006714:	200014c0 	.word	0x200014c0

08006718 <_sbrk_r>:
 8006718:	b538      	push	{r3, r4, r5, lr}
 800671a:	4d06      	ldr	r5, [pc, #24]	; (8006734 <_sbrk_r+0x1c>)
 800671c:	2300      	movs	r3, #0
 800671e:	4604      	mov	r4, r0
 8006720:	4608      	mov	r0, r1
 8006722:	602b      	str	r3, [r5, #0]
 8006724:	f7fb fb4e 	bl	8001dc4 <_sbrk>
 8006728:	1c43      	adds	r3, r0, #1
 800672a:	d102      	bne.n	8006732 <_sbrk_r+0x1a>
 800672c:	682b      	ldr	r3, [r5, #0]
 800672e:	b103      	cbz	r3, 8006732 <_sbrk_r+0x1a>
 8006730:	6023      	str	r3, [r4, #0]
 8006732:	bd38      	pop	{r3, r4, r5, pc}
 8006734:	200014c0 	.word	0x200014c0

08006738 <_write_r>:
 8006738:	b538      	push	{r3, r4, r5, lr}
 800673a:	4d07      	ldr	r5, [pc, #28]	; (8006758 <_write_r+0x20>)
 800673c:	4604      	mov	r4, r0
 800673e:	4608      	mov	r0, r1
 8006740:	4611      	mov	r1, r2
 8006742:	2200      	movs	r2, #0
 8006744:	602a      	str	r2, [r5, #0]
 8006746:	461a      	mov	r2, r3
 8006748:	f7fb faec 	bl	8001d24 <_write>
 800674c:	1c43      	adds	r3, r0, #1
 800674e:	d102      	bne.n	8006756 <_write_r+0x1e>
 8006750:	682b      	ldr	r3, [r5, #0]
 8006752:	b103      	cbz	r3, 8006756 <_write_r+0x1e>
 8006754:	6023      	str	r3, [r4, #0]
 8006756:	bd38      	pop	{r3, r4, r5, pc}
 8006758:	200014c0 	.word	0x200014c0

0800675c <memcpy>:
 800675c:	440a      	add	r2, r1
 800675e:	4291      	cmp	r1, r2
 8006760:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006764:	d100      	bne.n	8006768 <memcpy+0xc>
 8006766:	4770      	bx	lr
 8006768:	b510      	push	{r4, lr}
 800676a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800676e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006772:	4291      	cmp	r1, r2
 8006774:	d1f9      	bne.n	800676a <memcpy+0xe>
 8006776:	bd10      	pop	{r4, pc}

08006778 <__assert_func>:
 8006778:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800677a:	4614      	mov	r4, r2
 800677c:	461a      	mov	r2, r3
 800677e:	4b09      	ldr	r3, [pc, #36]	; (80067a4 <__assert_func+0x2c>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4605      	mov	r5, r0
 8006784:	68d8      	ldr	r0, [r3, #12]
 8006786:	b14c      	cbz	r4, 800679c <__assert_func+0x24>
 8006788:	4b07      	ldr	r3, [pc, #28]	; (80067a8 <__assert_func+0x30>)
 800678a:	9100      	str	r1, [sp, #0]
 800678c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006790:	4906      	ldr	r1, [pc, #24]	; (80067ac <__assert_func+0x34>)
 8006792:	462b      	mov	r3, r5
 8006794:	f000 f88a 	bl	80068ac <fiprintf>
 8006798:	f000 f8a7 	bl	80068ea <abort>
 800679c:	4b04      	ldr	r3, [pc, #16]	; (80067b0 <__assert_func+0x38>)
 800679e:	461c      	mov	r4, r3
 80067a0:	e7f3      	b.n	800678a <__assert_func+0x12>
 80067a2:	bf00      	nop
 80067a4:	20000060 	.word	0x20000060
 80067a8:	080075bf 	.word	0x080075bf
 80067ac:	080075cc 	.word	0x080075cc
 80067b0:	080075fa 	.word	0x080075fa

080067b4 <_calloc_r>:
 80067b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067b6:	fba1 2402 	umull	r2, r4, r1, r2
 80067ba:	b94c      	cbnz	r4, 80067d0 <_calloc_r+0x1c>
 80067bc:	4611      	mov	r1, r2
 80067be:	9201      	str	r2, [sp, #4]
 80067c0:	f7ff fa34 	bl	8005c2c <_malloc_r>
 80067c4:	9a01      	ldr	r2, [sp, #4]
 80067c6:	4605      	mov	r5, r0
 80067c8:	b930      	cbnz	r0, 80067d8 <_calloc_r+0x24>
 80067ca:	4628      	mov	r0, r5
 80067cc:	b003      	add	sp, #12
 80067ce:	bd30      	pop	{r4, r5, pc}
 80067d0:	220c      	movs	r2, #12
 80067d2:	6002      	str	r2, [r0, #0]
 80067d4:	2500      	movs	r5, #0
 80067d6:	e7f8      	b.n	80067ca <_calloc_r+0x16>
 80067d8:	4621      	mov	r1, r4
 80067da:	f7fe f9f1 	bl	8004bc0 <memset>
 80067de:	e7f4      	b.n	80067ca <_calloc_r+0x16>

080067e0 <_free_r>:
 80067e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067e2:	2900      	cmp	r1, #0
 80067e4:	d044      	beq.n	8006870 <_free_r+0x90>
 80067e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067ea:	9001      	str	r0, [sp, #4]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f1a1 0404 	sub.w	r4, r1, #4
 80067f2:	bfb8      	it	lt
 80067f4:	18e4      	addlt	r4, r4, r3
 80067f6:	f7ff fb47 	bl	8005e88 <__malloc_lock>
 80067fa:	4a1e      	ldr	r2, [pc, #120]	; (8006874 <_free_r+0x94>)
 80067fc:	9801      	ldr	r0, [sp, #4]
 80067fe:	6813      	ldr	r3, [r2, #0]
 8006800:	b933      	cbnz	r3, 8006810 <_free_r+0x30>
 8006802:	6063      	str	r3, [r4, #4]
 8006804:	6014      	str	r4, [r2, #0]
 8006806:	b003      	add	sp, #12
 8006808:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800680c:	f7ff bb42 	b.w	8005e94 <__malloc_unlock>
 8006810:	42a3      	cmp	r3, r4
 8006812:	d908      	bls.n	8006826 <_free_r+0x46>
 8006814:	6825      	ldr	r5, [r4, #0]
 8006816:	1961      	adds	r1, r4, r5
 8006818:	428b      	cmp	r3, r1
 800681a:	bf01      	itttt	eq
 800681c:	6819      	ldreq	r1, [r3, #0]
 800681e:	685b      	ldreq	r3, [r3, #4]
 8006820:	1949      	addeq	r1, r1, r5
 8006822:	6021      	streq	r1, [r4, #0]
 8006824:	e7ed      	b.n	8006802 <_free_r+0x22>
 8006826:	461a      	mov	r2, r3
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	b10b      	cbz	r3, 8006830 <_free_r+0x50>
 800682c:	42a3      	cmp	r3, r4
 800682e:	d9fa      	bls.n	8006826 <_free_r+0x46>
 8006830:	6811      	ldr	r1, [r2, #0]
 8006832:	1855      	adds	r5, r2, r1
 8006834:	42a5      	cmp	r5, r4
 8006836:	d10b      	bne.n	8006850 <_free_r+0x70>
 8006838:	6824      	ldr	r4, [r4, #0]
 800683a:	4421      	add	r1, r4
 800683c:	1854      	adds	r4, r2, r1
 800683e:	42a3      	cmp	r3, r4
 8006840:	6011      	str	r1, [r2, #0]
 8006842:	d1e0      	bne.n	8006806 <_free_r+0x26>
 8006844:	681c      	ldr	r4, [r3, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	6053      	str	r3, [r2, #4]
 800684a:	440c      	add	r4, r1
 800684c:	6014      	str	r4, [r2, #0]
 800684e:	e7da      	b.n	8006806 <_free_r+0x26>
 8006850:	d902      	bls.n	8006858 <_free_r+0x78>
 8006852:	230c      	movs	r3, #12
 8006854:	6003      	str	r3, [r0, #0]
 8006856:	e7d6      	b.n	8006806 <_free_r+0x26>
 8006858:	6825      	ldr	r5, [r4, #0]
 800685a:	1961      	adds	r1, r4, r5
 800685c:	428b      	cmp	r3, r1
 800685e:	bf04      	itt	eq
 8006860:	6819      	ldreq	r1, [r3, #0]
 8006862:	685b      	ldreq	r3, [r3, #4]
 8006864:	6063      	str	r3, [r4, #4]
 8006866:	bf04      	itt	eq
 8006868:	1949      	addeq	r1, r1, r5
 800686a:	6021      	streq	r1, [r4, #0]
 800686c:	6054      	str	r4, [r2, #4]
 800686e:	e7ca      	b.n	8006806 <_free_r+0x26>
 8006870:	b003      	add	sp, #12
 8006872:	bd30      	pop	{r4, r5, pc}
 8006874:	200014b8 	.word	0x200014b8

08006878 <__ascii_mbtowc>:
 8006878:	b082      	sub	sp, #8
 800687a:	b901      	cbnz	r1, 800687e <__ascii_mbtowc+0x6>
 800687c:	a901      	add	r1, sp, #4
 800687e:	b142      	cbz	r2, 8006892 <__ascii_mbtowc+0x1a>
 8006880:	b14b      	cbz	r3, 8006896 <__ascii_mbtowc+0x1e>
 8006882:	7813      	ldrb	r3, [r2, #0]
 8006884:	600b      	str	r3, [r1, #0]
 8006886:	7812      	ldrb	r2, [r2, #0]
 8006888:	1e10      	subs	r0, r2, #0
 800688a:	bf18      	it	ne
 800688c:	2001      	movne	r0, #1
 800688e:	b002      	add	sp, #8
 8006890:	4770      	bx	lr
 8006892:	4610      	mov	r0, r2
 8006894:	e7fb      	b.n	800688e <__ascii_mbtowc+0x16>
 8006896:	f06f 0001 	mvn.w	r0, #1
 800689a:	e7f8      	b.n	800688e <__ascii_mbtowc+0x16>

0800689c <_malloc_usable_size_r>:
 800689c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068a0:	1f18      	subs	r0, r3, #4
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	bfbc      	itt	lt
 80068a6:	580b      	ldrlt	r3, [r1, r0]
 80068a8:	18c0      	addlt	r0, r0, r3
 80068aa:	4770      	bx	lr

080068ac <fiprintf>:
 80068ac:	b40e      	push	{r1, r2, r3}
 80068ae:	b503      	push	{r0, r1, lr}
 80068b0:	4601      	mov	r1, r0
 80068b2:	ab03      	add	r3, sp, #12
 80068b4:	4805      	ldr	r0, [pc, #20]	; (80068cc <fiprintf+0x20>)
 80068b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80068ba:	6800      	ldr	r0, [r0, #0]
 80068bc:	9301      	str	r3, [sp, #4]
 80068be:	f000 f845 	bl	800694c <_vfiprintf_r>
 80068c2:	b002      	add	sp, #8
 80068c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80068c8:	b003      	add	sp, #12
 80068ca:	4770      	bx	lr
 80068cc:	20000060 	.word	0x20000060

080068d0 <__ascii_wctomb>:
 80068d0:	b149      	cbz	r1, 80068e6 <__ascii_wctomb+0x16>
 80068d2:	2aff      	cmp	r2, #255	; 0xff
 80068d4:	bf85      	ittet	hi
 80068d6:	238a      	movhi	r3, #138	; 0x8a
 80068d8:	6003      	strhi	r3, [r0, #0]
 80068da:	700a      	strbls	r2, [r1, #0]
 80068dc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80068e0:	bf98      	it	ls
 80068e2:	2001      	movls	r0, #1
 80068e4:	4770      	bx	lr
 80068e6:	4608      	mov	r0, r1
 80068e8:	4770      	bx	lr

080068ea <abort>:
 80068ea:	b508      	push	{r3, lr}
 80068ec:	2006      	movs	r0, #6
 80068ee:	f000 fa89 	bl	8006e04 <raise>
 80068f2:	2001      	movs	r0, #1
 80068f4:	f7fb f9ef 	bl	8001cd6 <_exit>

080068f8 <__sfputc_r>:
 80068f8:	6893      	ldr	r3, [r2, #8]
 80068fa:	3b01      	subs	r3, #1
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	b410      	push	{r4}
 8006900:	6093      	str	r3, [r2, #8]
 8006902:	da08      	bge.n	8006916 <__sfputc_r+0x1e>
 8006904:	6994      	ldr	r4, [r2, #24]
 8006906:	42a3      	cmp	r3, r4
 8006908:	db01      	blt.n	800690e <__sfputc_r+0x16>
 800690a:	290a      	cmp	r1, #10
 800690c:	d103      	bne.n	8006916 <__sfputc_r+0x1e>
 800690e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006912:	f000 b935 	b.w	8006b80 <__swbuf_r>
 8006916:	6813      	ldr	r3, [r2, #0]
 8006918:	1c58      	adds	r0, r3, #1
 800691a:	6010      	str	r0, [r2, #0]
 800691c:	7019      	strb	r1, [r3, #0]
 800691e:	4608      	mov	r0, r1
 8006920:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006924:	4770      	bx	lr

08006926 <__sfputs_r>:
 8006926:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006928:	4606      	mov	r6, r0
 800692a:	460f      	mov	r7, r1
 800692c:	4614      	mov	r4, r2
 800692e:	18d5      	adds	r5, r2, r3
 8006930:	42ac      	cmp	r4, r5
 8006932:	d101      	bne.n	8006938 <__sfputs_r+0x12>
 8006934:	2000      	movs	r0, #0
 8006936:	e007      	b.n	8006948 <__sfputs_r+0x22>
 8006938:	f814 1b01 	ldrb.w	r1, [r4], #1
 800693c:	463a      	mov	r2, r7
 800693e:	4630      	mov	r0, r6
 8006940:	f7ff ffda 	bl	80068f8 <__sfputc_r>
 8006944:	1c43      	adds	r3, r0, #1
 8006946:	d1f3      	bne.n	8006930 <__sfputs_r+0xa>
 8006948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800694c <_vfiprintf_r>:
 800694c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006950:	460d      	mov	r5, r1
 8006952:	b09d      	sub	sp, #116	; 0x74
 8006954:	4614      	mov	r4, r2
 8006956:	4698      	mov	r8, r3
 8006958:	4606      	mov	r6, r0
 800695a:	b118      	cbz	r0, 8006964 <_vfiprintf_r+0x18>
 800695c:	6a03      	ldr	r3, [r0, #32]
 800695e:	b90b      	cbnz	r3, 8006964 <_vfiprintf_r+0x18>
 8006960:	f7fe f8d8 	bl	8004b14 <__sinit>
 8006964:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006966:	07d9      	lsls	r1, r3, #31
 8006968:	d405      	bmi.n	8006976 <_vfiprintf_r+0x2a>
 800696a:	89ab      	ldrh	r3, [r5, #12]
 800696c:	059a      	lsls	r2, r3, #22
 800696e:	d402      	bmi.n	8006976 <_vfiprintf_r+0x2a>
 8006970:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006972:	f7fe f95c 	bl	8004c2e <__retarget_lock_acquire_recursive>
 8006976:	89ab      	ldrh	r3, [r5, #12]
 8006978:	071b      	lsls	r3, r3, #28
 800697a:	d501      	bpl.n	8006980 <_vfiprintf_r+0x34>
 800697c:	692b      	ldr	r3, [r5, #16]
 800697e:	b99b      	cbnz	r3, 80069a8 <_vfiprintf_r+0x5c>
 8006980:	4629      	mov	r1, r5
 8006982:	4630      	mov	r0, r6
 8006984:	f000 f93a 	bl	8006bfc <__swsetup_r>
 8006988:	b170      	cbz	r0, 80069a8 <_vfiprintf_r+0x5c>
 800698a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800698c:	07dc      	lsls	r4, r3, #31
 800698e:	d504      	bpl.n	800699a <_vfiprintf_r+0x4e>
 8006990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006994:	b01d      	add	sp, #116	; 0x74
 8006996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800699a:	89ab      	ldrh	r3, [r5, #12]
 800699c:	0598      	lsls	r0, r3, #22
 800699e:	d4f7      	bmi.n	8006990 <_vfiprintf_r+0x44>
 80069a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069a2:	f7fe f945 	bl	8004c30 <__retarget_lock_release_recursive>
 80069a6:	e7f3      	b.n	8006990 <_vfiprintf_r+0x44>
 80069a8:	2300      	movs	r3, #0
 80069aa:	9309      	str	r3, [sp, #36]	; 0x24
 80069ac:	2320      	movs	r3, #32
 80069ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80069b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80069b6:	2330      	movs	r3, #48	; 0x30
 80069b8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006b6c <_vfiprintf_r+0x220>
 80069bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80069c0:	f04f 0901 	mov.w	r9, #1
 80069c4:	4623      	mov	r3, r4
 80069c6:	469a      	mov	sl, r3
 80069c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069cc:	b10a      	cbz	r2, 80069d2 <_vfiprintf_r+0x86>
 80069ce:	2a25      	cmp	r2, #37	; 0x25
 80069d0:	d1f9      	bne.n	80069c6 <_vfiprintf_r+0x7a>
 80069d2:	ebba 0b04 	subs.w	fp, sl, r4
 80069d6:	d00b      	beq.n	80069f0 <_vfiprintf_r+0xa4>
 80069d8:	465b      	mov	r3, fp
 80069da:	4622      	mov	r2, r4
 80069dc:	4629      	mov	r1, r5
 80069de:	4630      	mov	r0, r6
 80069e0:	f7ff ffa1 	bl	8006926 <__sfputs_r>
 80069e4:	3001      	adds	r0, #1
 80069e6:	f000 80a9 	beq.w	8006b3c <_vfiprintf_r+0x1f0>
 80069ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069ec:	445a      	add	r2, fp
 80069ee:	9209      	str	r2, [sp, #36]	; 0x24
 80069f0:	f89a 3000 	ldrb.w	r3, [sl]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	f000 80a1 	beq.w	8006b3c <_vfiprintf_r+0x1f0>
 80069fa:	2300      	movs	r3, #0
 80069fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a04:	f10a 0a01 	add.w	sl, sl, #1
 8006a08:	9304      	str	r3, [sp, #16]
 8006a0a:	9307      	str	r3, [sp, #28]
 8006a0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a10:	931a      	str	r3, [sp, #104]	; 0x68
 8006a12:	4654      	mov	r4, sl
 8006a14:	2205      	movs	r2, #5
 8006a16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a1a:	4854      	ldr	r0, [pc, #336]	; (8006b6c <_vfiprintf_r+0x220>)
 8006a1c:	f7f9 fbe0 	bl	80001e0 <memchr>
 8006a20:	9a04      	ldr	r2, [sp, #16]
 8006a22:	b9d8      	cbnz	r0, 8006a5c <_vfiprintf_r+0x110>
 8006a24:	06d1      	lsls	r1, r2, #27
 8006a26:	bf44      	itt	mi
 8006a28:	2320      	movmi	r3, #32
 8006a2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a2e:	0713      	lsls	r3, r2, #28
 8006a30:	bf44      	itt	mi
 8006a32:	232b      	movmi	r3, #43	; 0x2b
 8006a34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a38:	f89a 3000 	ldrb.w	r3, [sl]
 8006a3c:	2b2a      	cmp	r3, #42	; 0x2a
 8006a3e:	d015      	beq.n	8006a6c <_vfiprintf_r+0x120>
 8006a40:	9a07      	ldr	r2, [sp, #28]
 8006a42:	4654      	mov	r4, sl
 8006a44:	2000      	movs	r0, #0
 8006a46:	f04f 0c0a 	mov.w	ip, #10
 8006a4a:	4621      	mov	r1, r4
 8006a4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a50:	3b30      	subs	r3, #48	; 0x30
 8006a52:	2b09      	cmp	r3, #9
 8006a54:	d94d      	bls.n	8006af2 <_vfiprintf_r+0x1a6>
 8006a56:	b1b0      	cbz	r0, 8006a86 <_vfiprintf_r+0x13a>
 8006a58:	9207      	str	r2, [sp, #28]
 8006a5a:	e014      	b.n	8006a86 <_vfiprintf_r+0x13a>
 8006a5c:	eba0 0308 	sub.w	r3, r0, r8
 8006a60:	fa09 f303 	lsl.w	r3, r9, r3
 8006a64:	4313      	orrs	r3, r2
 8006a66:	9304      	str	r3, [sp, #16]
 8006a68:	46a2      	mov	sl, r4
 8006a6a:	e7d2      	b.n	8006a12 <_vfiprintf_r+0xc6>
 8006a6c:	9b03      	ldr	r3, [sp, #12]
 8006a6e:	1d19      	adds	r1, r3, #4
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	9103      	str	r1, [sp, #12]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	bfbb      	ittet	lt
 8006a78:	425b      	neglt	r3, r3
 8006a7a:	f042 0202 	orrlt.w	r2, r2, #2
 8006a7e:	9307      	strge	r3, [sp, #28]
 8006a80:	9307      	strlt	r3, [sp, #28]
 8006a82:	bfb8      	it	lt
 8006a84:	9204      	strlt	r2, [sp, #16]
 8006a86:	7823      	ldrb	r3, [r4, #0]
 8006a88:	2b2e      	cmp	r3, #46	; 0x2e
 8006a8a:	d10c      	bne.n	8006aa6 <_vfiprintf_r+0x15a>
 8006a8c:	7863      	ldrb	r3, [r4, #1]
 8006a8e:	2b2a      	cmp	r3, #42	; 0x2a
 8006a90:	d134      	bne.n	8006afc <_vfiprintf_r+0x1b0>
 8006a92:	9b03      	ldr	r3, [sp, #12]
 8006a94:	1d1a      	adds	r2, r3, #4
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	9203      	str	r2, [sp, #12]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	bfb8      	it	lt
 8006a9e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006aa2:	3402      	adds	r4, #2
 8006aa4:	9305      	str	r3, [sp, #20]
 8006aa6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006b7c <_vfiprintf_r+0x230>
 8006aaa:	7821      	ldrb	r1, [r4, #0]
 8006aac:	2203      	movs	r2, #3
 8006aae:	4650      	mov	r0, sl
 8006ab0:	f7f9 fb96 	bl	80001e0 <memchr>
 8006ab4:	b138      	cbz	r0, 8006ac6 <_vfiprintf_r+0x17a>
 8006ab6:	9b04      	ldr	r3, [sp, #16]
 8006ab8:	eba0 000a 	sub.w	r0, r0, sl
 8006abc:	2240      	movs	r2, #64	; 0x40
 8006abe:	4082      	lsls	r2, r0
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	3401      	adds	r4, #1
 8006ac4:	9304      	str	r3, [sp, #16]
 8006ac6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006aca:	4829      	ldr	r0, [pc, #164]	; (8006b70 <_vfiprintf_r+0x224>)
 8006acc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ad0:	2206      	movs	r2, #6
 8006ad2:	f7f9 fb85 	bl	80001e0 <memchr>
 8006ad6:	2800      	cmp	r0, #0
 8006ad8:	d03f      	beq.n	8006b5a <_vfiprintf_r+0x20e>
 8006ada:	4b26      	ldr	r3, [pc, #152]	; (8006b74 <_vfiprintf_r+0x228>)
 8006adc:	bb1b      	cbnz	r3, 8006b26 <_vfiprintf_r+0x1da>
 8006ade:	9b03      	ldr	r3, [sp, #12]
 8006ae0:	3307      	adds	r3, #7
 8006ae2:	f023 0307 	bic.w	r3, r3, #7
 8006ae6:	3308      	adds	r3, #8
 8006ae8:	9303      	str	r3, [sp, #12]
 8006aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aec:	443b      	add	r3, r7
 8006aee:	9309      	str	r3, [sp, #36]	; 0x24
 8006af0:	e768      	b.n	80069c4 <_vfiprintf_r+0x78>
 8006af2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006af6:	460c      	mov	r4, r1
 8006af8:	2001      	movs	r0, #1
 8006afa:	e7a6      	b.n	8006a4a <_vfiprintf_r+0xfe>
 8006afc:	2300      	movs	r3, #0
 8006afe:	3401      	adds	r4, #1
 8006b00:	9305      	str	r3, [sp, #20]
 8006b02:	4619      	mov	r1, r3
 8006b04:	f04f 0c0a 	mov.w	ip, #10
 8006b08:	4620      	mov	r0, r4
 8006b0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b0e:	3a30      	subs	r2, #48	; 0x30
 8006b10:	2a09      	cmp	r2, #9
 8006b12:	d903      	bls.n	8006b1c <_vfiprintf_r+0x1d0>
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d0c6      	beq.n	8006aa6 <_vfiprintf_r+0x15a>
 8006b18:	9105      	str	r1, [sp, #20]
 8006b1a:	e7c4      	b.n	8006aa6 <_vfiprintf_r+0x15a>
 8006b1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b20:	4604      	mov	r4, r0
 8006b22:	2301      	movs	r3, #1
 8006b24:	e7f0      	b.n	8006b08 <_vfiprintf_r+0x1bc>
 8006b26:	ab03      	add	r3, sp, #12
 8006b28:	9300      	str	r3, [sp, #0]
 8006b2a:	462a      	mov	r2, r5
 8006b2c:	4b12      	ldr	r3, [pc, #72]	; (8006b78 <_vfiprintf_r+0x22c>)
 8006b2e:	a904      	add	r1, sp, #16
 8006b30:	4630      	mov	r0, r6
 8006b32:	f7fd fb9d 	bl	8004270 <_printf_float>
 8006b36:	4607      	mov	r7, r0
 8006b38:	1c78      	adds	r0, r7, #1
 8006b3a:	d1d6      	bne.n	8006aea <_vfiprintf_r+0x19e>
 8006b3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b3e:	07d9      	lsls	r1, r3, #31
 8006b40:	d405      	bmi.n	8006b4e <_vfiprintf_r+0x202>
 8006b42:	89ab      	ldrh	r3, [r5, #12]
 8006b44:	059a      	lsls	r2, r3, #22
 8006b46:	d402      	bmi.n	8006b4e <_vfiprintf_r+0x202>
 8006b48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b4a:	f7fe f871 	bl	8004c30 <__retarget_lock_release_recursive>
 8006b4e:	89ab      	ldrh	r3, [r5, #12]
 8006b50:	065b      	lsls	r3, r3, #25
 8006b52:	f53f af1d 	bmi.w	8006990 <_vfiprintf_r+0x44>
 8006b56:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b58:	e71c      	b.n	8006994 <_vfiprintf_r+0x48>
 8006b5a:	ab03      	add	r3, sp, #12
 8006b5c:	9300      	str	r3, [sp, #0]
 8006b5e:	462a      	mov	r2, r5
 8006b60:	4b05      	ldr	r3, [pc, #20]	; (8006b78 <_vfiprintf_r+0x22c>)
 8006b62:	a904      	add	r1, sp, #16
 8006b64:	4630      	mov	r0, r6
 8006b66:	f7fd fe27 	bl	80047b8 <_printf_i>
 8006b6a:	e7e4      	b.n	8006b36 <_vfiprintf_r+0x1ea>
 8006b6c:	08007349 	.word	0x08007349
 8006b70:	08007353 	.word	0x08007353
 8006b74:	08004271 	.word	0x08004271
 8006b78:	08006927 	.word	0x08006927
 8006b7c:	0800734f 	.word	0x0800734f

08006b80 <__swbuf_r>:
 8006b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b82:	460e      	mov	r6, r1
 8006b84:	4614      	mov	r4, r2
 8006b86:	4605      	mov	r5, r0
 8006b88:	b118      	cbz	r0, 8006b92 <__swbuf_r+0x12>
 8006b8a:	6a03      	ldr	r3, [r0, #32]
 8006b8c:	b90b      	cbnz	r3, 8006b92 <__swbuf_r+0x12>
 8006b8e:	f7fd ffc1 	bl	8004b14 <__sinit>
 8006b92:	69a3      	ldr	r3, [r4, #24]
 8006b94:	60a3      	str	r3, [r4, #8]
 8006b96:	89a3      	ldrh	r3, [r4, #12]
 8006b98:	071a      	lsls	r2, r3, #28
 8006b9a:	d525      	bpl.n	8006be8 <__swbuf_r+0x68>
 8006b9c:	6923      	ldr	r3, [r4, #16]
 8006b9e:	b31b      	cbz	r3, 8006be8 <__swbuf_r+0x68>
 8006ba0:	6823      	ldr	r3, [r4, #0]
 8006ba2:	6922      	ldr	r2, [r4, #16]
 8006ba4:	1a98      	subs	r0, r3, r2
 8006ba6:	6963      	ldr	r3, [r4, #20]
 8006ba8:	b2f6      	uxtb	r6, r6
 8006baa:	4283      	cmp	r3, r0
 8006bac:	4637      	mov	r7, r6
 8006bae:	dc04      	bgt.n	8006bba <__swbuf_r+0x3a>
 8006bb0:	4621      	mov	r1, r4
 8006bb2:	4628      	mov	r0, r5
 8006bb4:	f7ff f940 	bl	8005e38 <_fflush_r>
 8006bb8:	b9e0      	cbnz	r0, 8006bf4 <__swbuf_r+0x74>
 8006bba:	68a3      	ldr	r3, [r4, #8]
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	60a3      	str	r3, [r4, #8]
 8006bc0:	6823      	ldr	r3, [r4, #0]
 8006bc2:	1c5a      	adds	r2, r3, #1
 8006bc4:	6022      	str	r2, [r4, #0]
 8006bc6:	701e      	strb	r6, [r3, #0]
 8006bc8:	6962      	ldr	r2, [r4, #20]
 8006bca:	1c43      	adds	r3, r0, #1
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d004      	beq.n	8006bda <__swbuf_r+0x5a>
 8006bd0:	89a3      	ldrh	r3, [r4, #12]
 8006bd2:	07db      	lsls	r3, r3, #31
 8006bd4:	d506      	bpl.n	8006be4 <__swbuf_r+0x64>
 8006bd6:	2e0a      	cmp	r6, #10
 8006bd8:	d104      	bne.n	8006be4 <__swbuf_r+0x64>
 8006bda:	4621      	mov	r1, r4
 8006bdc:	4628      	mov	r0, r5
 8006bde:	f7ff f92b 	bl	8005e38 <_fflush_r>
 8006be2:	b938      	cbnz	r0, 8006bf4 <__swbuf_r+0x74>
 8006be4:	4638      	mov	r0, r7
 8006be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006be8:	4621      	mov	r1, r4
 8006bea:	4628      	mov	r0, r5
 8006bec:	f000 f806 	bl	8006bfc <__swsetup_r>
 8006bf0:	2800      	cmp	r0, #0
 8006bf2:	d0d5      	beq.n	8006ba0 <__swbuf_r+0x20>
 8006bf4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006bf8:	e7f4      	b.n	8006be4 <__swbuf_r+0x64>
	...

08006bfc <__swsetup_r>:
 8006bfc:	b538      	push	{r3, r4, r5, lr}
 8006bfe:	4b2a      	ldr	r3, [pc, #168]	; (8006ca8 <__swsetup_r+0xac>)
 8006c00:	4605      	mov	r5, r0
 8006c02:	6818      	ldr	r0, [r3, #0]
 8006c04:	460c      	mov	r4, r1
 8006c06:	b118      	cbz	r0, 8006c10 <__swsetup_r+0x14>
 8006c08:	6a03      	ldr	r3, [r0, #32]
 8006c0a:	b90b      	cbnz	r3, 8006c10 <__swsetup_r+0x14>
 8006c0c:	f7fd ff82 	bl	8004b14 <__sinit>
 8006c10:	89a3      	ldrh	r3, [r4, #12]
 8006c12:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c16:	0718      	lsls	r0, r3, #28
 8006c18:	d422      	bmi.n	8006c60 <__swsetup_r+0x64>
 8006c1a:	06d9      	lsls	r1, r3, #27
 8006c1c:	d407      	bmi.n	8006c2e <__swsetup_r+0x32>
 8006c1e:	2309      	movs	r3, #9
 8006c20:	602b      	str	r3, [r5, #0]
 8006c22:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006c26:	81a3      	strh	r3, [r4, #12]
 8006c28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c2c:	e034      	b.n	8006c98 <__swsetup_r+0x9c>
 8006c2e:	0758      	lsls	r0, r3, #29
 8006c30:	d512      	bpl.n	8006c58 <__swsetup_r+0x5c>
 8006c32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c34:	b141      	cbz	r1, 8006c48 <__swsetup_r+0x4c>
 8006c36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c3a:	4299      	cmp	r1, r3
 8006c3c:	d002      	beq.n	8006c44 <__swsetup_r+0x48>
 8006c3e:	4628      	mov	r0, r5
 8006c40:	f7ff fdce 	bl	80067e0 <_free_r>
 8006c44:	2300      	movs	r3, #0
 8006c46:	6363      	str	r3, [r4, #52]	; 0x34
 8006c48:	89a3      	ldrh	r3, [r4, #12]
 8006c4a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c4e:	81a3      	strh	r3, [r4, #12]
 8006c50:	2300      	movs	r3, #0
 8006c52:	6063      	str	r3, [r4, #4]
 8006c54:	6923      	ldr	r3, [r4, #16]
 8006c56:	6023      	str	r3, [r4, #0]
 8006c58:	89a3      	ldrh	r3, [r4, #12]
 8006c5a:	f043 0308 	orr.w	r3, r3, #8
 8006c5e:	81a3      	strh	r3, [r4, #12]
 8006c60:	6923      	ldr	r3, [r4, #16]
 8006c62:	b94b      	cbnz	r3, 8006c78 <__swsetup_r+0x7c>
 8006c64:	89a3      	ldrh	r3, [r4, #12]
 8006c66:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006c6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c6e:	d003      	beq.n	8006c78 <__swsetup_r+0x7c>
 8006c70:	4621      	mov	r1, r4
 8006c72:	4628      	mov	r0, r5
 8006c74:	f000 f840 	bl	8006cf8 <__smakebuf_r>
 8006c78:	89a0      	ldrh	r0, [r4, #12]
 8006c7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c7e:	f010 0301 	ands.w	r3, r0, #1
 8006c82:	d00a      	beq.n	8006c9a <__swsetup_r+0x9e>
 8006c84:	2300      	movs	r3, #0
 8006c86:	60a3      	str	r3, [r4, #8]
 8006c88:	6963      	ldr	r3, [r4, #20]
 8006c8a:	425b      	negs	r3, r3
 8006c8c:	61a3      	str	r3, [r4, #24]
 8006c8e:	6923      	ldr	r3, [r4, #16]
 8006c90:	b943      	cbnz	r3, 8006ca4 <__swsetup_r+0xa8>
 8006c92:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006c96:	d1c4      	bne.n	8006c22 <__swsetup_r+0x26>
 8006c98:	bd38      	pop	{r3, r4, r5, pc}
 8006c9a:	0781      	lsls	r1, r0, #30
 8006c9c:	bf58      	it	pl
 8006c9e:	6963      	ldrpl	r3, [r4, #20]
 8006ca0:	60a3      	str	r3, [r4, #8]
 8006ca2:	e7f4      	b.n	8006c8e <__swsetup_r+0x92>
 8006ca4:	2000      	movs	r0, #0
 8006ca6:	e7f7      	b.n	8006c98 <__swsetup_r+0x9c>
 8006ca8:	20000060 	.word	0x20000060

08006cac <__swhatbuf_r>:
 8006cac:	b570      	push	{r4, r5, r6, lr}
 8006cae:	460c      	mov	r4, r1
 8006cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cb4:	2900      	cmp	r1, #0
 8006cb6:	b096      	sub	sp, #88	; 0x58
 8006cb8:	4615      	mov	r5, r2
 8006cba:	461e      	mov	r6, r3
 8006cbc:	da0d      	bge.n	8006cda <__swhatbuf_r+0x2e>
 8006cbe:	89a3      	ldrh	r3, [r4, #12]
 8006cc0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006cc4:	f04f 0100 	mov.w	r1, #0
 8006cc8:	bf0c      	ite	eq
 8006cca:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006cce:	2340      	movne	r3, #64	; 0x40
 8006cd0:	2000      	movs	r0, #0
 8006cd2:	6031      	str	r1, [r6, #0]
 8006cd4:	602b      	str	r3, [r5, #0]
 8006cd6:	b016      	add	sp, #88	; 0x58
 8006cd8:	bd70      	pop	{r4, r5, r6, pc}
 8006cda:	466a      	mov	r2, sp
 8006cdc:	f000 f848 	bl	8006d70 <_fstat_r>
 8006ce0:	2800      	cmp	r0, #0
 8006ce2:	dbec      	blt.n	8006cbe <__swhatbuf_r+0x12>
 8006ce4:	9901      	ldr	r1, [sp, #4]
 8006ce6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006cea:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006cee:	4259      	negs	r1, r3
 8006cf0:	4159      	adcs	r1, r3
 8006cf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cf6:	e7eb      	b.n	8006cd0 <__swhatbuf_r+0x24>

08006cf8 <__smakebuf_r>:
 8006cf8:	898b      	ldrh	r3, [r1, #12]
 8006cfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006cfc:	079d      	lsls	r5, r3, #30
 8006cfe:	4606      	mov	r6, r0
 8006d00:	460c      	mov	r4, r1
 8006d02:	d507      	bpl.n	8006d14 <__smakebuf_r+0x1c>
 8006d04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d08:	6023      	str	r3, [r4, #0]
 8006d0a:	6123      	str	r3, [r4, #16]
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	6163      	str	r3, [r4, #20]
 8006d10:	b002      	add	sp, #8
 8006d12:	bd70      	pop	{r4, r5, r6, pc}
 8006d14:	ab01      	add	r3, sp, #4
 8006d16:	466a      	mov	r2, sp
 8006d18:	f7ff ffc8 	bl	8006cac <__swhatbuf_r>
 8006d1c:	9900      	ldr	r1, [sp, #0]
 8006d1e:	4605      	mov	r5, r0
 8006d20:	4630      	mov	r0, r6
 8006d22:	f7fe ff83 	bl	8005c2c <_malloc_r>
 8006d26:	b948      	cbnz	r0, 8006d3c <__smakebuf_r+0x44>
 8006d28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d2c:	059a      	lsls	r2, r3, #22
 8006d2e:	d4ef      	bmi.n	8006d10 <__smakebuf_r+0x18>
 8006d30:	f023 0303 	bic.w	r3, r3, #3
 8006d34:	f043 0302 	orr.w	r3, r3, #2
 8006d38:	81a3      	strh	r3, [r4, #12]
 8006d3a:	e7e3      	b.n	8006d04 <__smakebuf_r+0xc>
 8006d3c:	89a3      	ldrh	r3, [r4, #12]
 8006d3e:	6020      	str	r0, [r4, #0]
 8006d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d44:	81a3      	strh	r3, [r4, #12]
 8006d46:	9b00      	ldr	r3, [sp, #0]
 8006d48:	6163      	str	r3, [r4, #20]
 8006d4a:	9b01      	ldr	r3, [sp, #4]
 8006d4c:	6120      	str	r0, [r4, #16]
 8006d4e:	b15b      	cbz	r3, 8006d68 <__smakebuf_r+0x70>
 8006d50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d54:	4630      	mov	r0, r6
 8006d56:	f000 f81d 	bl	8006d94 <_isatty_r>
 8006d5a:	b128      	cbz	r0, 8006d68 <__smakebuf_r+0x70>
 8006d5c:	89a3      	ldrh	r3, [r4, #12]
 8006d5e:	f023 0303 	bic.w	r3, r3, #3
 8006d62:	f043 0301 	orr.w	r3, r3, #1
 8006d66:	81a3      	strh	r3, [r4, #12]
 8006d68:	89a3      	ldrh	r3, [r4, #12]
 8006d6a:	431d      	orrs	r5, r3
 8006d6c:	81a5      	strh	r5, [r4, #12]
 8006d6e:	e7cf      	b.n	8006d10 <__smakebuf_r+0x18>

08006d70 <_fstat_r>:
 8006d70:	b538      	push	{r3, r4, r5, lr}
 8006d72:	4d07      	ldr	r5, [pc, #28]	; (8006d90 <_fstat_r+0x20>)
 8006d74:	2300      	movs	r3, #0
 8006d76:	4604      	mov	r4, r0
 8006d78:	4608      	mov	r0, r1
 8006d7a:	4611      	mov	r1, r2
 8006d7c:	602b      	str	r3, [r5, #0]
 8006d7e:	f7fa fff9 	bl	8001d74 <_fstat>
 8006d82:	1c43      	adds	r3, r0, #1
 8006d84:	d102      	bne.n	8006d8c <_fstat_r+0x1c>
 8006d86:	682b      	ldr	r3, [r5, #0]
 8006d88:	b103      	cbz	r3, 8006d8c <_fstat_r+0x1c>
 8006d8a:	6023      	str	r3, [r4, #0]
 8006d8c:	bd38      	pop	{r3, r4, r5, pc}
 8006d8e:	bf00      	nop
 8006d90:	200014c0 	.word	0x200014c0

08006d94 <_isatty_r>:
 8006d94:	b538      	push	{r3, r4, r5, lr}
 8006d96:	4d06      	ldr	r5, [pc, #24]	; (8006db0 <_isatty_r+0x1c>)
 8006d98:	2300      	movs	r3, #0
 8006d9a:	4604      	mov	r4, r0
 8006d9c:	4608      	mov	r0, r1
 8006d9e:	602b      	str	r3, [r5, #0]
 8006da0:	f7fa fff8 	bl	8001d94 <_isatty>
 8006da4:	1c43      	adds	r3, r0, #1
 8006da6:	d102      	bne.n	8006dae <_isatty_r+0x1a>
 8006da8:	682b      	ldr	r3, [r5, #0]
 8006daa:	b103      	cbz	r3, 8006dae <_isatty_r+0x1a>
 8006dac:	6023      	str	r3, [r4, #0]
 8006dae:	bd38      	pop	{r3, r4, r5, pc}
 8006db0:	200014c0 	.word	0x200014c0

08006db4 <_raise_r>:
 8006db4:	291f      	cmp	r1, #31
 8006db6:	b538      	push	{r3, r4, r5, lr}
 8006db8:	4604      	mov	r4, r0
 8006dba:	460d      	mov	r5, r1
 8006dbc:	d904      	bls.n	8006dc8 <_raise_r+0x14>
 8006dbe:	2316      	movs	r3, #22
 8006dc0:	6003      	str	r3, [r0, #0]
 8006dc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006dc6:	bd38      	pop	{r3, r4, r5, pc}
 8006dc8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006dca:	b112      	cbz	r2, 8006dd2 <_raise_r+0x1e>
 8006dcc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006dd0:	b94b      	cbnz	r3, 8006de6 <_raise_r+0x32>
 8006dd2:	4620      	mov	r0, r4
 8006dd4:	f000 f830 	bl	8006e38 <_getpid_r>
 8006dd8:	462a      	mov	r2, r5
 8006dda:	4601      	mov	r1, r0
 8006ddc:	4620      	mov	r0, r4
 8006dde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006de2:	f000 b817 	b.w	8006e14 <_kill_r>
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d00a      	beq.n	8006e00 <_raise_r+0x4c>
 8006dea:	1c59      	adds	r1, r3, #1
 8006dec:	d103      	bne.n	8006df6 <_raise_r+0x42>
 8006dee:	2316      	movs	r3, #22
 8006df0:	6003      	str	r3, [r0, #0]
 8006df2:	2001      	movs	r0, #1
 8006df4:	e7e7      	b.n	8006dc6 <_raise_r+0x12>
 8006df6:	2400      	movs	r4, #0
 8006df8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006dfc:	4628      	mov	r0, r5
 8006dfe:	4798      	blx	r3
 8006e00:	2000      	movs	r0, #0
 8006e02:	e7e0      	b.n	8006dc6 <_raise_r+0x12>

08006e04 <raise>:
 8006e04:	4b02      	ldr	r3, [pc, #8]	; (8006e10 <raise+0xc>)
 8006e06:	4601      	mov	r1, r0
 8006e08:	6818      	ldr	r0, [r3, #0]
 8006e0a:	f7ff bfd3 	b.w	8006db4 <_raise_r>
 8006e0e:	bf00      	nop
 8006e10:	20000060 	.word	0x20000060

08006e14 <_kill_r>:
 8006e14:	b538      	push	{r3, r4, r5, lr}
 8006e16:	4d07      	ldr	r5, [pc, #28]	; (8006e34 <_kill_r+0x20>)
 8006e18:	2300      	movs	r3, #0
 8006e1a:	4604      	mov	r4, r0
 8006e1c:	4608      	mov	r0, r1
 8006e1e:	4611      	mov	r1, r2
 8006e20:	602b      	str	r3, [r5, #0]
 8006e22:	f7fa ff48 	bl	8001cb6 <_kill>
 8006e26:	1c43      	adds	r3, r0, #1
 8006e28:	d102      	bne.n	8006e30 <_kill_r+0x1c>
 8006e2a:	682b      	ldr	r3, [r5, #0]
 8006e2c:	b103      	cbz	r3, 8006e30 <_kill_r+0x1c>
 8006e2e:	6023      	str	r3, [r4, #0]
 8006e30:	bd38      	pop	{r3, r4, r5, pc}
 8006e32:	bf00      	nop
 8006e34:	200014c0 	.word	0x200014c0

08006e38 <_getpid_r>:
 8006e38:	f7fa bf35 	b.w	8001ca6 <_getpid>

08006e3c <_init>:
 8006e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e3e:	bf00      	nop
 8006e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e42:	bc08      	pop	{r3}
 8006e44:	469e      	mov	lr, r3
 8006e46:	4770      	bx	lr

08006e48 <_fini>:
 8006e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e4a:	bf00      	nop
 8006e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e4e:	bc08      	pop	{r3}
 8006e50:	469e      	mov	lr, r3
 8006e52:	4770      	bx	lr
